
STM32_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008798  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08008960  08008960  00018960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008978  08008978  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08008978  08008978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008980  08008980  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008980  08008980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008984  08008984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08008988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000678  2000008c  08008a14  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  08008a14  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151fe  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a61  00000000  00000000  000352fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001250  00000000  00000000  00037d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e81  00000000  00000000  00038fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c51  00000000  00000000  00039e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159b9  00000000  00000000  0005ca82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4ad5  00000000  00000000  0007243b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050cc  00000000  00000000  00146f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0014bfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000008c 	.word	0x2000008c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008948 	.word	0x08008948

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000090 	.word	0x20000090
 8000204:	08008948 	.word	0x08008948

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 b970 	b.w	8000e4c <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9e08      	ldr	r6, [sp, #32]
 8000b8a:	460d      	mov	r5, r1
 8000b8c:	4604      	mov	r4, r0
 8000b8e:	460f      	mov	r7, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14a      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b94:	428a      	cmp	r2, r1
 8000b96:	4694      	mov	ip, r2
 8000b98:	d965      	bls.n	8000c66 <__udivmoddi4+0xe2>
 8000b9a:	fab2 f382 	clz	r3, r2
 8000b9e:	b143      	cbz	r3, 8000bb2 <__udivmoddi4+0x2e>
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	f1c3 0220 	rsb	r2, r3, #32
 8000ba8:	409f      	lsls	r7, r3
 8000baa:	fa20 f202 	lsr.w	r2, r0, r2
 8000bae:	4317      	orrs	r7, r2
 8000bb0:	409c      	lsls	r4, r3
 8000bb2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bb6:	fa1f f58c 	uxth.w	r5, ip
 8000bba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bbe:	0c22      	lsrs	r2, r4, #16
 8000bc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc8:	fb01 f005 	mul.w	r0, r1, r5
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	d90a      	bls.n	8000be6 <__udivmoddi4+0x62>
 8000bd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bd8:	f080 811c 	bcs.w	8000e14 <__udivmoddi4+0x290>
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	f240 8119 	bls.w	8000e14 <__udivmoddi4+0x290>
 8000be2:	3902      	subs	r1, #2
 8000be4:	4462      	add	r2, ip
 8000be6:	1a12      	subs	r2, r2, r0
 8000be8:	b2a4      	uxth	r4, r4
 8000bea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bf6:	fb00 f505 	mul.w	r5, r0, r5
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x90>
 8000bfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000c02:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c06:	f080 8107 	bcs.w	8000e18 <__udivmoddi4+0x294>
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	f240 8104 	bls.w	8000e18 <__udivmoddi4+0x294>
 8000c10:	4464      	add	r4, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c18:	1b64      	subs	r4, r4, r5
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11e      	cbz	r6, 8000c26 <__udivmoddi4+0xa2>
 8000c1e:	40dc      	lsrs	r4, r3
 8000c20:	2300      	movs	r3, #0
 8000c22:	e9c6 4300 	strd	r4, r3, [r6]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0xbc>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	f000 80ed 	beq.w	8000e0e <__udivmoddi4+0x28a>
 8000c34:	2100      	movs	r1, #0
 8000c36:	e9c6 0500 	strd	r0, r5, [r6]
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c40:	fab3 f183 	clz	r1, r3
 8000c44:	2900      	cmp	r1, #0
 8000c46:	d149      	bne.n	8000cdc <__udivmoddi4+0x158>
 8000c48:	42ab      	cmp	r3, r5
 8000c4a:	d302      	bcc.n	8000c52 <__udivmoddi4+0xce>
 8000c4c:	4282      	cmp	r2, r0
 8000c4e:	f200 80f8 	bhi.w	8000e42 <__udivmoddi4+0x2be>
 8000c52:	1a84      	subs	r4, r0, r2
 8000c54:	eb65 0203 	sbc.w	r2, r5, r3
 8000c58:	2001      	movs	r0, #1
 8000c5a:	4617      	mov	r7, r2
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d0e2      	beq.n	8000c26 <__udivmoddi4+0xa2>
 8000c60:	e9c6 4700 	strd	r4, r7, [r6]
 8000c64:	e7df      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000c66:	b902      	cbnz	r2, 8000c6a <__udivmoddi4+0xe6>
 8000c68:	deff      	udf	#255	; 0xff
 8000c6a:	fab2 f382 	clz	r3, r2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f040 8090 	bne.w	8000d94 <__udivmoddi4+0x210>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7a:	fa1f fe8c 	uxth.w	lr, ip
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c84:	fb07 2015 	mls	r0, r7, r5, r2
 8000c88:	0c22      	lsrs	r2, r4, #16
 8000c8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8e:	fb0e f005 	mul.w	r0, lr, r5
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0x124>
 8000c96:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x122>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f200 80cb 	bhi.w	8000e3c <__udivmoddi4+0x2b8>
 8000ca6:	4645      	mov	r5, r8
 8000ca8:	1a12      	subs	r2, r2, r0
 8000caa:	b2a4      	uxth	r4, r4
 8000cac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cbc:	45a6      	cmp	lr, r4
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x14e>
 8000cc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cc8:	d202      	bcs.n	8000cd0 <__udivmoddi4+0x14c>
 8000cca:	45a6      	cmp	lr, r4
 8000ccc:	f200 80bb 	bhi.w	8000e46 <__udivmoddi4+0x2c2>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	eba4 040e 	sub.w	r4, r4, lr
 8000cd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cda:	e79f      	b.n	8000c1c <__udivmoddi4+0x98>
 8000cdc:	f1c1 0720 	rsb	r7, r1, #32
 8000ce0:	408b      	lsls	r3, r1
 8000ce2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cea:	fa05 f401 	lsl.w	r4, r5, r1
 8000cee:	fa20 f307 	lsr.w	r3, r0, r7
 8000cf2:	40fd      	lsrs	r5, r7
 8000cf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf8:	4323      	orrs	r3, r4
 8000cfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	fb09 5518 	mls	r5, r9, r8, r5
 8000d06:	0c1c      	lsrs	r4, r3, #16
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	fa00 f001 	lsl.w	r0, r0, r1
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b0>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d24:	f080 8088 	bcs.w	8000e38 <__udivmoddi4+0x2b4>
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	f240 8085 	bls.w	8000e38 <__udivmoddi4+0x2b4>
 8000d2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d32:	4464      	add	r4, ip
 8000d34:	1b64      	subs	r4, r4, r5
 8000d36:	b29d      	uxth	r5, r3
 8000d38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1da>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d54:	d26c      	bcs.n	8000e30 <__udivmoddi4+0x2ac>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	d96a      	bls.n	8000e30 <__udivmoddi4+0x2ac>
 8000d5a:	3b02      	subs	r3, #2
 8000d5c:	4464      	add	r4, ip
 8000d5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d62:	fba3 9502 	umull	r9, r5, r3, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	42ac      	cmp	r4, r5
 8000d6c:	46c8      	mov	r8, r9
 8000d6e:	46ae      	mov	lr, r5
 8000d70:	d356      	bcc.n	8000e20 <__udivmoddi4+0x29c>
 8000d72:	d053      	beq.n	8000e1c <__udivmoddi4+0x298>
 8000d74:	b156      	cbz	r6, 8000d8c <__udivmoddi4+0x208>
 8000d76:	ebb0 0208 	subs.w	r2, r0, r8
 8000d7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d82:	40ca      	lsrs	r2, r1
 8000d84:	40cc      	lsrs	r4, r1
 8000d86:	4317      	orrs	r7, r2
 8000d88:	e9c6 7400 	strd	r7, r4, [r6]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	f1c3 0120 	rsb	r1, r3, #32
 8000d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000da0:	fa25 f101 	lsr.w	r1, r5, r1
 8000da4:	409d      	lsls	r5, r3
 8000da6:	432a      	orrs	r2, r5
 8000da8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dac:	fa1f fe8c 	uxth.w	lr, ip
 8000db0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db4:	fb07 1510 	mls	r5, r7, r0, r1
 8000db8:	0c11      	lsrs	r1, r2, #16
 8000dba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc2:	428d      	cmp	r5, r1
 8000dc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x258>
 8000dca:	eb1c 0101 	adds.w	r1, ip, r1
 8000dce:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dd2:	d22f      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd4:	428d      	cmp	r5, r1
 8000dd6:	d92d      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4461      	add	r1, ip
 8000ddc:	1b49      	subs	r1, r1, r5
 8000dde:	b292      	uxth	r2, r2
 8000de0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de4:	fb07 1115 	mls	r1, r7, r5, r1
 8000de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dec:	fb05 f10e 	mul.w	r1, r5, lr
 8000df0:	4291      	cmp	r1, r2
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x282>
 8000df4:	eb1c 0202 	adds.w	r2, ip, r2
 8000df8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dfc:	d216      	bcs.n	8000e2c <__udivmoddi4+0x2a8>
 8000dfe:	4291      	cmp	r1, r2
 8000e00:	d914      	bls.n	8000e2c <__udivmoddi4+0x2a8>
 8000e02:	3d02      	subs	r5, #2
 8000e04:	4462      	add	r2, ip
 8000e06:	1a52      	subs	r2, r2, r1
 8000e08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e0c:	e738      	b.n	8000c80 <__udivmoddi4+0xfc>
 8000e0e:	4631      	mov	r1, r6
 8000e10:	4630      	mov	r0, r6
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xa2>
 8000e14:	4639      	mov	r1, r7
 8000e16:	e6e6      	b.n	8000be6 <__udivmoddi4+0x62>
 8000e18:	4610      	mov	r0, r2
 8000e1a:	e6fb      	b.n	8000c14 <__udivmoddi4+0x90>
 8000e1c:	4548      	cmp	r0, r9
 8000e1e:	d2a9      	bcs.n	8000d74 <__udivmoddi4+0x1f0>
 8000e20:	ebb9 0802 	subs.w	r8, r9, r2
 8000e24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e28:	3b01      	subs	r3, #1
 8000e2a:	e7a3      	b.n	8000d74 <__udivmoddi4+0x1f0>
 8000e2c:	4645      	mov	r5, r8
 8000e2e:	e7ea      	b.n	8000e06 <__udivmoddi4+0x282>
 8000e30:	462b      	mov	r3, r5
 8000e32:	e794      	b.n	8000d5e <__udivmoddi4+0x1da>
 8000e34:	4640      	mov	r0, r8
 8000e36:	e7d1      	b.n	8000ddc <__udivmoddi4+0x258>
 8000e38:	46d0      	mov	r8, sl
 8000e3a:	e77b      	b.n	8000d34 <__udivmoddi4+0x1b0>
 8000e3c:	3d02      	subs	r5, #2
 8000e3e:	4462      	add	r2, ip
 8000e40:	e732      	b.n	8000ca8 <__udivmoddi4+0x124>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e70a      	b.n	8000c5c <__udivmoddi4+0xd8>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	e742      	b.n	8000cd2 <__udivmoddi4+0x14e>

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <Reset_I2C_Write_Message>:
#endif
    memset(message, 0, sizeof(I2C_Read_Message));
}

void Reset_I2C_Write_Message(I2C_Write_Message* message)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(message == NULL)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <Reset_I2C_Write_Message+0x12>
        Error_Handler();
 8000e5e:	f002 fe93 	bl	8003b88 <Error_Handler>
#endif
    memset(message, 0, sizeof(I2C_Write_Message));
 8000e62:	2210      	movs	r2, #16
 8000e64:	2100      	movs	r1, #0
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f007 fd34 	bl	80088d4 <memset>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <Reset_I2C_CRC_Message>:

void Reset_I2C_CRC_Message(I2C_CRC_Message* message)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(message == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <Reset_I2C_CRC_Message+0x12>
        Error_Handler();
 8000e82:	f002 fe81 	bl	8003b88 <Error_Handler>
#endif
    memset(message, 0, sizeof(I2C_CRC_Message));
 8000e86:	220c      	movs	r2, #12
 8000e88:	2100      	movs	r1, #0
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f007 fd22 	bl	80088d4 <memset>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Reinit_I2C>:




void Reinit_I2C(I2C_Handle* handle, I2C_HandleTypeDef *hi2c)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    HAL_I2C_DeInit(hi2c);
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f003 fe84 	bl	8004bb0 <HAL_I2C_DeInit>
    HAL_I2C_Init(hi2c);
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f003 fd3d 	bl	8004928 <HAL_I2C_Init>
    //Reset_I2C_Read_Message(&handle->current_read_message);
    Reset_I2C_Write_Message(&handle->write_message); 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ffcd 	bl	8000e50 <Reset_I2C_Write_Message>
    Reset_I2C_CRC_Message(&handle->crc_message);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	33e0      	adds	r3, #224	; 0xe0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff ffda 	bl	8000e74 <Reset_I2C_CRC_Message>
    handle->message_start_time = 0;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    handle->message_type = NO_MESSAGE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Process_Ack_I2C>:

void Process_Ack_I2C(I2C_Handle* handle)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    if(handle->transfer_direction == I2C_DIRECTION_TRANSMIT)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d10d      	bne.n	8000f06 <Process_Ack_I2C+0x2e>
    {
        if(handle->message_type == READ_MESSAGE)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d108      	bne.n	8000f06 <Process_Ack_I2C+0x2e>
        {
            if(handle->current_read_message.index == I2C_MESSAGE_SIZE)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	d103      	bne.n	8000f06 <Process_Ack_I2C+0x2e>
            {
                handle->message_type = NO_MESSAGE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
                //Reset_I2C_Read_Message(&handle->current_read_message);
            }
        }
    }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <I2C_ErrorCallback>:

void I2C_ErrorCallback(I2C_Handle* handle, I2C_HandleTypeDef *hi2c)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(handle == NULL || hi2c == NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <I2C_ErrorCallback+0x16>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <I2C_ErrorCallback+0x1a>
        Error_Handler();
 8000f28:	f002 fe2e 	bl	8003b88 <Error_Handler>
#endif
    switch(HAL_I2C_GetError(hi2c))
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	f004 facf 	bl	80054d0 <HAL_I2C_GetError>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <I2C_ErrorCallback+0x32>
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d108      	bne.n	8000f4e <I2C_ErrorCallback+0x3c>
    {
        case HAL_I2C_ERROR_AF:
            Process_Ack_I2C(handle);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ffcb 	bl	8000ed8 <Process_Ack_I2C>
            break;
 8000f42:	e006      	b.n	8000f52 <I2C_ErrorCallback+0x40>
        case HAL_I2C_ERROR_BERR:
            Reinit_I2C(handle, hi2c);
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffa6 	bl	8000e98 <Reinit_I2C>
            break;
 8000f4c:	e001      	b.n	8000f52 <I2C_ErrorCallback+0x40>
        default:
            Error_Handler();
 8000f4e:	f002 fe1b 	bl	8003b88 <Error_Handler>
    }

    if(HAL_I2C_GetState(hi2c) != HAL_I2C_STATE_READY) // State must be ready for HAL_I2C_EnableListen_IT() to work. Resetting the controller sets it.
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f004 faae 	bl	80054b4 <HAL_I2C_GetState>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	d003      	beq.n	8000f66 <I2C_ErrorCallback+0x54>
        Reinit_I2C(handle, hi2c);
 8000f5e:	6839      	ldr	r1, [r7, #0]
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff99 	bl	8000e98 <Reinit_I2C>
    
    if(HAL_I2C_EnableListen_IT(hi2c) != HAL_OK)
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f004 f84a 	bl	8005000 <HAL_I2C_EnableListen_IT>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <I2C_ErrorCallback+0x64>
        Error_Handler();
 8000f72:	f002 fe09 	bl	8003b88 <Error_Handler>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <I2C_AddrCallback>:

uint32_t addr_callback_index = 0;
uint32_t rx_callback_index = 0;

void I2C_AddrCallback(I2C_Handle* handle, I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	460b      	mov	r3, r1
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	4613      	mov	r3, r2
 8000f94:	80bb      	strh	r3, [r7, #4]
#if DEBUG_MODE
    if(handle == NULL || hi2c == NULL)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <I2C_AddrCallback+0x22>
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <I2C_AddrCallback+0x26>
        Error_Handler(); 
 8000fa2:	f002 fdf1 	bl	8003b88 <Error_Handler>
#endif    
    if(AddrMatchCode == I2C_ADDR)
 8000fa6:	88bb      	ldrh	r3, [r7, #4]
 8000fa8:	2b24      	cmp	r3, #36	; 0x24
 8000faa:	d158      	bne.n	800105e <I2C_AddrCallback+0xde>
    {
        handle->transfer_direction = TransferDirection;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        handle->message_start_time = HAL_GetTick();
 8000fb4:	f003 f87e 	bl	80040b4 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

        addr_callback_index++;
 8000fc0:	4b29      	ldr	r3, [pc, #164]	; (8001068 <I2C_AddrCallback+0xe8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a28      	ldr	r2, [pc, #160]	; (8001068 <I2C_AddrCallback+0xe8>)
 8000fc8:	6013      	str	r3, [r2, #0]

        if(handle->transfer_direction == I2C_DIRECTION_TRANSMIT)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d115      	bne.n	8001000 <I2C_AddrCallback+0x80>
        {
        	handle->current_message = 0;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
            handle->message_type = NO_MESSAGE;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2

            if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &handle->current_message, 1, I2C_FIRST_FRAME) != HAL_OK)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 8000fea:	2301      	movs	r3, #1
 8000fec:	2201      	movs	r2, #1
 8000fee:	68b8      	ldr	r0, [r7, #8]
 8000ff0:	f003 ff93 	bl	8004f1a <HAL_I2C_Slave_Seq_Receive_IT>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d031      	beq.n	800105e <I2C_AddrCallback+0xde>
                Error_Handler();
 8000ffa:	f002 fdc5 	bl	8003b88 <Error_Handler>
                default:
                    Error_Handler();
            }
        }
    }
}
 8000ffe:	e02e      	b.n	800105e <I2C_AddrCallback+0xde>
            switch(handle->message_type)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8001006:	2b02      	cmp	r3, #2
 8001008:	d002      	beq.n	8001010 <I2C_AddrCallback+0x90>
 800100a:	2b03      	cmp	r3, #3
 800100c:	d012      	beq.n	8001034 <I2C_AddrCallback+0xb4>
 800100e:	e023      	b.n	8001058 <I2C_AddrCallback+0xd8>
                    if(HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &handle->current_read_message.message[0], I2C_MESSAGE_SIZE, I2C_LAST_FRAME) != HAL_OK)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f103 0110 	add.w	r1, r3, #16
 8001016:	2320      	movs	r3, #32
 8001018:	2264      	movs	r2, #100	; 0x64
 800101a:	68b8      	ldr	r0, [r7, #8]
 800101c:	f003 ff0a 	bl	8004e34 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <I2C_AddrCallback+0xaa>
                        Error_Handler();
 8001026:	f002 fdaf 	bl	8003b88 <Error_Handler>
                    handle->current_read_message.index = 1;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
                    break;
 8001032:	e014      	b.n	800105e <I2C_AddrCallback+0xde>
                    if(HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &handle->crc_message.message[0], I2C_MESSAGE_SIZE, I2C_LAST_FRAME) != HAL_OK)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 800103a:	2320      	movs	r3, #32
 800103c:	2264      	movs	r2, #100	; 0x64
 800103e:	68b8      	ldr	r0, [r7, #8]
 8001040:	f003 fef8 	bl	8004e34 <HAL_I2C_Slave_Seq_Transmit_IT>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <I2C_AddrCallback+0xce>
                        Error_Handler();
 800104a:	f002 fd9d 	bl	8003b88 <Error_Handler>
                    handle->crc_message.index = 1;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    break;
 8001056:	e002      	b.n	800105e <I2C_AddrCallback+0xde>
                    Error_Handler();
 8001058:	f002 fd96 	bl	8003b88 <Error_Handler>
}
 800105c:	e7ff      	b.n	800105e <I2C_AddrCallback+0xde>
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000a8 	.word	0x200000a8

0800106c <Set_Next_Motor_Command>:


void Set_Next_Motor_Command(const uint8_t command, const uint8_t *data, I2C_Motor_Command* command_handle)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
    command_handle->next_command = command;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	715a      	strb	r2, [r3, #5]
    memcpy(command_handle->data, data, sizeof(uint8_t) * 4);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	601a      	str	r2, [r3, #0]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <Set_Motor_Value>:


void Set_Motor_Value(Motor_Handle* motor_handle, const uint8_t value_name, const uint8_t *data)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	460b      	mov	r3, r1
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	72fb      	strb	r3, [r7, #11]
    const float value = *(const float*)(data);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	617b      	str	r3, [r7, #20]
    switch(value_name)
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	2b2d      	cmp	r3, #45	; 0x2d
 80010ac:	d002      	beq.n	80010b4 <Set_Motor_Value+0x20>
 80010ae:	2b2e      	cmp	r3, #46	; 0x2e
 80010b0:	d023      	beq.n	80010fa <Set_Motor_Value+0x66>
 80010b2:	e01f      	b.n	80010f4 <Set_Motor_Value+0x60>
        //     break;
        // case PID_MAX4:
        //     motor_handle->back_right_motor.pid_position.max = value;
        //     break;
        case TARGET_POSITON: 
            motor_handle->front_left_motor.state.steps = 0; // Assuming the priority and sub-prority are correct this should be safe.
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
            motor_handle->front_right_motor.state.steps = 0;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
            motor_handle->back_left_motor.state.steps = 0;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
            motor_handle->back_right_motor.state.steps = 0;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

            
            motor_handle->front_left_motor.data.updated_position = value;  // This part is fine.
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	697a      	ldr	r2, [r7, #20]
 80010d8:	671a      	str	r2, [r3, #112]	; 0x70
            motor_handle->front_right_motor.data.updated_position = value;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	697a      	ldr	r2, [r7, #20]
 80010de:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
            motor_handle->back_left_motor.data.updated_position = value;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
            motor_handle->back_right_motor.data.updated_position = value;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
            break;
 80010f2:	e003      	b.n	80010fc <Set_Motor_Value+0x68>
        case TARGET_VELOCITY:
            break; // todo
        default:
            Error_Handler(); 
 80010f4:	f002 fd48 	bl	8003b88 <Error_Handler>
            break;
 80010f8:	e000      	b.n	80010fc <Set_Motor_Value+0x68>
            break; // todo
 80010fa:	bf00      	nop
    }
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <I2C_Compute_CRC>:



uint32_t I2C_Compute_CRC(uint8_t* data, uint8_t length)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
    const uint32_t polynomial = 0xEDB88320;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <I2C_Compute_CRC+0x70>)
 8001112:	60bb      	str	r3, [r7, #8]
    uint8_t* current  = data;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	617b      	str	r3, [r7, #20]
    uint32_t current_crc = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]

    while(length--)
 800111c:	e01b      	b.n	8001156 <I2C_Compute_CRC+0x52>
    {
        current_crc ^= *current++;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	617a      	str	r2, [r7, #20]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4053      	eors	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        for(uint8_t j = 0; j < 8; j++)
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e00d      	b.n	8001150 <I2C_Compute_CRC+0x4c>
            current_crc = (current_crc >> 1) ^ (-(int32_t)(current_crc & 1) & polynomial);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	085a      	lsrs	r2, r3, #1
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	425b      	negs	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	400b      	ands	r3, r1
 8001146:	4053      	eors	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        for(uint8_t j = 0; j < 8; j++)
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3301      	adds	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	2b07      	cmp	r3, #7
 8001154:	d9ee      	bls.n	8001134 <I2C_Compute_CRC+0x30>
    while(length--)
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	1e5a      	subs	r2, r3, #1
 800115a:	70fa      	strb	r2, [r7, #3]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1de      	bne.n	800111e <I2C_Compute_CRC+0x1a>
    }
    current_crc = ~current_crc;
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	613b      	str	r3, [r7, #16]
    return current_crc;
 8001166:	693b      	ldr	r3, [r7, #16]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	edb88320 	.word	0xedb88320

08001178 <Process_I2C_Write_Message>:




void Process_I2C_Write_Message(Motor_Handle* motor_handle, I2C_Handle* i2c_handle, I2C_Motor_Command* command_handle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
    const uint32_t computed_crc = I2C_Compute_CRC(i2c_handle->write_message.message, I2C_WRITE_DATA_SIZE);
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	2105      	movs	r1, #5
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ffbb 	bl	8001104 <I2C_Compute_CRC>
 800118e:	61f8      	str	r0, [r7, #28]
    const uint8_t message = i2c_handle->write_message.addr;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	76fb      	strb	r3, [r7, #27]
    const uint8_t* data = i2c_handle->write_message.data;
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3301      	adds	r3, #1
 800119a:	617b      	str	r3, [r7, #20]

    if(computed_crc == i2c_handle->write_message.crc)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d11d      	bne.n	80011e2 <Process_I2C_Write_Message+0x6a>
    {
        if(Is_Valid_Motor_Command(message))
 80011a6:	7efb      	ldrb	r3, [r7, #27]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f8b5 	bl	8002318 <Is_Valid_Motor_Command>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <Process_I2C_Write_Message+0x4a>
            Set_Next_Motor_Command(message, data, command_handle);
 80011b4:	7efb      	ldrb	r3, [r7, #27]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6979      	ldr	r1, [r7, #20]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ff56 	bl	800106c <Set_Next_Motor_Command>
 80011c0:	e00f      	b.n	80011e2 <Process_I2C_Write_Message+0x6a>
        else if(Is_Valid_Value(message))
 80011c2:	7efb      	ldrb	r3, [r7, #27]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 f8b9 	bl	800233c <Is_Valid_Value>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <Process_I2C_Write_Message+0x66>
            Set_Motor_Value(motor_handle, message, data);
 80011d0:	7efb      	ldrb	r3, [r7, #27]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4619      	mov	r1, r3
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f7ff ff5c 	bl	8001094 <Set_Motor_Value>
 80011dc:	e001      	b.n	80011e2 <Process_I2C_Write_Message+0x6a>
        else
            Error_Handler();
 80011de:	f002 fcd3 	bl	8003b88 <Error_Handler>
    }

    i2c_handle->crc_message.index = 0;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    i2c_handle->crc_message.crc = computed_crc;
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    i2c_handle->crc_message.addr = message;
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	7efa      	ldrb	r2, [r7, #27]
 80011f6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    i2c_handle->write_message.index = 0;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2200      	movs	r2, #0
 80011fe:	731a      	strb	r2, [r3, #12]
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <I2C_SlaveRxCpltCallback>:

uint32_t in_use_index = 0;
uint32_t updated_index = 0;
void I2C_SlaveRxCpltCallback(Motor_Handle* motor_handle, I2C_Handle* handle, I2C_Motor_Command* command_handle, I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
#if DEBUG_MODE
    if(handle == NULL || hi2c == NULL)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d002      	beq.n	8001222 <I2C_SlaveRxCpltCallback+0x1a>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <I2C_SlaveRxCpltCallback+0x1e>
        Error_Handler(); 
 8001222:	f002 fcb1 	bl	8003b88 <Error_Handler>
#endif 
    if(handle->transfer_direction != I2C_DIRECTION_TRANSMIT)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800122c:	2b01      	cmp	r3, #1
 800122e:	d001      	beq.n	8001234 <I2C_SlaveRxCpltCallback+0x2c>
        Error_Handler();
 8001230:	f002 fcaa 	bl	8003b88 <Error_Handler>


    switch(handle->current_message)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800123a:	2b08      	cmp	r3, #8
 800123c:	d002      	beq.n	8001244 <I2C_SlaveRxCpltCallback+0x3c>
 800123e:	2b09      	cmp	r3, #9
 8001240:	d02d      	beq.n	800129e <I2C_SlaveRxCpltCallback+0x96>
 8001242:	e031      	b.n	80012a8 <I2C_SlaveRxCpltCallback+0xa0>
    {
        case READ_COMMAND:
            if(!handle->next_read_message.in_use)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d01a      	beq.n	800128c <I2C_SlaveRxCpltCallback+0x84>
            {
                handle->next_read_message.in_use = true;
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
                if(handle->next_read_message.updated)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00c      	beq.n	8001284 <I2C_SlaveRxCpltCallback+0x7c>
                {
                    memcpy(handle->current_read_message.message, handle->next_read_message.message, I2C_MESSAGE_SIZE);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f103 0010 	add.w	r0, r3, #16
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	3378      	adds	r3, #120	; 0x78
 8001274:	2264      	movs	r2, #100	; 0x64
 8001276:	4619      	mov	r1, r3
 8001278:	f007 fb58 	bl	800892c <memcpy>
                    handle->next_read_message.updated = false;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
                }
                handle->next_read_message.in_use = false;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            handle->current_read_message.index = 0;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
            handle->message_type = READ_MESSAGE;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	2202      	movs	r2, #2
 8001298:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
            break;
 800129c:	e051      	b.n	8001342 <I2C_SlaveRxCpltCallback+0x13a>
        case CRC_COMMAND:
            handle->message_type = CRC_MESSAGE;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	2203      	movs	r2, #3
 80012a2:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
            break;
 80012a6:	e04c      	b.n	8001342 <I2C_SlaveRxCpltCallback+0x13a>
        default:
            if(handle->message_type == NO_MESSAGE)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d114      	bne.n	80012dc <I2C_SlaveRxCpltCallback+0xd4>
            {
                handle->message_type = WRITE_MESSAGE;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2201      	movs	r2, #1
 80012b6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
                handle->write_message.index = 0;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	2200      	movs	r2, #0
 80012be:	731a      	strb	r2, [r3, #12]
                handle->write_message.message[handle->write_message.index] = handle->current_message;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	7b1b      	ldrb	r3, [r3, #12]
 80012c4:	461a      	mov	r2, r3
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f893 10f1 	ldrb.w	r1, [r3, #241]	; 0xf1
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	5499      	strb	r1, [r3, r2]
                handle->write_message.index++;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	7b1b      	ldrb	r3, [r3, #12]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	731a      	strb	r2, [r3, #12]
            }
            if(handle->write_message.index == I2C_WRITE_SIZE-1)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	7b1b      	ldrb	r3, [r3, #12]
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d10f      	bne.n	8001304 <I2C_SlaveRxCpltCallback+0xfc>
            {
                if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &handle->write_message.message[handle->write_message.index], 1, I2C_LAST_FRAME) != HAL_OK)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	461a      	mov	r2, r3
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1899      	adds	r1, r3, r2
 80012ee:	2320      	movs	r3, #32
 80012f0:	2201      	movs	r2, #1
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f003 fe11 	bl	8004f1a <HAL_I2C_Slave_Seq_Receive_IT>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d011      	beq.n	8001322 <I2C_SlaveRxCpltCallback+0x11a>
                    Error_Handler();
 80012fe:	f002 fc43 	bl	8003b88 <Error_Handler>
 8001302:	e00e      	b.n	8001322 <I2C_SlaveRxCpltCallback+0x11a>
            }
            else
            {
                if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &handle->write_message.message[handle->write_message.index], 1, I2C_NEXT_FRAME) != HAL_OK)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	7b1b      	ldrb	r3, [r3, #12]
 8001308:	461a      	mov	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1899      	adds	r1, r3, r2
 800130e:	2304      	movs	r3, #4
 8001310:	2201      	movs	r2, #1
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f003 fe01 	bl	8004f1a <HAL_I2C_Slave_Seq_Receive_IT>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <I2C_SlaveRxCpltCallback+0x11a>
                    Error_Handler();
 800131e:	f002 fc33 	bl	8003b88 <Error_Handler>
            }
            handle->write_message.index++;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	7b1b      	ldrb	r3, [r3, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	731a      	strb	r2, [r3, #12]

            if(handle->write_message.index == I2C_WRITE_SIZE)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	7b1b      	ldrb	r3, [r3, #12]
 8001332:	2b09      	cmp	r3, #9
 8001334:	d104      	bne.n	8001340 <I2C_SlaveRxCpltCallback+0x138>
                Process_I2C_Write_Message(motor_handle, handle, command_handle);
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f7ff ff1c 	bl	8001178 <Process_I2C_Write_Message>
            break;
 8001340:	bf00      	nop

    // if(HAL_I2C_Slave_Seq_Receive_IT(hi2c, &handle->write_message.message[handle->write_message.index], 1, I2C_NEXT_FRAME) != HAL_OK)
        //Error_Handler();
    

    if(handle->write_message.index == I2C_WRITE_SIZE)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	7b1b      	ldrb	r3, [r3, #12]
 8001346:	2b09      	cmp	r3, #9
 8001348:	d104      	bne.n	8001354 <I2C_SlaveRxCpltCallback+0x14c>
        Process_I2C_Write_Message(motor_handle, handle, command_handle);
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff ff12 	bl	8001178 <Process_I2C_Write_Message>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <I2C_SlaveTxCpltCallback>:


void I2C_SlaveTxCpltCallback(I2C_Handle* handle, I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(handle == NULL || hi2c == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <I2C_SlaveTxCpltCallback+0x16>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <I2C_SlaveTxCpltCallback+0x1a>
        Error_Handler();
 8001372:	f002 fc09 	bl	8003b88 <Error_Handler>
#endif
    if(handle->transfer_direction != I2C_DIRECTION_RECEIVE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <I2C_SlaveTxCpltCallback+0x28>
        Error_Handler();
 8001380:	f002 fc02 	bl	8003b88 <Error_Handler>
    
    switch(handle->message_type)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 800138a:	2b02      	cmp	r3, #2
 800138c:	d002      	beq.n	8001394 <I2C_SlaveTxCpltCallback+0x38>
 800138e:	2b03      	cmp	r3, #3
 8001390:	d009      	beq.n	80013a6 <I2C_SlaveTxCpltCallback+0x4a>
 8001392:	e011      	b.n	80013b8 <I2C_SlaveTxCpltCallback+0x5c>
    {
        case READ_MESSAGE:
            handle->current_read_message.index++;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800139a:	3301      	adds	r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
            break;
 80013a4:	e00b      	b.n	80013be <I2C_SlaveTxCpltCallback+0x62>
        case CRC_MESSAGE:
            handle->crc_message.index++;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80013ac:	3301      	adds	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
            break;
 80013b6:	e002      	b.n	80013be <I2C_SlaveTxCpltCallback+0x62>
        default:
            Error_Handler();
 80013b8:	f002 fbe6 	bl	8003b88 <Error_Handler>
            break;
 80013bc:	bf00      	nop
    }
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <I2C_ListenCpltCallback>:


void I2C_ListenCpltCallback(I2C_Handle* handle, I2C_HandleTypeDef* hi2c)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(hi2c == NULL || hi2c == NULL)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <I2C_ListenCpltCallback+0x16>
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <I2C_ListenCpltCallback+0x1a>
        Error_Handler();
 80013dc:	f002 fbd4 	bl	8003b88 <Error_Handler>
#endif
    if(HAL_I2C_EnableListen_IT(hi2c) != HAL_OK)
 80013e0:	6838      	ldr	r0, [r7, #0]
 80013e2:	f003 fe0d 	bl	8005000 <HAL_I2C_EnableListen_IT>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <I2C_ListenCpltCallback+0x2a>
        Error_Handler();
 80013ec:	f002 fbcc 	bl	8003b88 <Error_Handler>
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <Init_I2C_Handle>:

void Init_I2C_Handle(I2C_Handle* handle, I2C_HandleTypeDef* i2c_handle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(handle == NULL || i2c_handle == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d002      	beq.n	800140e <Init_I2C_Handle+0x16>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <Init_I2C_Handle+0x1a>
        Error_Handler();
 800140e:	f002 fbbb 	bl	8003b88 <Error_Handler>
#endif 
    memset(handle, 0, sizeof(I2C_Handle));
 8001412:	22f4      	movs	r2, #244	; 0xf4
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f007 fa5c 	bl	80088d4 <memset>

    if(HAL_I2C_EnableListen_IT(i2c_handle) != HAL_OK)
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f003 fdef 	bl	8005000 <HAL_I2C_EnableListen_IT>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <Init_I2C_Handle+0x34>
        Error_Handler();
 8001428:	f002 fbae 	bl	8003b88 <Error_Handler>
}   
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <Get_Micros>:




uint32_t Get_Micros()
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
    const uint32_t time = TIM2->CNT;
 800143a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	607b      	str	r3, [r7, #4]
    return time;
 8001442:	687b      	ldr	r3, [r7, #4]
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <GPIO_Read>:



GPIO_PinState GPIO_Read(GPIO_Pin* GPIO)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(GPIO == NULL || GPIO->type == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <GPIO_Read+0x16>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <GPIO_Read+0x1a>
        Error_Handler();
 8001466:	f002 fb8f 	bl	8003b88 <Error_Handler>
#endif

    GPIO->state = HAL_GPIO_ReadPin(GPIO->type, GPIO->pin);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f003 fa25 	bl	80048c4 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	461a      	mov	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	719a      	strb	r2, [r3, #6]
    return GPIO->state;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	799b      	ldrb	r3, [r3, #6]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <GPIO_Write>:

void GPIO_Write(GPIO_Pin* GPIO, const GPIO_PinState state)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	70fb      	strb	r3, [r7, #3]
#if DEBUG_MODE
    if(GPIO == NULL || GPIO->type == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <GPIO_Write+0x1a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <GPIO_Write+0x1e>
        Error_Handler();
 80014a8:	f002 fb6e 	bl	8003b88 <Error_Handler>
#endif

    if(state != GPIO->state)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	799b      	ldrb	r3, [r3, #6]
 80014b0:	78fa      	ldrb	r2, [r7, #3]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d00b      	beq.n	80014ce <GPIO_Write+0x40>
    {
        GPIO->state = state;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	78fa      	ldrb	r2, [r7, #3]
 80014ba:	719a      	strb	r2, [r3, #6]
        HAL_GPIO_WritePin(GPIO->type, GPIO->pin, GPIO->state);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	8899      	ldrh	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	799b      	ldrb	r3, [r3, #6]
 80014c8:	461a      	mov	r2, r3
 80014ca:	f003 fa13 	bl	80048f4 <HAL_GPIO_WritePin>
    }
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <GPIO_Output_Init>:

void GPIO_Output_Init(GPIO_Pin* GPIO, GPIO_TypeDef* type, const uint16_t pin, const GPIO_PinState default_state)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b084      	sub	sp, #16
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	4611      	mov	r1, r2
 80014e2:	461a      	mov	r2, r3
 80014e4:	460b      	mov	r3, r1
 80014e6:	80fb      	strh	r3, [r7, #6]
 80014e8:	4613      	mov	r3, r2
 80014ea:	717b      	strb	r3, [r7, #5]
#if DEBUG_MODE
    if(GPIO == NULL || type == NULL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <GPIO_Output_Init+0x22>
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <GPIO_Output_Init+0x26>
        Error_Handler();
 80014f8:	f002 fb46 	bl	8003b88 <Error_Handler>
#endif

    GPIO->type = type; 
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	601a      	str	r2, [r3, #0]
    GPIO->pin = pin;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	88fa      	ldrh	r2, [r7, #6]
 8001506:	809a      	strh	r2, [r3, #4]
    GPIO->state = default_state;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	797a      	ldrb	r2, [r7, #5]
 800150c:	719a      	strb	r2, [r3, #6]
    HAL_GPIO_WritePin(GPIO->type, GPIO->pin, GPIO->state);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	8899      	ldrh	r1, [r3, #4]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	799b      	ldrb	r3, [r3, #6]
 800151a:	461a      	mov	r2, r3
 800151c:	f003 f9ea 	bl	80048f4 <HAL_GPIO_WritePin>
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <GPIO_Input_Init>:

void GPIO_Input_Init(GPIO_Pin* GPIO, GPIO_TypeDef* type, const uint16_t pin)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	4613      	mov	r3, r2
 8001534:	80fb      	strh	r3, [r7, #6]
#if DEBUG_MODE
    if(GPIO == NULL || type == NULL)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <GPIO_Input_Init+0x1a>
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <GPIO_Input_Init+0x1e>
        Error_Handler();
 8001542:	f002 fb21 	bl	8003b88 <Error_Handler>
#endif 

    GPIO->type = type; 
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	601a      	str	r2, [r3, #0]
    GPIO->pin = pin;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	88fa      	ldrh	r2, [r7, #6]
 8001550:	809a      	strh	r2, [r3, #4]
    GPIO->state = HAL_GPIO_ReadPin(GPIO->type, GPIO->pin);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	4619      	mov	r1, r3
 800155c:	4610      	mov	r0, r2
 800155e:	f003 f9b1 	bl	80048c4 <HAL_GPIO_ReadPin>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	719a      	strb	r2, [r3, #6]
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <DAC_Set_Value>:



void DAC_Set_Value(DAC_Pin* pin, uint16_t dac_value)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]
	if(dac_value > 4095)
 800157e:	887b      	ldrh	r3, [r7, #2]
 8001580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001584:	d302      	bcc.n	800158c <DAC_Set_Value+0x1a>
		dac_value = 4095;
 8001586:	f640 73ff 	movw	r3, #4095	; 0xfff
 800158a:	807b      	strh	r3, [r7, #2]
	pin->dac_value = dac_value;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	805a      	strh	r2, [r3, #2]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <DAC_Init>:


void DAC_Init(DAC_Pin* pin, uint8_t channel, uint16_t default_dac)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
 80015a6:	460b      	mov	r3, r1
 80015a8:	70fb      	strb	r3, [r7, #3]
 80015aa:	4613      	mov	r3, r2
 80015ac:	803b      	strh	r3, [r7, #0]
#if DEBUG_MODE
	if(pin == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <DAC_Init+0x1a>
		Error_Handler();
 80015b4:	f002 fae8 	bl	8003b88 <Error_Handler>
#endif
	pin->channel = channel;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	701a      	strb	r2, [r3, #0]
	DAC_Set_Value(pin, default_dac);
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffd5 	bl	8001572 <DAC_Set_Value>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <Reset_Motor>:




void Reset_Motor(Motor* motor)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(motor == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <Reset_Motor+0x12>
        Error_Handler();
 80015de:	f002 fad3 	bl	8003b88 <Error_Handler>
#endif

    const uint8_t hstate = motor->state.state;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 80015e8:	73fb      	strb	r3, [r7, #15]

    memset(&motor->data, 0, sizeof(Motor_Data));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3328      	adds	r3, #40	; 0x28
 80015ee:	2268      	movs	r2, #104	; 0x68
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f007 f96e 	bl	80088d4 <memset>
    memset(&motor->state, 0, sizeof(Hall_State));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	33c0      	adds	r3, #192	; 0xc0
 80015fc:	2224      	movs	r2, #36	; 0x24
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f007 f967 	bl	80088d4 <memset>

    motor->state.state = hstate;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <Set_Motor_Brake>:


void Set_Motor_Brake(Motor* motor, const GPIO_PinState state)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	70fb      	strb	r3, [r7, #3]
#if DEBUG_MODE
    if(motor == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <Set_Motor_Brake+0x16>
        Error_Handler();
 8001628:	f002 faae 	bl	8003b88 <Error_Handler>
#endif

    GPIO_Write(motor->pins.brake, state);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	4611      	mov	r1, r2
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff2a 	bl	800148e <GPIO_Write>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <is_valid_hall_state>:
}



bool is_valid_hall_state(const uint8_t state)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
	switch(state)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	3b01      	subs	r3, #1
 8001650:	2b05      	cmp	r3, #5
 8001652:	d801      	bhi.n	8001658 <is_valid_hall_state+0x16>
	case HALL_STATE_2:
	case HALL_STATE_3:
	case HALL_STATE_4:
	case HALL_STATE_5:
	case HALL_STATE_6:
		return true;
 8001654:	2301      	movs	r3, #1
 8001656:	e000      	b.n	800165a <is_valid_hall_state+0x18>
	default:
		return false;
 8001658:	2300      	movs	r3, #0
	}
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <Init_Motor_Pins>:
                     const uint8_t dac_channel, const uint16_t default_dac, 
                     GPIO_TypeDef* U_Type, const uint16_t U_Pin, 
                     GPIO_TypeDef* V_Type, const uint16_t V_Pin, 
                     GPIO_TypeDef* W_Type, const uint16_t W_Pin,
                     GPIO_Pin* direction, GPIO_Pin* brake, GPIO_Pin* enable)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	72fb      	strb	r3, [r7, #11]
 8001674:	4613      	mov	r3, r2
 8001676:	813b      	strh	r3, [r7, #8]
#if DEBUG_MODE
    if(motor == NULL || direction == NULL || brake == NULL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <Init_Motor_Pins+0x24>
 800167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <Init_Motor_Pins+0x24>
 8001684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <Init_Motor_Pins+0x28>
        Error_Handler();
 800168a:	f002 fa7d 	bl	8003b88 <Error_Handler>
#endif

    Reset_Motor(motor);
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f7ff ff9e 	bl	80015d0 <Reset_Motor>

    DAC_Init(&motor->pins.dac, dac_channel, default_dac);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	893a      	ldrh	r2, [r7, #8]
 8001698:	7af9      	ldrb	r1, [r7, #11]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff7f 	bl	800159e <DAC_Init>

    GPIO_Input_Init(&motor->pins.pin_u, U_Type, U_Pin);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3304      	adds	r3, #4
 80016a4:	8b3a      	ldrh	r2, [r7, #24]
 80016a6:	6879      	ldr	r1, [r7, #4]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff3d 	bl	8001528 <GPIO_Input_Init>
    GPIO_Input_Init(&motor->pins.pin_v, V_Type, V_Pin);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	330c      	adds	r3, #12
 80016b2:	8c3a      	ldrh	r2, [r7, #32]
 80016b4:	69f9      	ldr	r1, [r7, #28]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff36 	bl	8001528 <GPIO_Input_Init>
    GPIO_Input_Init(&motor->pins.pin_w, W_Type, W_Pin);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3314      	adds	r3, #20
 80016c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff2f 	bl	8001528 <GPIO_Input_Init>

    //PWM_Init(&motor->pins.pwm, tim, channel);

    motor->pins.direction = direction;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ce:	61da      	str	r2, [r3, #28]
    motor->pins.brake = brake;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016d4:	621a      	str	r2, [r3, #32]
    motor->state.state  = (uint8_t)((motor->pins.pin_w.state << 2) | (motor->pins.pin_v.state << 1) | motor->pins.pin_u.state );
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	7e9b      	ldrb	r3, [r3, #26]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	b25a      	sxtb	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	7c9b      	ldrb	r3, [r3, #18]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	7a9b      	ldrb	r3, [r3, #10]
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2

    if(!is_valid_hall_state(motor->state.state))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff ff9d 	bl	8001642 <is_valid_hall_state>
 8001708:	4603      	mov	r3, r0
 800170a:	f083 0301 	eor.w	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <Init_Motor_Pins+0xb2>
    	Error_Handler();
 8001714:	f002 fa38 	bl	8003b88 <Error_Handler>
}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Init_Motor_Pid_Position>:

void Init_Motor_Pid_Position(Motor* motor, const PID_Parameters* parameters)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(parameters == NULL)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d101      	bne.n	8001734 <Init_Motor_Pid_Position+0x14>
        Error_Handler();
 8001730:	f002 fa2a 	bl	8003b88 <Error_Handler>
#endif

    memcpy(&motor->pid_position, parameters, sizeof(PID_Parameters));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3390      	adds	r3, #144	; 0x90
 8001738:	2218      	movs	r2, #24
 800173a:	6839      	ldr	r1, [r7, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f007 f8f5 	bl	800892c <memcpy>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <Init_Motor_Pid_Velocity>:

void Init_Motor_Pid_Velocity(Motor* motor, const PID_Parameters* parameters)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(parameters == NULL)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <Init_Motor_Pid_Velocity+0x14>
        Error_Handler();
 800175a:	f002 fa15 	bl	8003b88 <Error_Handler>
#endif

    memcpy(&motor->pid_velocity, parameters, sizeof(PID_Parameters));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	33a8      	adds	r3, #168	; 0xa8
 8001762:	2218      	movs	r2, #24
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f007 f8e0 	bl	800892c <memcpy>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <Get_Hall_State>:

uint8_t Get_Hall_State(Motor* motor)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(motor == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <Get_Hall_State+0x12>
        Error_Handler();
 8001782:	f002 fa01 	bl	8003b88 <Error_Handler>
#endif

    const uint8_t state = (uint8_t)((GPIO_Read(&motor->pins.pin_w) << 2) | (GPIO_Read(&motor->pins.pin_v) << 1) | GPIO_Read(&motor->pins.pin_u));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3314      	adds	r3, #20
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fe60 	bl	8001450 <GPIO_Read>
 8001790:	4603      	mov	r3, r0
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	b25c      	sxtb	r4, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	330c      	adds	r3, #12
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fe58 	bl	8001450 <GPIO_Read>
 80017a0:	4603      	mov	r3, r0
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4323      	orrs	r3, r4
 80017a8:	b25c      	sxtb	r4, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	3304      	adds	r3, #4
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fe4e 	bl	8001450 <GPIO_Read>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	4323      	orrs	r3, r4
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	73fb      	strb	r3, [r7, #15]
    return state;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd90      	pop	{r4, r7, pc}

080017c8 <Set_Motor_Direction>:


void Set_Motor_Direction(Motor* motor, const GPIO_PinState state)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
#if DEBUG_MODE
    if(motor == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <Set_Motor_Direction+0x16>
        Error_Handler();
 80017da:	f002 f9d5 	bl	8003b88 <Error_Handler>
#endif

    GPIO_Write(motor->pins.direction, state);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	78fa      	ldrb	r2, [r7, #3]
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fe51 	bl	800148e <GPIO_Write>
}
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <Calculate_Motor_Position>:
    relative->relative = motor;
    relative->is_child = !is_child;
}

void Calculate_Motor_Position(Motor* motor)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(motor == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <Calculate_Motor_Position+0x12>
        Error_Handler();
 8001802:	f002 f9c1 	bl	8003b88 <Error_Handler>
#endif
    motor->data.revolutions = (float)motor->state.steps * HALL_STEP_CONSTANT * GEARBOX_RATIO;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001814:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80018cc <Calculate_Motor_Position+0xd8>
 8001818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80018d0 <Calculate_Motor_Position+0xdc>
 8001820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
    motor->data.position = (motor->data.revolutions * WHEEL_CIRCUMFERENCE) + motor->data.updated_position;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001830:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018d4 <Calculate_Motor_Position+0xe0>
 8001834:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74


    // Not super safe, each of these variables are single cycle but could be read at different times
    const bool step_buffer_filled = motor->data.step_buffer_filled;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800184e:	77fb      	strb	r3, [r7, #31]
    const uint8_t rpm_index = motor->data.rpm_index;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001856:	77bb      	strb	r3, [r7, #30]
    const float avg_step_sum = motor->data.avg_step_sum;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800185c:	61bb      	str	r3, [r7, #24]


    if(rpm_index != 0 || step_buffer_filled)
 800185e:	7fbb      	ldrb	r3, [r7, #30]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d102      	bne.n	800186a <Calculate_Motor_Position+0x76>
 8001864:	7ffb      	ldrb	r3, [r7, #31]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d026      	beq.n	80018b8 <Calculate_Motor_Position+0xc4>
    {
        const float denom = step_buffer_filled ? 16.0f : rpm_index; 
 800186a:	7ffb      	ldrb	r3, [r7, #31]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d002      	beq.n	8001876 <Calculate_Motor_Position+0x82>
 8001870:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8001874:	e004      	b.n	8001880 <Calculate_Motor_Position+0x8c>
 8001876:	7fbb      	ldrb	r3, [r7, #30]
 8001878:	ee07 3a90 	vmov	s15, r3
 800187c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001880:	edc7 7a05 	vstr	s15, [r7, #20]
        const float avg_step = avg_step_sum / denom;                // compute the average step time in seconds
 8001884:	edd7 6a06 	vldr	s13, [r7, #24]
 8001888:	ed97 7a05 	vldr	s14, [r7, #20]
 800188c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001890:	edc7 7a04 	vstr	s15, [r7, #16]
        const float steps_per_min = 60.0 / avg_step;                // compute the number of steps per minute
 8001894:	eddf 6a10 	vldr	s13, [pc, #64]	; 80018d8 <Calculate_Motor_Position+0xe4>
 8001898:	ed97 7a04 	vldr	s14, [r7, #16]
 800189c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a0:	edc7 7a03 	vstr	s15, [r7, #12]
        motor->data.velocity = steps_per_min * HALL_STEP_CONSTANT;  // convert hall signal steps to RPMs
 80018a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80018cc <Calculate_Motor_Position+0xd8>
 80018a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
    {
 80018b6:	e004      	b.n	80018c2 <Calculate_Motor_Position+0xce>
    }
    else
        motor->data.velocity = 0; // undetectable so far
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	67da      	str	r2, [r3, #124]	; 0x7c

    //     //     motor->data.last_time = now;
    //     //     motor->data.last_steps = motor->state.steps;
    //     // }
    // }
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	3d638e39 	.word	0x3d638e39
 80018d0:	3d088889 	.word	0x3d088889
 80018d4:	3fb7d9f5 	.word	0x3fb7d9f5
 80018d8:	42700000 	.word	0x42700000

080018dc <Calculate_Motor_Alignment>:


void Calculate_Motor_Alignment(Motor* motor)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(motor == NULL || motor->relative == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <Calculate_Motor_Alignment+0x18>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <Calculate_Motor_Alignment+0x1c>
        Error_Handler();
 80018f4:	f002 f948 	bl	8003b88 <Error_Handler>
#endif
    const float difference = motor->data.position - motor->relative->data.position;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001904:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190c:	edc7 7a03 	vstr	s15, [r7, #12]
    motor->data.alignment = ABS(difference);
 8001910:	edd7 7a03 	vldr	s15, [r7, #12]
 8001914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d504      	bpl.n	8001928 <Calculate_Motor_Alignment+0x4c>
 800191e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001922:	eef1 7a67 	vneg.f32	s15, s15
 8001926:	e001      	b.n	800192c <Calculate_Motor_Alignment+0x50>
 8001928:	edd7 7a03 	vldr	s15, [r7, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <Update_Motor_Period_Elapsed>:
    motor->data.updated_position = updated_position;
}


void Update_Motor_Period_Elapsed(Motor* motor, TIM_HandleTypeDef* tim)
{
 800193c:	b5b0      	push	{r4, r5, r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
#if DEBUG_MODE
    if(motor == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <Update_Motor_Period_Elapsed+0x14>
        Error_Handler();
 800194c:	f002 f91c 	bl	8003b88 <Error_Handler>
#endif
    if(!is_valid_hall_state(motor->state.state))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fe73 	bl	8001642 <is_valid_hall_state>
 800195c:	4603      	mov	r3, r0
 800195e:	f083 0301 	eor.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <Update_Motor_Period_Elapsed+0x30>
        Error_Handler();
 8001968:	f002 f90e 	bl	8003b88 <Error_Handler>
    
    const uint8_t next_hall_state = Get_Hall_State(motor);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff01 	bl	8001774 <Get_Hall_State>
 8001972:	4603      	mov	r3, r0
 8001974:	73fb      	strb	r3, [r7, #15]

    if(next_hall_state != motor->state.state)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	429a      	cmp	r2, r3
 8001980:	f000 81e9 	beq.w	8001d56 <Update_Motor_Period_Elapsed+0x41a>
    {

        if(motor->data.last_time == 0)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <Update_Motor_Period_Elapsed+0x60>
        {
            motor->data.last_time = Get_Micros();
 800198e:	f7ff fd51 	bl	8001434 <Get_Micros>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800199a:	e077      	b.n	8001a8c <Update_Motor_Period_Elapsed+0x150>
        }
        else
        {
            const uint32_t now = Get_Micros();
 800199c:	f7ff fd4a 	bl	8001434 <Get_Micros>
 80019a0:	60b8      	str	r0, [r7, #8]

            motor->data.step_time[motor->data.rpm_index] = (1.0 / (double)SystemCoreClock) * (double)(now - motor->data.last_time);
 80019a2:	4bbb      	ldr	r3, [pc, #748]	; (8001c90 <Update_Motor_Period_Elapsed+0x354>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd70 	bl	800048c <__aeabi_ui2d>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	f04f 0000 	mov.w	r0, #0
 80019b4:	49b7      	ldr	r1, [pc, #732]	; (8001c94 <Update_Motor_Period_Elapsed+0x358>)
 80019b6:	f7fe ff0d 	bl	80007d4 <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4614      	mov	r4, r2
 80019c0:	461d      	mov	r5, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c8:	68ba      	ldr	r2, [r7, #8]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fd5d 	bl	800048c <__aeabi_ui2d>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7fe fdd1 	bl	8000580 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461c      	mov	r4, r3
 80019f0:	f7ff f860 	bl	8000ab4 <__aeabi_d2f>
 80019f4:	4601      	mov	r1, r0
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	f104 030a 	add.w	r3, r4, #10
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	6019      	str	r1, [r3, #0]
            motor->data.avg_step_sum += motor->data.step_time[motor->data.rpm_index];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	330a      	adds	r3, #10
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	ed93 7a00 	vldr	s14, [r3]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
            motor->data.last_time = now;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68ba      	ldr	r2, [r7, #8]
 8001a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            motor->data.rpm_index++;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if(motor->data.rpm_index == 16)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b10      	cmp	r3, #16
 8001a4a:	d107      	bne.n	8001a5c <Update_Motor_Period_Elapsed+0x120>
            {
                motor->data.step_buffer_filled = true;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
                motor->data.rpm_index = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            }
            if(motor->data.step_buffer_filled)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d011      	beq.n	8001a8c <Update_Motor_Period_Elapsed+0x150>
            {
                motor->data.avg_step_sum -= motor->data.step_time[motor->data.rpm_index]; // remove value from the accumlator
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	330a      	adds	r3, #10
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
            }
        }

        switch(next_hall_state)
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	2b05      	cmp	r3, #5
 8001a92:	f200 8158 	bhi.w	8001d46 <Update_Motor_Period_Elapsed+0x40a>
 8001a96:	a201      	add	r2, pc, #4	; (adr r2, 8001a9c <Update_Motor_Period_Elapsed+0x160>)
 8001a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9c:	08001ab5 	.word	0x08001ab5
 8001aa0:	08001b21 	.word	0x08001b21
 8001aa4:	08001b8d 	.word	0x08001b8d
 8001aa8:	08001bf9 	.word	0x08001bf9
 8001aac:	08001c65 	.word	0x08001c65
 8001ab0:	08001cdb 	.word	0x08001cdb
        {
        case HALL_STATE_1:
            if(motor->state.state == HALL_STATE_5)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d10f      	bne.n	8001ade <Update_Motor_Period_Elapsed+0x1a2>
            {
                motor->state.steps++;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	7bfa      	ldrb	r2, [r7, #15]
 8001ad0:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_POSITIVE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            else
            {
                motor->state.errors++;
                motor->state.state = next_hall_state;
            }
            break;
 8001adc:	e13b      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
            else if(motor->state.state == HALL_STATE_3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d10f      	bne.n	8001b08 <Update_Motor_Period_Elapsed+0x1cc>
                motor->state.steps++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_NEGATIVE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	22ff      	movs	r2, #255	; 0xff
 8001b02:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            break;
 8001b06:	e126      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
                motor->state.errors++;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b0e:	1c5a      	adds	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                motor->state.state = next_hall_state;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            break;
 8001b1e:	e11a      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
        case HALL_STATE_2:
            if(motor->state.state == HALL_STATE_3) // positive
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d10f      	bne.n	8001b4a <Update_Motor_Period_Elapsed+0x20e>
			{
				motor->state.steps++;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_POSITIVE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			else
			{
				motor->state.errors++;
                motor->state.state = next_hall_state;
			}
            break;
 8001b48:	e105      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
			else if(motor->state.state == HALL_STATE_6) // negative
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001b50:	2b06      	cmp	r3, #6
 8001b52:	d10f      	bne.n	8001b74 <Update_Motor_Period_Elapsed+0x238>
				motor->state.steps++;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_NEGATIVE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	22ff      	movs	r2, #255	; 0xff
 8001b6e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            break;
 8001b72:	e0f0      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
				motor->state.errors++;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                motor->state.state = next_hall_state;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            break;
 8001b8a:	e0e4      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
        case HALL_STATE_3:
            if(motor->state.state == HALL_STATE_1) // positive
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d10f      	bne.n	8001bb6 <Update_Motor_Period_Elapsed+0x27a>
			{
				motor->state.steps++;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_POSITIVE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			else
			{
				motor->state.errors++;
                motor->state.state = next_hall_state;
			}
            break;
 8001bb4:	e0cf      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
			else if(motor->state.state == HALL_STATE_2) // negative
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d10f      	bne.n	8001be0 <Update_Motor_Period_Elapsed+0x2a4>
				motor->state.steps++;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_NEGATIVE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	22ff      	movs	r2, #255	; 0xff
 8001bda:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            break;
 8001bde:	e0ba      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
				motor->state.errors++;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                motor->state.state = next_hall_state;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            break;
 8001bf6:	e0ae      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
        case HALL_STATE_4:
            if(motor->state.state == HALL_STATE_6) // positive
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d10f      	bne.n	8001c22 <Update_Motor_Period_Elapsed+0x2e6>
			{
				motor->state.steps++;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_POSITIVE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			else
			{
				motor->state.errors++;
                motor->state.state = next_hall_state;
			}
            break;
 8001c20:	e099      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
			else if(motor->state.state == HALL_STATE_5) // negative
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001c28:	2b05      	cmp	r3, #5
 8001c2a:	d10f      	bne.n	8001c4c <Update_Motor_Period_Elapsed+0x310>
				motor->state.steps++;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_NEGATIVE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	22ff      	movs	r2, #255	; 0xff
 8001c46:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            break;
 8001c4a:	e084      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
				motor->state.errors++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                motor->state.state = next_hall_state;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            break;
 8001c62:	e078      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
        case HALL_STATE_5:
            if(motor->state.state == HALL_STATE_4) // positive
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d114      	bne.n	8001c98 <Update_Motor_Period_Elapsed+0x35c>
			{
				motor->state.steps++;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_POSITIVE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			else
			{
				motor->state.errors++;
                motor->state.state = next_hall_state;
			}
            break;
 8001c8c:	e063      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
 8001c8e:	bf00      	nop
 8001c90:	20000080 	.word	0x20000080
 8001c94:	3ff00000 	.word	0x3ff00000
			else if(motor->state.state == HALL_STATE_1) // negative
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10f      	bne.n	8001cc2 <Update_Motor_Period_Elapsed+0x386>
				motor->state.steps++;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_NEGATIVE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	22ff      	movs	r2, #255	; 0xff
 8001cbc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            break;
 8001cc0:	e049      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
				motor->state.errors++;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                motor->state.state = next_hall_state;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            break;
 8001cd8:	e03d      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
        case HALL_STATE_6:
            if(motor->state.state == HALL_STATE_2) // positive
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d10f      	bne.n	8001d04 <Update_Motor_Period_Elapsed+0x3c8>
			{
				motor->state.steps++;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_POSITIVE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
			else
			{
				motor->state.errors++;
                motor->state.state = next_hall_state;
			}
            break;
 8001d02:	e028      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
			else if(motor->state.state == HALL_STATE_4) // negative
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d10f      	bne.n	8001d2e <Update_Motor_Period_Elapsed+0x3f2>
				motor->state.steps++;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
                motor->state.state = next_hall_state;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
                motor->state.direction = MOTOR_DIR_NEGATIVE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
            break;
 8001d2c:	e013      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
				motor->state.errors++;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                motor->state.state = next_hall_state;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
            break;
 8001d44:	e007      	b.n	8001d56 <Update_Motor_Period_Elapsed+0x41a>
        default:
            motor->state.errors++;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
            break;
 8001d54:	bf00      	nop
        }
    }
    
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5e:	bf00      	nop

08001d60 <clamp_pid>:



int8_t clamp_pid(float* value, const float min, const float max)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d6c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(*value < min)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ed97 7a02 	vldr	s14, [r7, #8]
 8001d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d82:	dd05      	ble.n	8001d90 <clamp_pid+0x30>
	{
		*value = min;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	601a      	str	r2, [r3, #0]
		return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8e:	e00f      	b.n	8001db0 <clamp_pid+0x50>
	}
	if(*value > max)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d504      	bpl.n	8001dae <clamp_pid+0x4e>
	{
		*value = max;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	601a      	str	r2, [r3, #0]
		return 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <clamp_pid+0x50>
	}
	return 0;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <Update_Motor_DAC_PID_Position>:

uint16_t max_value = 0;
uint32_t passes = 0;

void Update_Motor_DAC_PID_Position(Motor* motor)
{
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(motor == NULL || motor->relative == NULL || (!motor->is_child && !motor->relative->is_child))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d016      	beq.n	8001df8 <Update_Motor_DAC_PID_Position+0x3c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d011      	beq.n	8001df8 <Update_Motor_DAC_PID_Position+0x3c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <Update_Motor_DAC_PID_Position+0x40>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001dea:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001dee:	f083 0301 	eor.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <Update_Motor_DAC_PID_Position+0x40>
        Error_Handler();
 8001df8:	f001 fec6 	bl	8003b88 <Error_Handler>
#endif
    float output, error;
    const float position = motor->data.position;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e00:	61bb      	str	r3, [r7, #24]
    const float relative_position = motor->relative->data.position;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0a:	617b      	str	r3, [r7, #20]

    const uint32_t now = Get_Micros();
 8001e0c:	f7ff fb12 	bl	8001434 <Get_Micros>
 8001e10:	6138      	str	r0, [r7, #16]
    motor->state.delta_t = (1.0 / (double)SystemCoreClock) * (double)(now - motor->state.last_time_pid); 
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <Update_Motor_DAC_PID_Position+0x2b4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fb38 	bl	800048c <__aeabi_ui2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	4993      	ldr	r1, [pc, #588]	; (8002074 <Update_Motor_DAC_PID_Position+0x2b8>)
 8001e26:	f7fe fcd5 	bl	80007d4 <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4614      	mov	r4, r2
 8001e30:	461d      	mov	r5, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb25 	bl	800048c <__aeabi_ui2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fb99 	bl	8000580 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe2d 	bl	8000ab4 <__aeabi_d2f>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    motor->state.last_time_pid = now;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   
    if(motor->state.delta_t <= 0 ||  motor->state.delta_t > 0.5f)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d909      	bls.n	8001e8e <Update_Motor_DAC_PID_Position+0xd2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001e80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	dd03      	ble.n	8001e96 <Update_Motor_DAC_PID_Position+0xda>
        motor->state.delta_t = 1e-3f;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a79      	ldr	r2, [pc, #484]	; (8002078 <Update_Motor_DAC_PID_Position+0x2bc>)
 8001e92:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

    // Cross-Coupling Method
    if(motor->is_child)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <Update_Motor_DAC_PID_Position+0x104>
        error = motor->data.target + relative_position - (2.0f * position);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001ea6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eae:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eba:	edc7 7a07 	vstr	s15, [r7, #28]
 8001ebe:	e00e      	b.n	8001ede <Update_Motor_DAC_PID_Position+0x122>
    else
        error = motor->data.target - (2.0f * position) + relative_position;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001ec6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ece:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eda:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate the proportional
    motor->state.e_proportional = motor->pid_position.kp * error;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8001ee4:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8

    // Calculate the integral
    bool freeze_integral = (motor->state.is_saturated && motor->state.is_saturated * error > 0);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f993 30e1 	ldrsb.w	r3, [r3, #225]	; 0xe1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d011      	beq.n	8001f20 <Update_Motor_DAC_PID_Position+0x164>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f993 30e1 	ldrsb.w	r3, [r3, #225]	; 0xe1
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	dd01      	ble.n	8001f20 <Update_Motor_DAC_PID_Position+0x164>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <Update_Motor_DAC_PID_Position+0x166>
 8001f20:	2300      	movs	r3, #0
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]

    if(!freeze_integral) // prevent integral wind up
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <Update_Motor_DAC_PID_Position+0x1a4>
    	motor->state.e_integral += motor->pid_position.ki * error * motor->state.delta_t;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8001f44:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8001f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

    clamp_pid(&motor->state.e_integral, motor->pid_position.min, motor->pid_position.max);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001f72:	eef0 0a47 	vmov.f32	s1, s14
 8001f76:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	f7ff fef0 	bl	8001d60 <clamp_pid>

    // Calculate the derivative
    if(isnan(motor->state.e_prev)) // first run
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8001f86:	eef4 7a67 	vcmp.f32	s15, s15
 8001f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8e:	d703      	bvc.n	8001f98 <Update_Motor_DAC_PID_Position+0x1dc>
        motor->state.e_prev = error;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69fa      	ldr	r2, [r7, #28]
 8001f94:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    
    motor->state.e_derivative = motor->pid_position.kd * ((error - motor->state.e_prev) / motor->state.delta_t);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8001fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fa8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	edd3 6a30 	vldr	s13, [r3, #192]	; 0xc0
 8001fb2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

    output = motor->state.e_proportional + motor->state.e_integral + motor->state.e_derivative;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8001fcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8001fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fda:	edc7 7a02 	vstr	s15, [r7, #8]

    motor->state.is_saturated = clamp_pid(&output, motor->pid_position.min, motor->pid_position.max);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	eef0 0a47 	vmov.f32	s1, s14
 8001ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff feb2 	bl	8001d60 <clamp_pid>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

    motor->state.e_prev = error;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    motor->pins.dac.dac_value = (uint16_t)(output * 0.01f * (4095 - motor->pid_position.dac_default)) + motor->pid_position.dac_default;
 800200e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002012:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800207c <Update_Motor_DAC_PID_Position+0x2c0>
 8002016:	ee27 7a87 	vmul.f32	s14, s15, s14
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002020:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002024:	330f      	adds	r3, #15
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002036:	ee17 3a90 	vmov	r3, s15
 800203a:	b29a      	uxth	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002042:	4413      	add	r3, r2
 8002044:	b29a      	uxth	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	805a      	strh	r2, [r3, #2]

    if(motor->pins.dac.dac_value > max_value)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	885a      	ldrh	r2, [r3, #2]
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <Update_Motor_DAC_PID_Position+0x2c4>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d903      	bls.n	800205e <Update_Motor_DAC_PID_Position+0x2a2>
    	max_value = motor->pins.dac.dac_value;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	885a      	ldrh	r2, [r3, #2]
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <Update_Motor_DAC_PID_Position+0x2c4>)
 800205c:	801a      	strh	r2, [r3, #0]

    passes++;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <Update_Motor_DAC_PID_Position+0x2c8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <Update_Motor_DAC_PID_Position+0x2c8>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}
 8002070:	20000080 	.word	0x20000080
 8002074:	3ff00000 	.word	0x3ff00000
 8002078:	3a83126f 	.word	0x3a83126f
 800207c:	3c23d70a 	.word	0x3c23d70a
 8002080:	200000ac 	.word	0x200000ac
 8002084:	200000b0 	.word	0x200000b0

08002088 <Update_Motor_DAC_PID_Velocity>:


#define _constrain(amt,low,high) ((amt)<(low)?(low):((amt)>(high)?(high):(amt)))

void Update_Motor_DAC_PID_Velocity(Motor* motor)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE
    if(motor == NULL || motor->relative == NULL || (!motor->is_child && !motor->relative->is_child))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d016      	beq.n	80020c4 <Update_Motor_DAC_PID_Velocity+0x3c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d011      	beq.n	80020c4 <Update_Motor_DAC_PID_Velocity+0x3c>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <Update_Motor_DAC_PID_Velocity+0x40>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020b6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <Update_Motor_DAC_PID_Velocity+0x40>
        Error_Handler();
 80020c4:	f001 fd60 	bl	8003b88 <Error_Handler>
#endif
    const uint32_t now = Get_Micros();
 80020c8:	f7ff f9b4 	bl	8001434 <Get_Micros>
 80020cc:	61b8      	str	r0, [r7, #24]

    float output, error;
    float velocity = motor->data.velocity;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020d2:	617b      	str	r3, [r7, #20]
    float relative_velocity = motor->relative->data.velocity;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80020da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020dc:	613b      	str	r3, [r7, #16]

    motor->state.delta_t = (1.0 / (double)SystemCoreClock) * (double)(now - motor->state.last_time_pid); 
 80020de:	4b8b      	ldr	r3, [pc, #556]	; (800230c <Update_Motor_DAC_PID_Velocity+0x284>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f9d2 	bl	800048c <__aeabi_ui2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	f04f 0000 	mov.w	r0, #0
 80020f0:	4987      	ldr	r1, [pc, #540]	; (8002310 <Update_Motor_DAC_PID_Velocity+0x288>)
 80020f2:	f7fe fb6f 	bl	80007d4 <__aeabi_ddiv>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4614      	mov	r4, r2
 80020fc:	461d      	mov	r5, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f9bf 	bl	800048c <__aeabi_ui2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe fa33 	bl	8000580 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fcc7 	bl	8000ab4 <__aeabi_d2f>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    motor->state.last_time_pid = now;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
   
    if(motor->state.delta_t <= 0 ||  motor->state.delta_t > 0.5f)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800213c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	d909      	bls.n	800215a <Update_Motor_DAC_PID_Velocity+0xd2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 800214c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	dd03      	ble.n	8002162 <Update_Motor_DAC_PID_Velocity+0xda>
        motor->state.delta_t = 1e-3f;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a6d      	ldr	r2, [pc, #436]	; (8002314 <Update_Motor_DAC_PID_Velocity+0x28c>)
 800215e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0


    if(motor->is_child)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d022      	beq.n	80021b2 <Update_Motor_DAC_PID_Velocity+0x12a>
        error = motor->data.target + velocity - (2.0 * velocity);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8002172:	edd7 7a05 	vldr	s15, [r7, #20]
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	ee17 0a90 	vmov	r0, s15
 800217e:	f7fe f9a7 	bl	80004d0 <__aeabi_f2d>
 8002182:	4604      	mov	r4, r0
 8002184:	460d      	mov	r5, r1
 8002186:	6978      	ldr	r0, [r7, #20]
 8002188:	f7fe f9a2 	bl	80004d0 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	f7fe f840 	bl	8000214 <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4620      	mov	r0, r4
 800219a:	4629      	mov	r1, r5
 800219c:	f7fe f838 	bl	8000210 <__aeabi_dsub>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fc84 	bl	8000ab4 <__aeabi_d2f>
 80021ac:	4603      	mov	r3, r0
 80021ae:	61fb      	str	r3, [r7, #28]
 80021b0:	e028      	b.n	8002204 <Update_Motor_DAC_PID_Velocity+0x17c>
    else
        error = motor->data.target - (2.0 * velocity) + relative_velocity;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f98a 	bl	80004d0 <__aeabi_f2d>
 80021bc:	4604      	mov	r4, r0
 80021be:	460d      	mov	r5, r1
 80021c0:	6978      	ldr	r0, [r7, #20]
 80021c2:	f7fe f985 	bl	80004d0 <__aeabi_f2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	f7fe f823 	bl	8000214 <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe f81b 	bl	8000210 <__aeabi_dsub>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4614      	mov	r4, r2
 80021e0:	461d      	mov	r5, r3
 80021e2:	6938      	ldr	r0, [r7, #16]
 80021e4:	f7fe f974 	bl	80004d0 <__aeabi_f2d>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f810 	bl	8000214 <__adddf3>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4610      	mov	r0, r2
 80021fa:	4619      	mov	r1, r3
 80021fc:	f7fe fc5a 	bl	8000ab4 <__aeabi_d2f>
 8002200:	4603      	mov	r3, r0
 8002202:	61fb      	str	r3, [r7, #28]


    motor->state.e_proportional = motor->pid_velocity.kp * error;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800220a:	edd7 7a07 	vldr	s15, [r7, #28]
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8


    if(motor->state.is_saturated != 1) // prevent integral wind up
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f993 30e1 	ldrsb.w	r3, [r3, #225]	; 0xe1
 800221e:	2b01      	cmp	r3, #1
 8002220:	d01c      	beq.n	800225c <Update_Motor_DAC_PID_Velocity+0x1d4>
    	motor->state.e_integral = motor->state.e_integral + motor->pid_velocity.ki * motor->state.delta_t * 0.5f *(error + motor->state.e_prev);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 6a2b 	vldr	s13, [r3, #172]	; 0xac
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8002234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002238:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800223c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	ed93 6a34 	vldr	s12, [r3, #208]	; 0xd0
 8002246:	edd7 7a07 	vldr	s15, [r7, #28]
 800224a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800224e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

    clamp_pid(&motor->state.e_integral, motor->pid_velocity.min, motor->pid_velocity.max);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800226e:	eef0 0a47 	vmov.f32	s1, s14
 8002272:	eeb0 0a67 	vmov.f32	s0, s15
 8002276:	4610      	mov	r0, r2
 8002278:	f7ff fd72 	bl	8001d60 <clamp_pid>

    motor->state.e_derivative = motor->pid_velocity.kd * (error - motor->state.e_prev) / motor->state.delta_t;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8002288:	edd7 6a07 	vldr	s13, [r7, #28]
 800228c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002290:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 800229a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	edc3 7a33 	vstr	s15, [r3, #204]	; 0xcc

    output = motor->state.e_proportional + motor->state.e_integral + motor->state.e_derivative;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 80022b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	edc7 7a03 	vstr	s15, [r7, #12]

    motor->state.is_saturated = clamp_pid(&output, motor->pid_velocity.min, motor->pid_velocity.max);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	eef0 0a47 	vmov.f32	s1, s14
 80022d6:	eeb0 0a67 	vmov.f32	s0, s15
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fd40 	bl	8001d60 <clamp_pid>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1

    motor->state.e_prev = error;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

    motor->pins.dac.dac_value = (uint16_t)output;
 80022f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022fa:	ee17 3a90 	vmov	r3, s15
 80022fe:	b29a      	uxth	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	805a      	strh	r2, [r3, #2]
}
 8002304:	bf00      	nop
 8002306:	3720      	adds	r7, #32
 8002308:	46bd      	mov	sp, r7
 800230a:	bdb0      	pop	{r4, r5, r7, pc}
 800230c:	20000080 	.word	0x20000080
 8002310:	3ff00000 	.word	0x3ff00000
 8002314:	3a83126f 	.word	0x3a83126f

08002318 <Is_Valid_Motor_Command>:

    return offset;
}

bool Is_Valid_Motor_Command(const uint8_t byte)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	71fb      	strb	r3, [r7, #7]
    switch(byte)
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	3b01      	subs	r3, #1
 8002326:	2b04      	cmp	r3, #4
 8002328:	d801      	bhi.n	800232e <Is_Valid_Motor_Command+0x16>
        case FORWARD_POSITION_COMMAND:
        case BACKWARDS_POSITION_COMMAND:
        case LEFT_TURN_COMMAND:
        case RIGHT_TURN_COMMAND:
        case STOP_COMMAND:
            return true;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <Is_Valid_Motor_Command+0x18>
        default:
            return false;
 800232e:	2300      	movs	r3, #0
    }
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <Is_Valid_Value>:
}



bool Is_Valid_Value(const uint8_t byte)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
    switch(byte)
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	3b19      	subs	r3, #25
 800234a:	2b15      	cmp	r3, #21
 800234c:	d801      	bhi.n	8002352 <Is_Valid_Value+0x16>
        case PID_MIN4:
        case PID_MAX4:

        case TARGET_POSITON:
        case TARGET_VELOCITY:
            return true;
 800234e:	2301      	movs	r3, #1
 8002350:	e000      	b.n	8002354 <Is_Valid_Value+0x18>
        default:
            return false;
 8002352:	2300      	movs	r3, #0
    }
}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <Set_Motor_Command>:
    }
}


void Set_Motor_Command(Motor* motor, Motor* relative, const bool is_child, const float target)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	ed87 0a00 	vstr	s0, [r7]
 8002370:	71fb      	strb	r3, [r7, #7]
#if DEBUG_MODE
    if(motor == NULL || relative == NULL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <Set_Motor_Command+0x1e>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <Set_Motor_Command+0x22>
        Error_Handler();
 800237e:	f001 fc03 	bl	8003b88 <Error_Handler>
#endif

    Reset_Motor(motor);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff f924 	bl	80015d0 <Reset_Motor>
    motor->state.last_time_pid = Get_Micros();
 8002388:	f7ff f854 	bl	8001434 <Get_Micros>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    motor->state.e_prev = NAN;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <Set_Motor_Command+0x5c>)
 8002398:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    motor->relative = relative;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    motor->is_child = is_child;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	79fa      	ldrb	r2, [r7, #7]
 80023a8:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    motor->data.target = target;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	7fc00000 	.word	0x7fc00000

080023c0 <Init_Motor_Timer>:




void Init_Motor_Timer()
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <Init_Motor_Timer+0x48>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <Init_Motor_Timer+0x48>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6413      	str	r3, [r2, #64]	; 0x40
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <Init_Motor_Timer+0x48>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
    TIM2->PSC = HAL_RCC_GetPCLK1Freq() / 1000000 - 1;
 80023e2:	f004 fe47 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a08      	ldr	r2, [pc, #32]	; (800240c <Init_Motor_Timer+0x4c>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0c9b      	lsrs	r3, r3, #18
 80023f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023f4:	3b01      	subs	r3, #1
 80023f6:	6293      	str	r3, [r2, #40]	; 0x28
    TIM2->CR1 = TIM_CR1_CEN;
 80023f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	431bde83 	.word	0x431bde83

08002410 <Set_I2C_Handle>:
		Error_Handler();
}


void Set_I2C_Handle(Motor_Handle* handle, I2C_HandleTypeDef* i2c_handle)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
	handle->i2c_handle = i2c_handle;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	f8c3 23b0 	str.w	r2, [r3, #944]	; 0x3b0
	//MCP4728_Init(i2c_handle);
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <Update_Multi_DAC>:
}



void Update_Multi_DAC(Motor_Handle* handle, const uint8_t* indices, const uint8_t size)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b088      	sub	sp, #32
 8002432:	af02      	add	r7, sp, #8
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	4613      	mov	r3, r2
 800243a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[3];
    for(uint8_t i = 0; i < size; i++)
 800243c:	2300      	movs	r3, #0
 800243e:	75fb      	strb	r3, [r7, #23]
 8002440:	e047      	b.n	80024d2 <Update_Multi_DAC+0xa4>
    {
        uint8_t sequential_write_cmd = MCP4728_CMD_DACWRITE_MULTI;
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	75bb      	strb	r3, [r7, #22]
        sequential_write_cmd |= (handle->motors[indices[i]].pins.dac.channel << 1);
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4413      	add	r3, r2
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	23ec      	movs	r3, #236	; 0xec
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	b25a      	sxtb	r2, r3
 8002460:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002464:	4313      	orrs	r3, r2
 8002466:	b25b      	sxtb	r3, r3
 8002468:	75bb      	strb	r3, [r7, #22]

        buf[0] = sequential_write_cmd;
 800246a:	7dbb      	ldrb	r3, [r7, #22]
 800246c:	743b      	strb	r3, [r7, #16]
        buf[1] = handle->motors[indices[i]].pins.dac.dac_value >> 8;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	4413      	add	r3, r2
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	23ec      	movs	r3, #236	; 0xec
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3302      	adds	r3, #2
 8002484:	881b      	ldrh	r3, [r3, #0]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b29b      	uxth	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	747b      	strb	r3, [r7, #17]
        buf[2] = handle->motors[indices[i]].pins.dac.dac_value & 0xFF;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	4413      	add	r3, r2
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	23ec      	movs	r3, #236	; 0xec
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3302      	adds	r3, #2
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	74bb      	strb	r3, [r7, #18]

        if(HAL_I2C_Master_Transmit(handle->i2c_handle, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f8d3 03b0 	ldr.w	r0, [r3, #944]	; 0x3b0
 80024b0:	f107 0210 	add.w	r2, r7, #16
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	2303      	movs	r3, #3
 80024bc:	21c0      	movs	r1, #192	; 0xc0
 80024be:	f002 fbbb 	bl	8004c38 <HAL_I2C_Master_Transmit>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <Update_Multi_DAC+0x9e>
            Error_Handler();
 80024c8:	f001 fb5e 	bl	8003b88 <Error_Handler>
    for(uint8_t i = 0; i < size; i++)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	3301      	adds	r3, #1
 80024d0:	75fb      	strb	r3, [r7, #23]
 80024d2:	7dfa      	ldrb	r2, [r7, #23]
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d3b3      	bcc.n	8002442 <Update_Multi_DAC+0x14>
    }
}
 80024da:	bf00      	nop
 80024dc:	bf00      	nop
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <Update_All_DAC>:

void Update_All_DAC(Motor_Handle* handle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];
	for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	e03b      	b.n	800256a <Update_All_DAC+0x86>
	{
        uint8_t sequential_write_cmd = MCP4728_CMD_DACWRITE_MULTI;
 80024f2:	2340      	movs	r3, #64	; 0x40
 80024f4:	73bb      	strb	r3, [r7, #14]
        sequential_write_cmd |= (handle->motors[i].pins.dac.channel << 1);
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	21ec      	movs	r1, #236	; 0xec
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	b25a      	sxtb	r2, r3
 8002508:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800250c:	4313      	orrs	r3, r2
 800250e:	b25b      	sxtb	r3, r3
 8002510:	73bb      	strb	r3, [r7, #14]

	    buf[0] = sequential_write_cmd;
 8002512:	7bbb      	ldrb	r3, [r7, #14]
 8002514:	723b      	strb	r3, [r7, #8]
	    buf[1] = handle->motors[i].pins.dac.dac_value >> 8;
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	21ec      	movs	r1, #236	; 0xec
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3302      	adds	r3, #2
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	0a1b      	lsrs	r3, r3, #8
 8002528:	b29b      	uxth	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	727b      	strb	r3, [r7, #9]
	    buf[2] = handle->motors[i].pins.dac.dac_value & 0xFF;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	21ec      	movs	r1, #236	; 0xec
 8002534:	fb01 f303 	mul.w	r3, r1, r3
 8002538:	4413      	add	r3, r2
 800253a:	3302      	adds	r3, #2
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	72bb      	strb	r3, [r7, #10]

	    if(HAL_I2C_Master_Transmit(handle->i2c_handle, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 03b0 	ldr.w	r0, [r3, #944]	; 0x3b0
 8002548:	f107 0208 	add.w	r2, r7, #8
 800254c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2303      	movs	r3, #3
 8002554:	21c0      	movs	r1, #192	; 0xc0
 8002556:	f002 fb6f 	bl	8004c38 <HAL_I2C_Master_Transmit>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <Update_All_DAC+0x80>
	    	Error_Handler();
 8002560:	f001 fb12 	bl	8003b88 <Error_Handler>
	for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	3301      	adds	r3, #1
 8002568:	73fb      	strb	r3, [r7, #15]
 800256a:	7bfb      	ldrb	r3, [r7, #15]
 800256c:	2b03      	cmp	r3, #3
 800256e:	d9c0      	bls.n	80024f2 <Update_All_DAC+0xe>
	}
}
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <Set_DAC_Default>:
void Set_DAC_Default(Motor_Handle* handle)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af02      	add	r7, sp, #8
 8002580:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e04c      	b.n	8002622 <Set_DAC_Default+0xa8>
    {
        handle->motors[i].pins.dac.dac_value = handle->motors[i].pid_position.dac_default;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	20ec      	movs	r0, #236	; 0xec
 8002590:	fb00 f202 	mul.w	r2, r0, r2
 8002594:	440a      	add	r2, r1
 8002596:	32a4      	adds	r2, #164	; 0xa4
 8002598:	8810      	ldrh	r0, [r2, #0]
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	21ec      	movs	r1, #236	; 0xec
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4413      	add	r3, r2
 80025a4:	3302      	adds	r3, #2
 80025a6:	4602      	mov	r2, r0
 80025a8:	801a      	strh	r2, [r3, #0]
        uint8_t sequential_write_cmd = MCP4728_CMD_DACWRITE_MULTI;
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	73bb      	strb	r3, [r7, #14]
        sequential_write_cmd |= (handle->motors[i].pins.dac.channel << 1);
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	21ec      	movs	r1, #236	; 0xec
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b25b      	sxtb	r3, r3
 80025c8:	73bb      	strb	r3, [r7, #14]

        buf[0] = sequential_write_cmd;
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	723b      	strb	r3, [r7, #8]
	    buf[1] = handle->motors[i].pins.dac.dac_value >> 8;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	21ec      	movs	r1, #236	; 0xec
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3302      	adds	r3, #2
 80025dc:	881b      	ldrh	r3, [r3, #0]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	727b      	strb	r3, [r7, #9]
	    buf[2] = handle->motors[i].pins.dac.dac_value & 0xFF;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	21ec      	movs	r1, #236	; 0xec
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3302      	adds	r3, #2
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	72bb      	strb	r3, [r7, #10]

        if(HAL_I2C_Master_Transmit(handle->i2c_handle, MCP4728_BASEADDR, buf, sizeof(buf), HAL_MAX_DELAY) != HAL_OK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f8d3 03b0 	ldr.w	r0, [r3, #944]	; 0x3b0
 8002600:	f107 0208 	add.w	r2, r7, #8
 8002604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2303      	movs	r3, #3
 800260c:	21c0      	movs	r1, #192	; 0xc0
 800260e:	f002 fb13 	bl	8004c38 <HAL_I2C_Master_Transmit>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <Set_DAC_Default+0xa2>
	    	Error_Handler();
 8002618:	f001 fab6 	bl	8003b88 <Error_Handler>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	3301      	adds	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d9af      	bls.n	8002588 <Set_DAC_Default+0xe>
    }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <Run_Stop_Command>:



void Run_Stop_Command(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
    Set_DAC_Default(handle);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff9c 	bl	800257a <Set_DAC_Default>

    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e007      	b.n	8002658 <Run_Stop_Command+0x26>
        Set_Motor_Brake(&handle->motors[0], GPIO_PIN_SET);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2101      	movs	r1, #1
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe ffe2 	bl	8001616 <Set_Motor_Brake>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3301      	adds	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	2b03      	cmp	r3, #3
 800265c:	d9f4      	bls.n	8002648 <Run_Stop_Command+0x16>

    motor_command->current_command = STOP_COMMAND;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2205      	movs	r2, #5
 8002662:	711a      	strb	r2, [r3, #4]
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	0000      	movs	r0, r0
	...

08002670 <Is_Position_Command_Done>:
// 	Set_Motor_Brake(&back_left_motor, GPIO_PIN_SET);
// 	Set_Motor_Brake(&back_right_motor, GPIO_PIN_SET);
// }

bool Is_Position_Command_Done(Motor_Handle* handle)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    for(uint8_t i = 0; i < NUM_MOTORS;i++)
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
 800267c:	e01b      	b.n	80026b6 <Is_Position_Command_Done+0x46>
        if(handle->motors[i].data.position >= handle->motors[i].data.target)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	21ec      	movs	r1, #236	; 0xec
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	3374      	adds	r3, #116	; 0x74
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	7bfb      	ldrb	r3, [r7, #15]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	21ec      	movs	r1, #236	; 0xec
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3378      	adds	r3, #120	; 0x78
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	db01      	blt.n	80026b0 <Is_Position_Command_Done+0x40>
            return true;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e057      	b.n	8002760 <Is_Position_Command_Done+0xf0>
    for(uint8_t i = 0; i < NUM_MOTORS;i++)
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	3301      	adds	r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d9e0      	bls.n	800267e <Is_Position_Command_Done+0xe>

    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80026bc:	2300      	movs	r3, #0
 80026be:	73bb      	strb	r3, [r7, #14]
 80026c0:	e04a      	b.n	8002758 <Is_Position_Command_Done+0xe8>
    {
        const float dist = handle->motors[i].data.position - handle->motors[i].data.target;
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	21ec      	movs	r1, #236	; 0xec
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	3374      	adds	r3, #116	; 0x74
 80026d0:	ed93 7a00 	vldr	s14, [r3]
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	21ec      	movs	r1, #236	; 0xec
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3378      	adds	r3, #120	; 0x78
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ea:	edc7 7a02 	vstr	s15, [r7, #8]
        if(ABS(dist) < MINIMUM_DIST)
 80026ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd10      	ble.n	800271e <Is_Position_Command_Done+0xae>
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f7fd fee7 	bl	80004d0 <__aeabi_f2d>
 8002702:	2301      	movs	r3, #1
 8002704:	461c      	mov	r4, r3
 8002706:	a318      	add	r3, pc, #96	; (adr r3, 8002768 <Is_Position_Command_Done+0xf8>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fe f9aa 	bl	8000a64 <__aeabi_dcmplt>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <Is_Position_Command_Done+0xaa>
 8002716:	2300      	movs	r3, #0
 8002718:	461c      	mov	r4, r3
 800271a:	b2e3      	uxtb	r3, r4
 800271c:	e015      	b.n	800274a <Is_Position_Command_Done+0xda>
 800271e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002722:	eef1 7a67 	vneg.f32	s15, s15
 8002726:	ee17 3a90 	vmov	r3, s15
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fed0 	bl	80004d0 <__aeabi_f2d>
 8002730:	2301      	movs	r3, #1
 8002732:	461c      	mov	r4, r3
 8002734:	a30c      	add	r3, pc, #48	; (adr r3, 8002768 <Is_Position_Command_Done+0xf8>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f7fe f993 	bl	8000a64 <__aeabi_dcmplt>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <Is_Position_Command_Done+0xd8>
 8002744:	2300      	movs	r3, #0
 8002746:	461c      	mov	r4, r3
 8002748:	b2e3      	uxtb	r3, r4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <Is_Position_Command_Done+0xe2>
            return true;
 800274e:	2301      	movs	r3, #1
 8002750:	e006      	b.n	8002760 <Is_Position_Command_Done+0xf0>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002752:	7bbb      	ldrb	r3, [r7, #14]
 8002754:	3301      	adds	r3, #1
 8002756:	73bb      	strb	r3, [r7, #14]
 8002758:	7bbb      	ldrb	r3, [r7, #14]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d9b1      	bls.n	80026c2 <Is_Position_Command_Done+0x52>
    }

    return false;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	47ae147b 	.word	0x47ae147b
 800276c:	3f847ae1 	.word	0x3f847ae1

08002770 <Is_Velocity_Command_Done>:

bool Is_Velocity_Command_Done(Motor_Handle* handle, const float target_dist)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	ed87 0a00 	vstr	s0, [r7]
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e014      	b.n	80027ac <Is_Velocity_Command_Done+0x3c>
        if(handle->motors[i].data.position >= target_dist)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	21ec      	movs	r1, #236	; 0xec
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3374      	adds	r3, #116	; 0x74
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ed97 7a00 	vldr	s14, [r7]
 8002798:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d801      	bhi.n	80027a6 <Is_Velocity_Command_Done+0x36>
            return true;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e050      	b.n	8002848 <Is_Velocity_Command_Done+0xd8>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	3301      	adds	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d9e7      	bls.n	8002782 <Is_Velocity_Command_Done+0x12>

    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	73bb      	strb	r3, [r7, #14]
 80027b6:	e043      	b.n	8002840 <Is_Velocity_Command_Done+0xd0>
    {
        const float dist = handle->motors[i].data.position - target_dist;
 80027b8:	7bbb      	ldrb	r3, [r7, #14]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	21ec      	movs	r1, #236	; 0xec
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	4413      	add	r3, r2
 80027c4:	3374      	adds	r3, #116	; 0x74
 80027c6:	ed93 7a00 	vldr	s14, [r3]
 80027ca:	edd7 7a00 	vldr	s15, [r7]
 80027ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027d2:	edc7 7a02 	vstr	s15, [r7, #8]
        if(ABS(dist) < MINIMUM_DIST)
 80027d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e2:	dd10      	ble.n	8002806 <Is_Velocity_Command_Done+0x96>
 80027e4:	68b8      	ldr	r0, [r7, #8]
 80027e6:	f7fd fe73 	bl	80004d0 <__aeabi_f2d>
 80027ea:	2301      	movs	r3, #1
 80027ec:	461c      	mov	r4, r3
 80027ee:	a318      	add	r3, pc, #96	; (adr r3, 8002850 <Is_Velocity_Command_Done+0xe0>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fe f936 	bl	8000a64 <__aeabi_dcmplt>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <Is_Velocity_Command_Done+0x92>
 80027fe:	2300      	movs	r3, #0
 8002800:	461c      	mov	r4, r3
 8002802:	b2e3      	uxtb	r3, r4
 8002804:	e015      	b.n	8002832 <Is_Velocity_Command_Done+0xc2>
 8002806:	edd7 7a02 	vldr	s15, [r7, #8]
 800280a:	eef1 7a67 	vneg.f32	s15, s15
 800280e:	ee17 3a90 	vmov	r3, s15
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe5c 	bl	80004d0 <__aeabi_f2d>
 8002818:	2301      	movs	r3, #1
 800281a:	461c      	mov	r4, r3
 800281c:	a30c      	add	r3, pc, #48	; (adr r3, 8002850 <Is_Velocity_Command_Done+0xe0>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fe f91f 	bl	8000a64 <__aeabi_dcmplt>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <Is_Velocity_Command_Done+0xc0>
 800282c:	2300      	movs	r3, #0
 800282e:	461c      	mov	r4, r3
 8002830:	b2e3      	uxtb	r3, r4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <Is_Velocity_Command_Done+0xca>
            return true;
 8002836:	2301      	movs	r3, #1
 8002838:	e006      	b.n	8002848 <Is_Velocity_Command_Done+0xd8>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 800283a:	7bbb      	ldrb	r3, [r7, #14]
 800283c:	3301      	adds	r3, #1
 800283e:	73bb      	strb	r3, [r7, #14]
 8002840:	7bbb      	ldrb	r3, [r7, #14]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d9b8      	bls.n	80027b8 <Is_Velocity_Command_Done+0x48>
    }

    return false;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	47ae147b 	.word	0x47ae147b
 8002854:	3f847ae1 	.word	0x3f847ae1

08002858 <Run_Front_Position_Sync>:
    }
}


void Run_Front_Position_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
    const float SYNC_DISTANCE = 5.0f;
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <Run_Front_Position_Sync+0xec>)
 8002864:	60fb      	str	r3, [r7, #12]
    uint8_t update_indices[2]  = {0, 1};
 8002866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286a:	813b      	strh	r3, [r7, #8]

    handle->front_right_motor.data.position = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    handle->front_right_motor.data.target = 0xFF;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a33      	ldr	r2, [pc, #204]	; (8002948 <Run_Front_Position_Sync+0xf0>)
 800287a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

    handle->back_right_motor.data.position = 0; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
    handle->back_right_motor.data.target = 0xFF;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <Run_Front_Position_Sync+0xf0>)
 800288c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c

    Set_Motor_Command(&handle->front_left_motor, &handle->front_right_motor, false, SYNC_DISTANCE);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	33ec      	adds	r3, #236	; 0xec
 8002896:	ed97 0a03 	vldr	s0, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	4619      	mov	r1, r3
 800289e:	f7ff fd5f 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->front_right_motor, &handle->front_left_motor, true, SYNC_DISTANCE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	33ec      	adds	r3, #236	; 0xec
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fd56 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->front_left_motor, GPIO_PIN_RESET);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe feac 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->front_right_motor, GPIO_PIN_RESET);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	33ec      	adds	r3, #236	; 0xec
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fea6 	bl	8001616 <Set_Motor_Brake>

    Set_Motor_Direction(&handle->front_left_motor, GPIO_PIN_RESET);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe ff7a 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->front_right_motor, GPIO_PIN_SET);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	33ec      	adds	r3, #236	; 0xec
 80028d8:	2101      	movs	r1, #1
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe ff74 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->front_left_motor);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe ff86 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->front_right_motor);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	33ec      	adds	r3, #236	; 0xec
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff81 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Position_Command_Done(handle))
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff febc 	bl	8002670 <Is_Position_Command_Done>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <Run_Front_Position_Sync+0xc2>
        {
            Run_Stop_Command(handle, motor_command);
 80028fe:	6839      	ldr	r1, [r7, #0]
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff fe96 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->front_left_motor);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe ffe7 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->front_right_motor);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	33ec      	adds	r3, #236	; 0xec
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe ffe2 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 8002918:	e010      	b.n	800293c <Run_Front_Position_Sync+0xe4>
        }
        else
        {
            Update_Motor_DAC_PID_Position(&handle->front_left_motor);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fa4d 	bl	8001dbc <Update_Motor_DAC_PID_Position>
            Update_Motor_DAC_PID_Position(&handle->front_right_motor);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	33ec      	adds	r3, #236	; 0xec
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fa48 	bl	8001dbc <Update_Motor_DAC_PID_Position>

            Update_Multi_DAC(handle, update_indices, 2);
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	2202      	movs	r2, #2
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fd7a 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->front_left_motor);
 800293a:	e7d1      	b.n	80028e0 <Run_Front_Position_Sync+0x88>
        }
    }
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40a00000 	.word	0x40a00000
 8002948:	437f0000 	.word	0x437f0000

0800294c <Run_Back_Position_Sync>:


void Run_Back_Position_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    const float SYNC_DISTANCE = 5.0f;
 8002956:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <Run_Back_Position_Sync+0x114>)
 8002958:	60fb      	str	r3, [r7, #12]
    uint8_t update_indices[2] = {2, 3};
 800295a:	f240 3302 	movw	r3, #770	; 0x302
 800295e:	813b      	strh	r3, [r7, #8]

    handle->front_left_motor.data.position = 0;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	675a      	str	r2, [r3, #116]	; 0x74
    handle->front_left_motor.data.target = 0xFF;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a3e      	ldr	r2, [pc, #248]	; (8002a64 <Run_Back_Position_Sync+0x118>)
 800296c:	679a      	str	r2, [r3, #120]	; 0x78

    handle->front_right_motor.data.position = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    handle->front_right_motor.data.target = 0xFF;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3a      	ldr	r2, [pc, #232]	; (8002a64 <Run_Back_Position_Sync+0x118>)
 800297c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

    Set_Motor_Command(&handle->back_left_motor, &handle->back_right_motor, false, SYNC_DISTANCE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800298c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	4619      	mov	r1, r3
 8002994:	f7ff fce4 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_right_motor, &handle->back_left_motor, true, SYNC_DISTANCE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80029a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7ff fcd8 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->back_left_motor, GPIO_PIN_RESET);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fe fe2c 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->back_right_motor, GPIO_PIN_RESET);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80029c4:	2100      	movs	r1, #0
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe fe25 	bl	8001616 <Set_Motor_Brake>
   
    Set_Motor_Direction(&handle->back_left_motor, GPIO_PIN_RESET);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe fef7 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_right_motor, GPIO_PIN_SET);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fef0 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->back_left_motor);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe ff00 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->back_right_motor);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fefa 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Position_Command_Done(handle))
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff fe35 	bl	8002670 <Is_Position_Command_Done>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <Run_Back_Position_Sync+0xe2>
        {
            Run_Stop_Command(handle, motor_command);
 8002a0c:	6839      	ldr	r1, [r7, #0]
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fe0f 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->back_left_motor);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe ff5e 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->back_right_motor);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe ff58 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 8002a2c:	e013      	b.n	8002a56 <Run_Back_Position_Sync+0x10a>
        }
        else
        {
            Update_Motor_DAC_PID_Position(&handle->back_left_motor);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f9c1 	bl	8001dbc <Update_Motor_DAC_PID_Position>
            Update_Motor_DAC_PID_Position(&handle->back_right_motor);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff f9bb 	bl	8001dbc <Update_Motor_DAC_PID_Position>

            Update_Multi_DAC(handle, update_indices, 2);
 8002a46:	f107 0308 	add.w	r3, r7, #8
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fced 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->back_left_motor);
 8002a54:	e7c8      	b.n	80029e8 <Run_Back_Position_Sync+0x9c>
        }
    }
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40a00000 	.word	0x40a00000
 8002a64:	437f0000 	.word	0x437f0000

08002a68 <Run_Left_Position_Sync>:

void Run_Left_Position_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
    const float SYNC_DISTANCE = 5.0f;
 8002a72:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <Run_Left_Position_Sync+0xfc>)
 8002a74:	60fb      	str	r3, [r7, #12]
    uint8_t update_indices[2] = {0, 2};
 8002a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a7a:	813b      	strh	r3, [r7, #8]

    handle->front_right_motor.data.position = 0;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    handle->front_right_motor.data.target = 0xFF;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a37      	ldr	r2, [pc, #220]	; (8002b68 <Run_Left_Position_Sync+0x100>)
 8002a8a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

    handle->back_right_motor.data.position = 0;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
    handle->back_right_motor.data.target = 0xFF;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a33      	ldr	r2, [pc, #204]	; (8002b68 <Run_Left_Position_Sync+0x100>)
 8002a9c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c

    Set_Motor_Command(&handle->front_left_motor, &handle->back_left_motor, false, SYNC_DISTANCE);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002aa8:	ed97 0a03 	vldr	s0, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f7ff fc56 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_left_motor, &handle->front_left_motor, true, SYNC_DISTANCE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fc4c 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->front_left_motor, GPIO_PIN_RESET);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe fda2 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->back_left_motor, GPIO_PIN_RESET);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fd9b 	bl	8001616 <Set_Motor_Brake>

    Set_Motor_Direction(&handle->front_left_motor, GPIO_PIN_RESET);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fe6f 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_left_motor, GPIO_PIN_RESET);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe fe68 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->front_left_motor);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe fe7a 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->back_left_motor);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe fe74 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Position_Command_Done(handle))
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f7ff fdaf 	bl	8002670 <Is_Position_Command_Done>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <Run_Left_Position_Sync+0xce>
        {
            Run_Stop_Command(handle, motor_command);
 8002b18:	6839      	ldr	r1, [r7, #0]
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7ff fd89 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->front_left_motor);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fe feda 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->back_left_motor);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fed4 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 8002b34:	e011      	b.n	8002b5a <Run_Left_Position_Sync+0xf2>
        }
        else
        {
            Update_Motor_DAC_PID_Position(&handle->front_left_motor);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff f93f 	bl	8001dbc <Update_Motor_DAC_PID_Position>
            Update_Motor_DAC_PID_Position(&handle->back_left_motor);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff f939 	bl	8001dbc <Update_Motor_DAC_PID_Position>

            Update_Multi_DAC(handle, update_indices, 2);
 8002b4a:	f107 0308 	add.w	r3, r7, #8
 8002b4e:	2202      	movs	r2, #2
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fc6b 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->front_left_motor);
 8002b58:	e7ce      	b.n	8002af8 <Run_Left_Position_Sync+0x90>
        }
    }
}
 8002b5a:	bf00      	nop
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40a00000 	.word	0x40a00000
 8002b68:	437f0000 	.word	0x437f0000

08002b6c <Run_Right_Position_Sync>:


void Run_Right_Position_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
    const float SYNC_DISTANCE = 5.0f;
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <Run_Right_Position_Sync+0x108>)
 8002b78:	60fb      	str	r3, [r7, #12]
    uint8_t update_indices[2] = {1, 3};
 8002b7a:	f240 3301 	movw	r3, #769	; 0x301
 8002b7e:	813b      	strh	r3, [r7, #8]

    handle->front_left_motor.data.position = 0;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	675a      	str	r2, [r3, #116]	; 0x74
    handle->front_left_motor.data.target = 0xFF;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3b      	ldr	r2, [pc, #236]	; (8002c78 <Run_Right_Position_Sync+0x10c>)
 8002b8c:	679a      	str	r2, [r3, #120]	; 0x78

    handle->back_left_motor.data.position = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    handle->back_left_motor.data.target = 0xFF;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a37      	ldr	r2, [pc, #220]	; (8002c78 <Run_Right_Position_Sync+0x10c>)
 8002b9c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

    Set_Motor_Command(&handle->front_right_motor, &handle->back_right_motor, false, SYNC_DISTANCE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002bac:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff fbd4 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_right_motor, &handle->front_right_motor, true, SYNC_DISTANCE);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	33ec      	adds	r3, #236	; 0xec
 8002bc2:	ed97 0a03 	vldr	s0, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4619      	mov	r1, r3
 8002bca:	f7ff fbc9 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->front_right_motor, GPIO_PIN_RESET);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	33ec      	adds	r3, #236	; 0xec
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fd1e 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->back_right_motor, GPIO_PIN_RESET);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002be0:	2100      	movs	r1, #0
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe fd17 	bl	8001616 <Set_Motor_Brake>

    Set_Motor_Direction(&handle->front_right_motor, GPIO_PIN_RESET);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	33ec      	adds	r3, #236	; 0xec
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe fdea 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_right_motor, GPIO_PIN_RESET);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fde3 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->front_right_motor);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	33ec      	adds	r3, #236	; 0xec
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fdf4 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->back_right_motor);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fdee 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Position_Command_Done(handle))
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fd29 	bl	8002670 <Is_Position_Command_Done>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00f      	beq.n	8002c44 <Run_Right_Position_Sync+0xd8>
        {
            Run_Stop_Command(handle, motor_command);
 8002c24:	6839      	ldr	r1, [r7, #0]
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff fd03 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->front_right_motor);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	33ec      	adds	r3, #236	; 0xec
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe fe53 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->back_right_motor);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fe4d 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 8002c42:	e012      	b.n	8002c6a <Run_Right_Position_Sync+0xfe>
        }
        else
        {
            Update_Motor_DAC_PID_Position(&handle->front_right_motor);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	33ec      	adds	r3, #236	; 0xec
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff f8b7 	bl	8001dbc <Update_Motor_DAC_PID_Position>
            Update_Motor_DAC_PID_Position(&handle->back_right_motor);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f8b1 	bl	8001dbc <Update_Motor_DAC_PID_Position>

            Update_Multi_DAC(handle, update_indices, 2);
 8002c5a:	f107 0308 	add.w	r3, r7, #8
 8002c5e:	2202      	movs	r2, #2
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fbe3 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->front_right_motor);
 8002c68:	e7cb      	b.n	8002c02 <Run_Right_Position_Sync+0x96>
        }
    }
}
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40a00000 	.word	0x40a00000
 8002c78:	437f0000 	.word	0x437f0000

08002c7c <Run_Sync_All_Position>:


void Run_Sync_All_Position(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
    const float SYNC_DISTANCE = 5.0f;
 8002c86:	4b50      	ldr	r3, [pc, #320]	; (8002dc8 <Run_Sync_All_Position+0x14c>)
 8002c88:	60bb      	str	r3, [r7, #8]

    Set_Motor_Command(&handle->front_left_motor, &handle->front_right_motor, false, SYNC_DISTANCE);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	33ec      	adds	r3, #236	; 0xec
 8002c90:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	4619      	mov	r1, r3
 8002c98:	f7ff fb62 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->front_right_motor, &handle->front_left_motor, true, SYNC_DISTANCE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	33ec      	adds	r3, #236	; 0xec
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fb59 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_left_motor, &handle->back_right_motor, false, SYNC_DISTANCE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002cba:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7ff fb4d 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_right_motor, &handle->back_left_motor, true, SYNC_DISTANCE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002cd2:	ed97 0a02 	vldr	s0, [r7, #8]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7ff fb41 	bl	8002360 <Set_Motor_Command>

    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e00c      	b.n	8002cfe <Run_Sync_All_Position+0x82>
        Set_Motor_Brake(&handle->motors[i], GPIO_PIN_RESET); 
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	22ec      	movs	r2, #236	; 0xec
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	4413      	add	r3, r2
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fc8f 	bl	8001616 <Set_Motor_Brake>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d9ef      	bls.n	8002ce4 <Run_Sync_All_Position+0x68>

    Set_Motor_Direction(&handle->front_left_motor, GPIO_PIN_SET);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fd5d 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->front_right_motor, GPIO_PIN_RESET);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	33ec      	adds	r3, #236	; 0xec
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fd57 	bl	80017c8 <Set_Motor_Direction>

    Set_Motor_Direction(&handle->back_left_motor, GPIO_PIN_SET);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fd50 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_right_motor, GPIO_PIN_RESET);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fd49 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {

        for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73bb      	strb	r3, [r7, #14]
 8002d3a:	e00b      	b.n	8002d54 <Run_Sync_All_Position+0xd8>
            Calculate_Motor_Position(&handle->motors[i]);
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	22ec      	movs	r2, #236	; 0xec
 8002d40:	fb02 f303 	mul.w	r3, r2, r3
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	4413      	add	r3, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fd53 	bl	80017f4 <Calculate_Motor_Position>
        for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002d4e:	7bbb      	ldrb	r3, [r7, #14]
 8002d50:	3301      	adds	r3, #1
 8002d52:	73bb      	strb	r3, [r7, #14]
 8002d54:	7bbb      	ldrb	r3, [r7, #14]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d9f0      	bls.n	8002d3c <Run_Sync_All_Position+0xc0>

        if(Is_Position_Command_Done(handle))
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fc88 	bl	8002670 <Is_Position_Command_Done>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <Run_Sync_All_Position+0x118>
        {
            Run_Stop_Command(handle, motor_command);
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fc62 	bl	8002632 <Run_Stop_Command>

            for(uint8_t i = 0; i < NUM_MOTORS; i++) 
 8002d6e:	2300      	movs	r3, #0
 8002d70:	737b      	strb	r3, [r7, #13]
 8002d72:	e00b      	b.n	8002d8c <Run_Sync_All_Position+0x110>
                Calculate_Motor_Alignment(&handle->motors[i]);     
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
 8002d76:	22ec      	movs	r2, #236	; 0xec
 8002d78:	fb02 f303 	mul.w	r3, r2, r3
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fdab 	bl	80018dc <Calculate_Motor_Alignment>
            for(uint8_t i = 0; i < NUM_MOTORS; i++) 
 8002d86:	7b7b      	ldrb	r3, [r7, #13]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	737b      	strb	r3, [r7, #13]
 8002d8c:	7b7b      	ldrb	r3, [r7, #13]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d9f0      	bls.n	8002d74 <Run_Sync_All_Position+0xf8>

            break;
 8002d92:	e015      	b.n	8002dc0 <Run_Sync_All_Position+0x144>
        }
        else
        {
            for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002d94:	2300      	movs	r3, #0
 8002d96:	733b      	strb	r3, [r7, #12]
 8002d98:	e00b      	b.n	8002db2 <Run_Sync_All_Position+0x136>
                Update_Motor_DAC_PID_Position(&handle->motors[i]);
 8002d9a:	7b3b      	ldrb	r3, [r7, #12]
 8002d9c:	22ec      	movs	r2, #236	; 0xec
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f808 	bl	8001dbc <Update_Motor_DAC_PID_Position>
            for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002dac:	7b3b      	ldrb	r3, [r7, #12]
 8002dae:	3301      	adds	r3, #1
 8002db0:	733b      	strb	r3, [r7, #12]
 8002db2:	7b3b      	ldrb	r3, [r7, #12]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d9f0      	bls.n	8002d9a <Run_Sync_All_Position+0x11e>
        
            Update_All_DAC(handle);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff fb93 	bl	80024e4 <Update_All_DAC>
        for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8002dbe:	e7ba      	b.n	8002d36 <Run_Sync_All_Position+0xba>
        }
    }
}
 8002dc0:	bf00      	nop
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40a00000 	.word	0x40a00000

08002dcc <Run_Front_Velocity_Sync>:

void Run_Front_Velocity_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
    const float SYNC_VELOCITY_RPM = 300;
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <Run_Front_Velocity_Sync+0xf4>)
 8002dd8:	617b      	str	r3, [r7, #20]
    const float VELOCITY_POSITION_DISTANCE = 10.0f;
 8002dda:	4b3a      	ldr	r3, [pc, #232]	; (8002ec4 <Run_Front_Velocity_Sync+0xf8>)
 8002ddc:	613b      	str	r3, [r7, #16]
    uint8_t update_indices[2] = {0, 1};
 8002dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de2:	81bb      	strh	r3, [r7, #12]

    handle->back_left_motor.data.position = 0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    handle->back_left_motor.data.target = 0xFF;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a35      	ldr	r2, [pc, #212]	; (8002ec8 <Run_Front_Velocity_Sync+0xfc>)
 8002df2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

    handle->back_right_motor.data.position = 0;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
    handle->back_right_motor.data.target = 0xFF;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <Run_Front_Velocity_Sync+0xfc>)
 8002e04:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c

    Set_Motor_Command(&handle->front_left_motor, &handle->front_right_motor, false, SYNC_VELOCITY_RPM);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	33ec      	adds	r3, #236	; 0xec
 8002e0e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e12:	2200      	movs	r2, #0
 8002e14:	4619      	mov	r1, r3
 8002e16:	f7ff faa3 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->front_right_motor, &handle->front_left_motor, true, SYNC_VELOCITY_RPM);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	33ec      	adds	r3, #236	; 0xec
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	ed97 0a05 	vldr	s0, [r7, #20]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fa9a 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->front_left_motor, GPIO_PIN_RESET);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fe fbf0 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->front_right_motor, GPIO_PIN_RESET);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	33ec      	adds	r3, #236	; 0xec
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fbea 	bl	8001616 <Set_Motor_Brake>
   

    Set_Motor_Direction(&handle->front_left_motor, GPIO_PIN_RESET);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe fcbe 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->front_right_motor, GPIO_PIN_SET);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	33ec      	adds	r3, #236	; 0xec
 8002e50:	2101      	movs	r1, #1
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fcb8 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->front_left_motor);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fcca 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->front_right_motor);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	33ec      	adds	r3, #236	; 0xec
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe fcc5 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Velocity_Command_Done(handle, VELOCITY_POSITION_DISTANCE))
 8002e6a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff fc7e 	bl	8002770 <Is_Velocity_Command_Done>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <Run_Front_Velocity_Sync+0xca>
        {
            Run_Stop_Command(handle, motor_command);
 8002e7a:	6839      	ldr	r1, [r7, #0]
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff fbd8 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->front_left_motor);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fe fd29 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->front_right_motor);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	33ec      	adds	r3, #236	; 0xec
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fd24 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 8002e94:	e010      	b.n	8002eb8 <Run_Front_Velocity_Sync+0xec>
        }
        else
        {
            Update_Motor_DAC_PID_Velocity(&handle->front_left_motor);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff f8f5 	bl	8002088 <Update_Motor_DAC_PID_Velocity>
            Update_Motor_DAC_PID_Velocity(&handle->front_right_motor);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	33ec      	adds	r3, #236	; 0xec
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff f8f0 	bl	8002088 <Update_Motor_DAC_PID_Velocity>

            Update_Multi_DAC(handle, update_indices, 2);
 8002ea8:	f107 030c 	add.w	r3, r7, #12
 8002eac:	2202      	movs	r2, #2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fabc 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->front_left_motor);
 8002eb6:	e7cf      	b.n	8002e58 <Run_Front_Velocity_Sync+0x8c>
        }
    }
}
 8002eb8:	bf00      	nop
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	43960000 	.word	0x43960000
 8002ec4:	41200000 	.word	0x41200000
 8002ec8:	437f0000 	.word	0x437f0000

08002ecc <Run_Back_Velocity_Sync>:

void Run_Back_Velocity_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
    const float SYNC_VELOCITY_RPM = 500;
 8002ed6:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <Run_Back_Velocity_Sync+0x11c>)
 8002ed8:	617b      	str	r3, [r7, #20]
    const float VELOCITY_POSITION_DISTANCE = 5.0f;
 8002eda:	4b44      	ldr	r3, [pc, #272]	; (8002fec <Run_Back_Velocity_Sync+0x120>)
 8002edc:	613b      	str	r3, [r7, #16]
    uint8_t update_indices[2] = {2, 3};
 8002ede:	f240 3302 	movw	r3, #770	; 0x302
 8002ee2:	81bb      	strh	r3, [r7, #12]


    handle->front_left_motor.data.position = 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f04f 0200 	mov.w	r2, #0
 8002eea:	675a      	str	r2, [r3, #116]	; 0x74
    handle->front_left_motor.data.target = 0xFF;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <Run_Back_Velocity_Sync+0x124>)
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78

    handle->front_right_motor.data.position = 0;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    handle->front_right_motor.data.target = 0xFF;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3c      	ldr	r2, [pc, #240]	; (8002ff0 <Run_Back_Velocity_Sync+0x124>)
 8002f00:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

    Set_Motor_Command(&handle->back_left_motor, &handle->back_right_motor, false, SYNC_VELOCITY_RPM);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002f10:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	f7ff fa22 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_right_motor, &handle->back_left_motor, true, SYNC_VELOCITY_RPM);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002f28:	ed97 0a05 	vldr	s0, [r7, #20]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7ff fa16 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->back_left_motor, GPIO_PIN_RESET);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fb6a 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->back_right_motor, GPIO_PIN_RESET);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fb63 	bl	8001616 <Set_Motor_Brake>
   

    Set_Motor_Direction(&handle->back_left_motor, GPIO_PIN_RESET);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002f56:	2100      	movs	r1, #0
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fc35 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_right_motor, GPIO_PIN_SET);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002f64:	2101      	movs	r1, #1
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fc2e 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->back_left_motor);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fc3e 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->back_right_motor);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fc38 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Velocity_Command_Done(handle, VELOCITY_POSITION_DISTANCE))
 8002f84:	ed97 0a04 	vldr	s0, [r7, #16]
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fbf1 	bl	8002770 <Is_Velocity_Command_Done>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d010      	beq.n	8002fb6 <Run_Back_Velocity_Sync+0xea>
        {
            Run_Stop_Command(handle, motor_command);
 8002f94:	6839      	ldr	r1, [r7, #0]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fb4b 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->back_left_motor);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fe fc9a 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->back_right_motor);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fc94 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 8002fb4:	e013      	b.n	8002fde <Run_Back_Velocity_Sync+0x112>
        }
        else
        {
            Update_Motor_DAC_PID_Velocity(&handle->back_left_motor);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f863 	bl	8002088 <Update_Motor_DAC_PID_Velocity>
            Update_Motor_DAC_PID_Velocity(&handle->back_right_motor);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff f85d 	bl	8002088 <Update_Motor_DAC_PID_Velocity>

            Update_Multi_DAC(handle, update_indices, 2);
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fa29 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->back_left_motor);
 8002fdc:	e7c6      	b.n	8002f6c <Run_Back_Velocity_Sync+0xa0>
        }
    }
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	43fa0000 	.word	0x43fa0000
 8002fec:	40a00000 	.word	0x40a00000
 8002ff0:	437f0000 	.word	0x437f0000

08002ff4 <Run_Left_Velocity_Sync>:

void Run_Left_Velocity_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    const float SYNC_VELOCITY_RPM = 500;
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <Run_Left_Velocity_Sync+0x104>)
 8003000:	617b      	str	r3, [r7, #20]
    const float VELOCITY_POSITION_DISTANCE = 5.0f;
 8003002:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <Run_Left_Velocity_Sync+0x108>)
 8003004:	613b      	str	r3, [r7, #16]
    uint8_t update_indices[2] = {0, 2};
 8003006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800300a:	81bb      	strh	r3, [r7, #12]

    handle->front_right_motor.data.position = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    handle->front_right_motor.data.target = 0xFF;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a39      	ldr	r2, [pc, #228]	; (8003100 <Run_Left_Velocity_Sync+0x10c>)
 800301a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

    handle->back_right_motor.data.position = 0;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
    handle->back_right_motor.data.target = 0xFF;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a35      	ldr	r2, [pc, #212]	; (8003100 <Run_Left_Velocity_Sync+0x10c>)
 800302c:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c

    Set_Motor_Command(&handle->front_left_motor, &handle->back_left_motor, false, SYNC_VELOCITY_RPM);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003038:	ed97 0a05 	vldr	s0, [r7, #20]
 800303c:	2200      	movs	r2, #0
 800303e:	4619      	mov	r1, r3
 8003040:	f7ff f98e 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_left_motor, &handle->front_left_motor, true, SYNC_VELOCITY_RPM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	ed97 0a05 	vldr	s0, [r7, #20]
 8003050:	2201      	movs	r2, #1
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f984 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->front_left_motor, GPIO_PIN_RESET);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2100      	movs	r1, #0
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fada 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->back_left_motor, GPIO_PIN_RESET);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fad3 	bl	8001616 <Set_Motor_Brake>
   

    Set_Motor_Direction(&handle->front_left_motor, GPIO_PIN_RESET);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fba7 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_left_motor, GPIO_PIN_RESET);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003080:	2100      	movs	r1, #0
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fba0 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->front_left_motor);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fbb2 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->back_left_motor);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe fbac 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Velocity_Command_Done(handle, VELOCITY_POSITION_DISTANCE))
 800309c:	ed97 0a04 	vldr	s0, [r7, #16]
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fb65 	bl	8002770 <Is_Velocity_Command_Done>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <Run_Left_Velocity_Sync+0xd6>
        {
            Run_Stop_Command(handle, motor_command);
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff fabf 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->front_left_motor);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fc10 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->back_left_motor);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fc0a 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 80030c8:	e011      	b.n	80030ee <Run_Left_Velocity_Sync+0xfa>
        }
        else
        {
            Update_Motor_DAC_PID_Velocity(&handle->front_left_motor);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe ffdb 	bl	8002088 <Update_Motor_DAC_PID_Velocity>
            Update_Motor_DAC_PID_Velocity(&handle->back_left_motor);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ffd5 	bl	8002088 <Update_Motor_DAC_PID_Velocity>

            Update_Multi_DAC(handle, update_indices, 2);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	2202      	movs	r2, #2
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff f9a1 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->front_left_motor);
 80030ec:	e7cc      	b.n	8003088 <Run_Left_Velocity_Sync+0x94>
        }
    }
}
 80030ee:	bf00      	nop
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	43fa0000 	.word	0x43fa0000
 80030fc:	40a00000 	.word	0x40a00000
 8003100:	437f0000 	.word	0x437f0000

08003104 <Run_Right_Velocity_Sync>:

void Run_Right_Velocity_Sync(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
    const float SYNC_VELOCITY_RPM = 500;
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <Run_Right_Velocity_Sync+0x110>)
 8003110:	617b      	str	r3, [r7, #20]
    const float VELOCITY_POSITION_DISTANCE = 5.0f;
 8003112:	4b41      	ldr	r3, [pc, #260]	; (8003218 <Run_Right_Velocity_Sync+0x114>)
 8003114:	613b      	str	r3, [r7, #16]
    uint8_t update_indices[2] = {1, 3};
 8003116:	f240 3301 	movw	r3, #769	; 0x301
 800311a:	81bb      	strh	r3, [r7, #12]

    handle->front_left_motor.data.position = 0;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	675a      	str	r2, [r3, #116]	; 0x74
    handle->front_left_motor.data.target = 0xFF;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a3d      	ldr	r2, [pc, #244]	; (800321c <Run_Right_Velocity_Sync+0x118>)
 8003128:	679a      	str	r2, [r3, #120]	; 0x78

    handle->back_left_motor.data.position = 0;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
    handle->back_left_motor.data.target = 0xFF;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a39      	ldr	r2, [pc, #228]	; (800321c <Run_Right_Velocity_Sync+0x118>)
 8003138:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250

    Set_Motor_Command(&handle->front_right_motor, &handle->back_right_motor, false, SYNC_VELOCITY_RPM);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003148:	ed97 0a05 	vldr	s0, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	4619      	mov	r1, r3
 8003150:	f7ff f906 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_right_motor, &handle->front_right_motor, true, SYNC_VELOCITY_RPM);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	33ec      	adds	r3, #236	; 0xec
 800315e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003162:	2201      	movs	r2, #1
 8003164:	4619      	mov	r1, r3
 8003166:	f7ff f8fb 	bl	8002360 <Set_Motor_Command>

    Set_Motor_Brake(&handle->front_right_motor, GPIO_PIN_RESET);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	33ec      	adds	r3, #236	; 0xec
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f7fe fa50 	bl	8001616 <Set_Motor_Brake>
    Set_Motor_Brake(&handle->back_right_motor, GPIO_PIN_RESET);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fa49 	bl	8001616 <Set_Motor_Brake>
   
    Set_Motor_Direction(&handle->front_right_motor, GPIO_PIN_RESET);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	33ec      	adds	r3, #236	; 0xec
 8003188:	2100      	movs	r1, #0
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fb1c 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_right_motor, GPIO_PIN_RESET);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f7fe fb15 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        Calculate_Motor_Position(&handle->front_right_motor);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	33ec      	adds	r3, #236	; 0xec
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fb26 	bl	80017f4 <Calculate_Motor_Position>
        Calculate_Motor_Position(&handle->back_right_motor);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fe fb20 	bl	80017f4 <Calculate_Motor_Position>

        if(Is_Velocity_Command_Done(handle, VELOCITY_POSITION_DISTANCE))
 80031b4:	ed97 0a04 	vldr	s0, [r7, #16]
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff fad9 	bl	8002770 <Is_Velocity_Command_Done>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00f      	beq.n	80031e4 <Run_Right_Velocity_Sync+0xe0>
        {
            Run_Stop_Command(handle, motor_command);
 80031c4:	6839      	ldr	r1, [r7, #0]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fa33 	bl	8002632 <Run_Stop_Command>

            Calculate_Motor_Alignment(&handle->front_right_motor);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	33ec      	adds	r3, #236	; 0xec
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fe fb83 	bl	80018dc <Calculate_Motor_Alignment>
            Calculate_Motor_Alignment(&handle->back_right_motor);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fb7d 	bl	80018dc <Calculate_Motor_Alignment>

            break;
 80031e2:	e012      	b.n	800320a <Run_Right_Velocity_Sync+0x106>
        }
        else
        {
            Update_Motor_DAC_PID_Velocity(&handle->front_right_motor);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	33ec      	adds	r3, #236	; 0xec
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fe ff4d 	bl	8002088 <Update_Motor_DAC_PID_Velocity>
            Update_Motor_DAC_PID_Velocity(&handle->back_right_motor);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe ff47 	bl	8002088 <Update_Motor_DAC_PID_Velocity>

            Update_Multi_DAC(handle, update_indices, 2);
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	2202      	movs	r2, #2
 8003200:	4619      	mov	r1, r3
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff f913 	bl	800242e <Update_Multi_DAC>
        Calculate_Motor_Position(&handle->front_right_motor);
 8003208:	e7c9      	b.n	800319e <Run_Right_Velocity_Sync+0x9a>
        }
    }
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	43fa0000 	.word	0x43fa0000
 8003218:	40a00000 	.word	0x40a00000
 800321c:	437f0000 	.word	0x437f0000

08003220 <Run_Sync_All_Velocity>:

void Run_Sync_All_Velocity(Motor_Handle* handle, I2C_Motor_Command* motor_command)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
    const float SYNC_VELOCITY_RPM = 500;
 800322a:	4b52      	ldr	r3, [pc, #328]	; (8003374 <Run_Sync_All_Velocity+0x154>)
 800322c:	613b      	str	r3, [r7, #16]
    const float VELOCITY_POSITION_DISTANCE = 5.0f;
 800322e:	4b52      	ldr	r3, [pc, #328]	; (8003378 <Run_Sync_All_Velocity+0x158>)
 8003230:	60fb      	str	r3, [r7, #12]

    Set_Motor_Command(&handle->front_left_motor, &handle->front_right_motor, false, SYNC_VELOCITY_RPM);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	33ec      	adds	r3, #236	; 0xec
 8003238:	ed97 0a04 	vldr	s0, [r7, #16]
 800323c:	2200      	movs	r2, #0
 800323e:	4619      	mov	r1, r3
 8003240:	f7ff f88e 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->front_right_motor, &handle->front_left_motor, true, SYNC_VELOCITY_RPM);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	33ec      	adds	r3, #236	; 0xec
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	ed97 0a04 	vldr	s0, [r7, #16]
 800324e:	2201      	movs	r2, #1
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff f885 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_left_motor, &handle->back_right_motor, false, SYNC_VELOCITY_RPM);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8003262:	ed97 0a04 	vldr	s0, [r7, #16]
 8003266:	2200      	movs	r2, #0
 8003268:	4619      	mov	r1, r3
 800326a:	f7ff f879 	bl	8002360 <Set_Motor_Command>
    Set_Motor_Command(&handle->back_right_motor, &handle->back_left_motor, true, SYNC_VELOCITY_RPM);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800327a:	ed97 0a04 	vldr	s0, [r7, #16]
 800327e:	2201      	movs	r2, #1
 8003280:	4619      	mov	r1, r3
 8003282:	f7ff f86d 	bl	8002360 <Set_Motor_Command>

    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 8003286:	2300      	movs	r3, #0
 8003288:	75fb      	strb	r3, [r7, #23]
 800328a:	e00c      	b.n	80032a6 <Run_Sync_All_Velocity+0x86>
        Set_Motor_Brake(&handle->motors[i], GPIO_PIN_RESET);
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	22ec      	movs	r2, #236	; 0xec
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe f9bb 	bl	8001616 <Set_Motor_Brake>
    for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80032a0:	7dfb      	ldrb	r3, [r7, #23]
 80032a2:	3301      	adds	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d9ef      	bls.n	800328c <Run_Sync_All_Velocity+0x6c>

    Set_Motor_Direction(&handle->front_left_motor, GPIO_PIN_SET);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2101      	movs	r1, #1
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe fa89 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->front_right_motor, GPIO_PIN_RESET);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	33ec      	adds	r3, #236	; 0xec
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fe fa83 	bl	80017c8 <Set_Motor_Direction>

    Set_Motor_Direction(&handle->back_left_motor, GPIO_PIN_SET);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fa7c 	bl	80017c8 <Set_Motor_Direction>
    Set_Motor_Direction(&handle->back_right_motor, GPIO_PIN_RESET);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fe fa75 	bl	80017c8 <Set_Motor_Direction>

    while(true)
    {
        for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	75bb      	strb	r3, [r7, #22]
 80032e2:	e00b      	b.n	80032fc <Run_Sync_All_Velocity+0xdc>
            Calculate_Motor_Position(&handle->motors[i]);
 80032e4:	7dbb      	ldrb	r3, [r7, #22]
 80032e6:	22ec      	movs	r2, #236	; 0xec
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe fa7f 	bl	80017f4 <Calculate_Motor_Position>
        for(uint8_t i = 0; i < NUM_MOTORS; i++)
 80032f6:	7dbb      	ldrb	r3, [r7, #22]
 80032f8:	3301      	adds	r3, #1
 80032fa:	75bb      	strb	r3, [r7, #22]
 80032fc:	7dbb      	ldrb	r3, [r7, #22]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d9f0      	bls.n	80032e4 <Run_Sync_All_Velocity+0xc4>


        if(Is_Velocity_Command_Done(handle, VELOCITY_POSITION_DISTANCE))
 8003302:	ed97 0a03 	vldr	s0, [r7, #12]
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fa32 	bl	8002770 <Is_Velocity_Command_Done>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d016      	beq.n	8003340 <Run_Sync_All_Velocity+0x120>
        {
            Run_Stop_Command(handle, motor_command);
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff f98c 	bl	8002632 <Run_Stop_Command>

            for(uint8_t i = 0; i < NUM_MOTORS; i++) 
 800331a:	2300      	movs	r3, #0
 800331c:	757b      	strb	r3, [r7, #21]
 800331e:	e00b      	b.n	8003338 <Run_Sync_All_Velocity+0x118>
                Calculate_Motor_Alignment(&handle->motors[i]);     
 8003320:	7d7b      	ldrb	r3, [r7, #21]
 8003322:	22ec      	movs	r2, #236	; 0xec
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	4413      	add	r3, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7fe fad5 	bl	80018dc <Calculate_Motor_Alignment>
            for(uint8_t i = 0; i < NUM_MOTORS; i++) 
 8003332:	7d7b      	ldrb	r3, [r7, #21]
 8003334:	3301      	adds	r3, #1
 8003336:	757b      	strb	r3, [r7, #21]
 8003338:	7d7b      	ldrb	r3, [r7, #21]
 800333a:	2b03      	cmp	r3, #3
 800333c:	d9f0      	bls.n	8003320 <Run_Sync_All_Velocity+0x100>
            
            break;
 800333e:	e015      	b.n	800336c <Run_Sync_All_Velocity+0x14c>
        }
        else
        {
            for(uint8_t i = 0; i < NUM_MOTORS; i++) 
 8003340:	2300      	movs	r3, #0
 8003342:	753b      	strb	r3, [r7, #20]
 8003344:	e00b      	b.n	800335e <Run_Sync_All_Velocity+0x13e>
                Update_Motor_DAC_PID_Velocity(&handle->motors[i]);  
 8003346:	7d3b      	ldrb	r3, [r7, #20]
 8003348:	22ec      	movs	r2, #236	; 0xec
 800334a:	fb02 f303 	mul.w	r3, r2, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe fe98 	bl	8002088 <Update_Motor_DAC_PID_Velocity>
            for(uint8_t i = 0; i < NUM_MOTORS; i++) 
 8003358:	7d3b      	ldrb	r3, [r7, #20]
 800335a:	3301      	adds	r3, #1
 800335c:	753b      	strb	r3, [r7, #20]
 800335e:	7d3b      	ldrb	r3, [r7, #20]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d9f0      	bls.n	8003346 <Run_Sync_All_Velocity+0x126>

            Update_All_DAC(handle);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff f8bd 	bl	80024e4 <Update_All_DAC>
        for(uint8_t i = 0; i < NUM_MOTORS; i++)
 800336a:	e7b8      	b.n	80032de <Run_Sync_All_Velocity+0xbe>
        }
    }
}
 800336c:	bf00      	nop
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	43fa0000 	.word	0x43fa0000
 8003378:	40a00000 	.word	0x40a00000

0800337c <HAL_I2C_ListenCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	I2C_ListenCpltCallback(&i2c_handle, hi2c);
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4803      	ldr	r0, [pc, #12]	; (8003394 <HAL_I2C_ListenCpltCallback+0x18>)
 8003388:	f7fe f81d 	bl	80013c6 <I2C_ListenCpltCallback>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200005e8 	.word	0x200005e8

08003398 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	I2C_ErrorCallback(&i2c_handle, hi2c);
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4803      	ldr	r0, [pc, #12]	; (80033b0 <HAL_I2C_ErrorCallback+0x18>)
 80033a4:	f7fd fdb5 	bl	8000f12 <I2C_ErrorCallback>
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200005e8 	.word	0x200005e8

080033b4 <HAL_I2C_AddrCallback>:
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	70fb      	strb	r3, [r7, #3]
 80033c0:	4613      	mov	r3, r2
 80033c2:	803b      	strh	r3, [r7, #0]
	I2C_AddrCallback(&i2c_handle, hi2c, TransferDirection, AddrMatchCode);
 80033c4:	883b      	ldrh	r3, [r7, #0]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4803      	ldr	r0, [pc, #12]	; (80033d8 <HAL_I2C_AddrCallback+0x24>)
 80033cc:	f7fd fdd8 	bl	8000f80 <I2C_AddrCallback>
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	200005e8 	.word	0x200005e8

080033dc <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	I2C_SlaveRxCpltCallback(&motor_handle, &i2c_handle, &command_handle, hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80033e8:	4904      	ldr	r1, [pc, #16]	; (80033fc <HAL_I2C_SlaveRxCpltCallback+0x20>)
 80033ea:	4805      	ldr	r0, [pc, #20]	; (8003400 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80033ec:	f7fd ff0c 	bl	8001208 <I2C_SlaveRxCpltCallback>
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000000 	.word	0x20000000
 80033fc:	200005e8 	.word	0x200005e8
 8003400:	20000234 	.word	0x20000234

08003404 <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	I2C_SlaveTxCpltCallback(&i2c_handle, hi2c);
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4803      	ldr	r0, [pc, #12]	; (800341c <HAL_I2C_SlaveTxCpltCallback+0x18>)
 8003410:	f7fd ffa4 	bl	800135c <I2C_SlaveTxCpltCallback>
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	200005e8 	.word	0x200005e8

08003420 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
	if(motor_ready)
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00f      	beq.n	8003452 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
        Update_Motor_Period_Elapsed(&motor_handle.motors[0], htim);
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	480a      	ldr	r0, [pc, #40]	; (8003460 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003436:	f7fe fa81 	bl	800193c <Update_Motor_Period_Elapsed>
        Update_Motor_Period_Elapsed(&motor_handle.motors[1], htim);
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4809      	ldr	r0, [pc, #36]	; (8003464 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800343e:	f7fe fa7d 	bl	800193c <Update_Motor_Period_Elapsed>
        Update_Motor_Period_Elapsed(&motor_handle.motors[2], htim);
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003446:	f7fe fa79 	bl	800193c <Update_Motor_Period_Elapsed>
        Update_Motor_Period_Elapsed(&motor_handle.motors[3], htim);
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4807      	ldr	r0, [pc, #28]	; (800346c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800344e:	f7fe fa75 	bl	800193c <Update_Motor_Period_Elapsed>
	}
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200006fc 	.word	0x200006fc
 8003460:	20000234 	.word	0x20000234
 8003464:	20000320 	.word	0x20000320
 8003468:	2000040c 	.word	0x2000040c
 800346c:	200004f8 	.word	0x200004f8

08003470 <Run_Motor_Command_Calibrate>:

/// @brief 1 == front_pos_sync, 2 == back_pos_sync, 3 == left_pos_sync, 4 == right_pos_sync, 5 sync_all_pos, 6 == front_velo_sync, 7 = back_velo_sync, 8 == left_velo_sync, 9 == right_velo_sync, 10 == sync_all_velo 
/// @param command To run
/// @param motor_command Pointer to I2c_Motor_Command structure
void Run_Motor_Command_Calibrate(const int32_t command, I2C_Motor_Command *motor_command)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
	switch(command)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3b01      	subs	r3, #1
 800347e:	2b09      	cmp	r3, #9
 8003480:	d848      	bhi.n	8003514 <Run_Motor_Command_Calibrate+0xa4>
 8003482:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <Run_Motor_Command_Calibrate+0x18>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	080034b1 	.word	0x080034b1
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034c5 	.word	0x080034c5
 8003494:	080034cf 	.word	0x080034cf
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034e3 	.word	0x080034e3
 80034a0:	080034ed 	.word	0x080034ed
 80034a4:	080034f7 	.word	0x080034f7
 80034a8:	08003501 	.word	0x08003501
 80034ac:	0800350b 	.word	0x0800350b
	{
	case 1:
		Run_Front_Position_Sync(&motor_handle, motor_command);
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	481b      	ldr	r0, [pc, #108]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034b4:	f7ff f9d0 	bl	8002858 <Run_Front_Position_Sync>
		break;
 80034b8:	e02d      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 2:
		Run_Back_Position_Sync(&motor_handle, motor_command);
 80034ba:	6839      	ldr	r1, [r7, #0]
 80034bc:	4818      	ldr	r0, [pc, #96]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034be:	f7ff fa45 	bl	800294c <Run_Back_Position_Sync>
		break;
 80034c2:	e028      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 3:
		Run_Left_Position_Sync(&motor_handle, motor_command);
 80034c4:	6839      	ldr	r1, [r7, #0]
 80034c6:	4816      	ldr	r0, [pc, #88]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034c8:	f7ff face 	bl	8002a68 <Run_Left_Position_Sync>
		break;
 80034cc:	e023      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 4:
		Run_Right_Position_Sync(&motor_handle, motor_command);
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	4813      	ldr	r0, [pc, #76]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034d2:	f7ff fb4b 	bl	8002b6c <Run_Right_Position_Sync>
		break;
 80034d6:	e01e      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 5:
		Run_Sync_All_Position(&motor_handle, motor_command);
 80034d8:	6839      	ldr	r1, [r7, #0]
 80034da:	4811      	ldr	r0, [pc, #68]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034dc:	f7ff fbce 	bl	8002c7c <Run_Sync_All_Position>
		break;
 80034e0:	e019      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 6:
		Run_Front_Velocity_Sync(&motor_handle, motor_command);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	480e      	ldr	r0, [pc, #56]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034e6:	f7ff fc71 	bl	8002dcc <Run_Front_Velocity_Sync>
		break;
 80034ea:	e014      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 7:
		Run_Back_Velocity_Sync(&motor_handle, motor_command);
 80034ec:	6839      	ldr	r1, [r7, #0]
 80034ee:	480c      	ldr	r0, [pc, #48]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034f0:	f7ff fcec 	bl	8002ecc <Run_Back_Velocity_Sync>
		break;
 80034f4:	e00f      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 8:
		Run_Left_Velocity_Sync(&motor_handle, motor_command);
 80034f6:	6839      	ldr	r1, [r7, #0]
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 80034fa:	f7ff fd7b 	bl	8002ff4 <Run_Left_Velocity_Sync>
		break;
 80034fe:	e00a      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 9:
		Run_Right_Velocity_Sync(&motor_handle, motor_command);
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	4807      	ldr	r0, [pc, #28]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 8003504:	f7ff fdfe 	bl	8003104 <Run_Right_Velocity_Sync>
		break;
 8003508:	e005      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	case 10:
		Run_Sync_All_Velocity(&motor_handle, motor_command);
 800350a:	6839      	ldr	r1, [r7, #0]
 800350c:	4804      	ldr	r0, [pc, #16]	; (8003520 <Run_Motor_Command_Calibrate+0xb0>)
 800350e:	f7ff fe87 	bl	8003220 <Run_Sync_All_Velocity>
		break;
 8003512:	e000      	b.n	8003516 <Run_Motor_Command_Calibrate+0xa6>
	default:
		break;
 8003514:	bf00      	nop
	}
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000234 	.word	0x20000234

08003524 <Init_Motor_Controller>:
#define CALIBRATE_MODE 1



void Init_Motor_Controller()
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af08      	add	r7, sp, #32
    GPIO_Output_Init(&left_direction_pin, LEFT_MOTORS_DIR_PIN_GPIO_Port, LEFT_MOTORS_DIR_PIN_Pin, GPIO_PIN_RESET);
 800352a:	2300      	movs	r3, #0
 800352c:	2204      	movs	r2, #4
 800352e:	494f      	ldr	r1, [pc, #316]	; (800366c <Init_Motor_Controller+0x148>)
 8003530:	484f      	ldr	r0, [pc, #316]	; (8003670 <Init_Motor_Controller+0x14c>)
 8003532:	f7fd ffd0 	bl	80014d6 <GPIO_Output_Init>
	GPIO_Output_Init(&right_direction_pin, RIGHT_MOTORS_DIR_PIN_GPIO_Port, RIGHT_MOTORS_DIR_PIN_Pin, GPIO_PIN_RESET);
 8003536:	2300      	movs	r3, #0
 8003538:	2208      	movs	r2, #8
 800353a:	494c      	ldr	r1, [pc, #304]	; (800366c <Init_Motor_Controller+0x148>)
 800353c:	484d      	ldr	r0, [pc, #308]	; (8003674 <Init_Motor_Controller+0x150>)
 800353e:	f7fd ffca 	bl	80014d6 <GPIO_Output_Init>
	GPIO_Output_Init(&motor_brake_pin, ALL_MOTORS_BRAKE_PIN_GPIO_Port, ALL_MOTORS_BRAKE_PIN_Pin, GPIO_PIN_SET);
 8003542:	2301      	movs	r3, #1
 8003544:	2202      	movs	r2, #2
 8003546:	494c      	ldr	r1, [pc, #304]	; (8003678 <Init_Motor_Controller+0x154>)
 8003548:	484c      	ldr	r0, [pc, #304]	; (800367c <Init_Motor_Controller+0x158>)
 800354a:	f7fd ffc4 	bl	80014d6 <GPIO_Output_Init>
	GPIO_Output_Init(&motor_enable_pin, ALL_MOTORS_ENABLE_PIN_GPIO_Port, ALL_MOTORS_ENABLE_PIN_Pin, GPIO_PIN_RESET);
 800354e:	2300      	movs	r3, #0
 8003550:	2201      	movs	r2, #1
 8003552:	4949      	ldr	r1, [pc, #292]	; (8003678 <Init_Motor_Controller+0x154>)
 8003554:	484a      	ldr	r0, [pc, #296]	; (8003680 <Init_Motor_Controller+0x15c>)
 8003556:	f7fd ffbe 	bl	80014d6 <GPIO_Output_Init>


    Init_Motor_Pins(&motor_handle.front_left_motor, 0, 0, MOTOR1_U_GPIO_Port, MOTOR1_U_Pin,
 800355a:	4b49      	ldr	r3, [pc, #292]	; (8003680 <Init_Motor_Controller+0x15c>)
 800355c:	9307      	str	r3, [sp, #28]
 800355e:	4b47      	ldr	r3, [pc, #284]	; (800367c <Init_Motor_Controller+0x158>)
 8003560:	9306      	str	r3, [sp, #24]
 8003562:	4b43      	ldr	r3, [pc, #268]	; (8003670 <Init_Motor_Controller+0x14c>)
 8003564:	9305      	str	r3, [sp, #20]
 8003566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800356a:	9304      	str	r3, [sp, #16]
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <Init_Motor_Controller+0x154>)
 800356e:	9303      	str	r3, [sp, #12]
 8003570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003574:	9302      	str	r3, [sp, #8]
 8003576:	4b40      	ldr	r3, [pc, #256]	; (8003678 <Init_Motor_Controller+0x154>)
 8003578:	9301      	str	r3, [sp, #4]
 800357a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <Init_Motor_Controller+0x154>)
 8003582:	2200      	movs	r2, #0
 8003584:	2100      	movs	r1, #0
 8003586:	483f      	ldr	r0, [pc, #252]	; (8003684 <Init_Motor_Controller+0x160>)
 8003588:	f7fe f86d 	bl	8001666 <Init_Motor_Pins>
					MOTOR1_V_GPIO_Port, MOTOR1_V_Pin, MOTOR1_W_GPIO_Port, MOTOR1_W_Pin,
					&left_direction_pin, &motor_brake_pin, &motor_enable_pin);

	Init_Motor_Pins(&motor_handle.front_right_motor, 1, 0, MOTOR2_U_GPIO_Port, MOTOR2_U_Pin,
 800358c:	4b3c      	ldr	r3, [pc, #240]	; (8003680 <Init_Motor_Controller+0x15c>)
 800358e:	9307      	str	r3, [sp, #28]
 8003590:	4b3a      	ldr	r3, [pc, #232]	; (800367c <Init_Motor_Controller+0x158>)
 8003592:	9306      	str	r3, [sp, #24]
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <Init_Motor_Controller+0x14c>)
 8003596:	9305      	str	r3, [sp, #20]
 8003598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800359c:	9304      	str	r3, [sp, #16]
 800359e:	4b33      	ldr	r3, [pc, #204]	; (800366c <Init_Motor_Controller+0x148>)
 80035a0:	9303      	str	r3, [sp, #12]
 80035a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <Init_Motor_Controller+0x154>)
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	4b31      	ldr	r3, [pc, #196]	; (8003678 <Init_Motor_Controller+0x154>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	2101      	movs	r1, #1
 80035b8:	4833      	ldr	r0, [pc, #204]	; (8003688 <Init_Motor_Controller+0x164>)
 80035ba:	f7fe f854 	bl	8001666 <Init_Motor_Pins>
					MOTOR2_V_GPIO_Port, MOTOR2_V_Pin, MOTOR2_W_GPIO_Port, MOTOR2_W_Pin,
					&left_direction_pin, &motor_brake_pin, &motor_enable_pin);

	Init_Motor_Pins(&motor_handle.back_left_motor, 2, 0, MOTOR3_U_GPIO_Port, MOTOR3_U_Pin,
 80035be:	4b30      	ldr	r3, [pc, #192]	; (8003680 <Init_Motor_Controller+0x15c>)
 80035c0:	9307      	str	r3, [sp, #28]
 80035c2:	4b2e      	ldr	r3, [pc, #184]	; (800367c <Init_Motor_Controller+0x158>)
 80035c4:	9306      	str	r3, [sp, #24]
 80035c6:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <Init_Motor_Controller+0x14c>)
 80035c8:	9305      	str	r3, [sp, #20]
 80035ca:	2340      	movs	r3, #64	; 0x40
 80035cc:	9304      	str	r3, [sp, #16]
 80035ce:	4b27      	ldr	r3, [pc, #156]	; (800366c <Init_Motor_Controller+0x148>)
 80035d0:	9303      	str	r3, [sp, #12]
 80035d2:	2380      	movs	r3, #128	; 0x80
 80035d4:	9302      	str	r3, [sp, #8]
 80035d6:	4b25      	ldr	r3, [pc, #148]	; (800366c <Init_Motor_Controller+0x148>)
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b22      	ldr	r3, [pc, #136]	; (800366c <Init_Motor_Controller+0x148>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	2102      	movs	r1, #2
 80035e6:	4829      	ldr	r0, [pc, #164]	; (800368c <Init_Motor_Controller+0x168>)
 80035e8:	f7fe f83d 	bl	8001666 <Init_Motor_Pins>
					MOTOR3_V_GPIO_Port, MOTOR3_V_Pin, MOTOR3_W_GPIO_Port, MOTOR3_W_Pin,
					&left_direction_pin, &motor_brake_pin, &motor_enable_pin);

	Init_Motor_Pins(&motor_handle.back_right_motor, 3, 0, MOTOR4_U_GPIO_Port, MOTOR4_U_Pin,
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <Init_Motor_Controller+0x15c>)
 80035ee:	9307      	str	r3, [sp, #28]
 80035f0:	4b22      	ldr	r3, [pc, #136]	; (800367c <Init_Motor_Controller+0x158>)
 80035f2:	9306      	str	r3, [sp, #24]
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <Init_Motor_Controller+0x14c>)
 80035f6:	9305      	str	r3, [sp, #20]
 80035f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <Init_Motor_Controller+0x16c>)
 8003600:	9303      	str	r3, [sp, #12]
 8003602:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003606:	9302      	str	r3, [sp, #8]
 8003608:	4b21      	ldr	r3, [pc, #132]	; (8003690 <Init_Motor_Controller+0x16c>)
 800360a:	9301      	str	r3, [sp, #4]
 800360c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	4b1f      	ldr	r3, [pc, #124]	; (8003690 <Init_Motor_Controller+0x16c>)
 8003614:	2200      	movs	r2, #0
 8003616:	2103      	movs	r1, #3
 8003618:	481e      	ldr	r0, [pc, #120]	; (8003694 <Init_Motor_Controller+0x170>)
 800361a:	f7fe f824 	bl	8001666 <Init_Motor_Pins>
					MOTOR4_V_GPIO_Port, MOTOR4_V_Pin, MOTOR4_W_GPIO_Port, MOTOR4_W_Pin,
					&left_direction_pin, &motor_brake_pin, &motor_enable_pin);


    Init_Motor_Pid_Position(&motor_handle.front_left_motor, &f_left_motor_pos_pid_params);
 800361e:	491e      	ldr	r1, [pc, #120]	; (8003698 <Init_Motor_Controller+0x174>)
 8003620:	4818      	ldr	r0, [pc, #96]	; (8003684 <Init_Motor_Controller+0x160>)
 8003622:	f7fe f87d 	bl	8001720 <Init_Motor_Pid_Position>
	Init_Motor_Pid_Position(&motor_handle.front_right_motor, &f_right_motor_pos_pid_params);
 8003626:	491d      	ldr	r1, [pc, #116]	; (800369c <Init_Motor_Controller+0x178>)
 8003628:	4817      	ldr	r0, [pc, #92]	; (8003688 <Init_Motor_Controller+0x164>)
 800362a:	f7fe f879 	bl	8001720 <Init_Motor_Pid_Position>
	Init_Motor_Pid_Position(&motor_handle.back_left_motor, &b_left_motor_pos_pid_params);
 800362e:	491c      	ldr	r1, [pc, #112]	; (80036a0 <Init_Motor_Controller+0x17c>)
 8003630:	4816      	ldr	r0, [pc, #88]	; (800368c <Init_Motor_Controller+0x168>)
 8003632:	f7fe f875 	bl	8001720 <Init_Motor_Pid_Position>
	Init_Motor_Pid_Position(&motor_handle.back_right_motor, &b_right_motor_pos_pid_params);
 8003636:	491b      	ldr	r1, [pc, #108]	; (80036a4 <Init_Motor_Controller+0x180>)
 8003638:	4816      	ldr	r0, [pc, #88]	; (8003694 <Init_Motor_Controller+0x170>)
 800363a:	f7fe f871 	bl	8001720 <Init_Motor_Pid_Position>

	Init_Motor_Pid_Velocity(&motor_handle.front_left_motor, &pid_parameters_velocity);
 800363e:	491a      	ldr	r1, [pc, #104]	; (80036a8 <Init_Motor_Controller+0x184>)
 8003640:	4810      	ldr	r0, [pc, #64]	; (8003684 <Init_Motor_Controller+0x160>)
 8003642:	f7fe f882 	bl	800174a <Init_Motor_Pid_Velocity>
	Init_Motor_Pid_Velocity(&motor_handle.front_right_motor, &pid_parameters_velocity);
 8003646:	4918      	ldr	r1, [pc, #96]	; (80036a8 <Init_Motor_Controller+0x184>)
 8003648:	480f      	ldr	r0, [pc, #60]	; (8003688 <Init_Motor_Controller+0x164>)
 800364a:	f7fe f87e 	bl	800174a <Init_Motor_Pid_Velocity>
	Init_Motor_Pid_Velocity(&motor_handle.back_left_motor, &pid_parameters_velocity);
 800364e:	4916      	ldr	r1, [pc, #88]	; (80036a8 <Init_Motor_Controller+0x184>)
 8003650:	480e      	ldr	r0, [pc, #56]	; (800368c <Init_Motor_Controller+0x168>)
 8003652:	f7fe f87a 	bl	800174a <Init_Motor_Pid_Velocity>
	Init_Motor_Pid_Velocity(&motor_handle.back_right_motor, &pid_parameters_velocity);
 8003656:	4914      	ldr	r1, [pc, #80]	; (80036a8 <Init_Motor_Controller+0x184>)
 8003658:	480e      	ldr	r0, [pc, #56]	; (8003694 <Init_Motor_Controller+0x170>)
 800365a:	f7fe f876 	bl	800174a <Init_Motor_Pid_Velocity>

    Set_I2C_Handle(&motor_handle, &hi2c2);
 800365e:	4913      	ldr	r1, [pc, #76]	; (80036ac <Init_Motor_Controller+0x188>)
 8003660:	4808      	ldr	r0, [pc, #32]	; (8003684 <Init_Motor_Controller+0x160>)
 8003662:	f7fe fed5 	bl	8002410 <Set_I2C_Handle>
}
 8003666:	bf00      	nop
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40020800 	.word	0x40020800
 8003670:	200006dc 	.word	0x200006dc
 8003674:	200006e4 	.word	0x200006e4
 8003678:	40020000 	.word	0x40020000
 800367c:	200006ec 	.word	0x200006ec
 8003680:	200006f4 	.word	0x200006f4
 8003684:	20000234 	.word	0x20000234
 8003688:	20000320 	.word	0x20000320
 800368c:	2000040c 	.word	0x2000040c
 8003690:	40020400 	.word	0x40020400
 8003694:	200004f8 	.word	0x200004f8
 8003698:	20000008 	.word	0x20000008
 800369c:	20000020 	.word	0x20000020
 80036a0:	20000038 	.word	0x20000038
 80036a4:	20000050 	.word	0x20000050
 80036a8:	20000068 	.word	0x20000068
 80036ac:	20000108 	.word	0x20000108

080036b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036b6:	f000 fc97 	bl	8003fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036ba:	f000 f837 	bl	800372c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036be:	f000 f9c7 	bl	8003a50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80036c2:	f000 f99b 	bl	80039fc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80036c6:	f000 f8fb 	bl	80038c0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80036ca:	f000 f89d 	bl	8003808 <MX_I2C1_Init>
  MX_TIM3_Init();
 80036ce:	f000 f947 	bl	8003960 <MX_TIM3_Init>
  MX_I2C2_Init();
 80036d2:	f000 f8c7 	bl	8003864 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  Init_Motor_Timer();
 80036d6:	f7fe fe73 	bl	80023c0 <Init_Motor_Timer>
  Init_Motor_Controller();
 80036da:	f7ff ff23 	bl	8003524 <Init_Motor_Controller>
  Run_Stop_Command(&motor_handle, &command_handle);
 80036de:	490d      	ldr	r1, [pc, #52]	; (8003714 <main+0x64>)
 80036e0:	480d      	ldr	r0, [pc, #52]	; (8003718 <main+0x68>)
 80036e2:	f7fe ffa6 	bl	8002632 <Run_Stop_Command>

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80036e6:	480d      	ldr	r0, [pc, #52]	; (800371c <main+0x6c>)
 80036e8:	f004 fa0a 	bl	8007b00 <HAL_TIM_Base_Start_IT>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <main+0x46>
	  Error_Handler();
 80036f2:	f000 fa49 	bl	8003b88 <Error_Handler>

    motor_ready = true;
 80036f6:	4b0a      	ldr	r3, [pc, #40]	; (8003720 <main+0x70>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]

    Init_I2C_Handle(&i2c_handle, &hi2c1); 
 80036fc:	4909      	ldr	r1, [pc, #36]	; (8003724 <main+0x74>)
 80036fe:	480a      	ldr	r0, [pc, #40]	; (8003728 <main+0x78>)
 8003700:	f7fd fe7a 	bl	80013f8 <Init_I2C_Handle>


	while(1)
	{
        
		int32_t motor_command = 0;
 8003704:	2300      	movs	r3, #0
 8003706:	607b      	str	r3, [r7, #4]
        Run_Motor_Command_Calibrate(motor_command, &command_handle);
 8003708:	4902      	ldr	r1, [pc, #8]	; (8003714 <main+0x64>)
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff feb0 	bl	8003470 <Run_Motor_Command_Calibrate>
	{
 8003710:	e7f8      	b.n	8003704 <main+0x54>
 8003712:	bf00      	nop
 8003714:	20000000 	.word	0x20000000
 8003718:	20000234 	.word	0x20000234
 800371c:	200001a4 	.word	0x200001a4
 8003720:	200006fc 	.word	0x200006fc
 8003724:	200000b4 	.word	0x200000b4
 8003728:	200005e8 	.word	0x200005e8

0800372c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b094      	sub	sp, #80	; 0x50
 8003730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003732:	f107 031c 	add.w	r3, r7, #28
 8003736:	2234      	movs	r2, #52	; 0x34
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f005 f8ca 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003740:	f107 0308 	add.w	r3, r7, #8
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
 800374c:	60da      	str	r2, [r3, #12]
 800374e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	2300      	movs	r3, #0
 8003752:	607b      	str	r3, [r7, #4]
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <SystemClock_Config+0xd4>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4a29      	ldr	r2, [pc, #164]	; (8003800 <SystemClock_Config+0xd4>)
 800375a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375e:	6413      	str	r3, [r2, #64]	; 0x40
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <SystemClock_Config+0xd4>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800376c:	2300      	movs	r3, #0
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4b24      	ldr	r3, [pc, #144]	; (8003804 <SystemClock_Config+0xd8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003778:	4a22      	ldr	r2, [pc, #136]	; (8003804 <SystemClock_Config+0xd8>)
 800377a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b20      	ldr	r3, [pc, #128]	; (8003804 <SystemClock_Config+0xd8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003788:	603b      	str	r3, [r7, #0]
 800378a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800378c:	2302      	movs	r3, #2
 800378e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003790:	2301      	movs	r3, #1
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003794:	2310      	movs	r3, #16
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003798:	2302      	movs	r3, #2
 800379a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800379c:	2300      	movs	r3, #0
 800379e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80037a0:	2310      	movs	r3, #16
 80037a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80037a4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80037aa:	2304      	movs	r3, #4
 80037ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80037ae:	2302      	movs	r3, #2
 80037b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80037b2:	2302      	movs	r3, #2
 80037b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037b6:	f107 031c 	add.w	r3, r7, #28
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 feb2 	bl	8007524 <HAL_RCC_OscConfig>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80037c6:	f000 f9df 	bl	8003b88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ca:	230f      	movs	r3, #15
 80037cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ce:	2302      	movs	r3, #2
 80037d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037dc:	2300      	movs	r3, #0
 80037de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037e0:	f107 0308 	add.w	r3, r7, #8
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 fb52 	bl	8006e90 <HAL_RCC_ClockConfig>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80037f2:	f000 f9c9 	bl	8003b88 <Error_Handler>
  }
}
 80037f6:	bf00      	nop
 80037f8:	3750      	adds	r7, #80	; 0x50
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40007000 	.word	0x40007000

08003808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <MX_I2C1_Init+0x50>)
 800380e:	4a13      	ldr	r2, [pc, #76]	; (800385c <MX_I2C1_Init+0x54>)
 8003810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <MX_I2C1_Init+0x50>)
 8003814:	4a12      	ldr	r2, [pc, #72]	; (8003860 <MX_I2C1_Init+0x58>)
 8003816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <MX_I2C1_Init+0x50>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_I2C1_Init+0x50>)
 8003820:	2224      	movs	r2, #36	; 0x24
 8003822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <MX_I2C1_Init+0x50>)
 8003826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800382a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <MX_I2C1_Init+0x50>)
 800382e:	2200      	movs	r2, #0
 8003830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003832:	4b09      	ldr	r3, [pc, #36]	; (8003858 <MX_I2C1_Init+0x50>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <MX_I2C1_Init+0x50>)
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_I2C1_Init+0x50>)
 8003840:	2200      	movs	r2, #0
 8003842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003844:	4804      	ldr	r0, [pc, #16]	; (8003858 <MX_I2C1_Init+0x50>)
 8003846:	f001 f86f 	bl	8004928 <HAL_I2C_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003850:	f000 f99a 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200000b4 	.word	0x200000b4
 800385c:	40005400 	.word	0x40005400
 8003860:	000186a0 	.word	0x000186a0

08003864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <MX_I2C2_Init+0x50>)
 800386a:	4a13      	ldr	r2, [pc, #76]	; (80038b8 <MX_I2C2_Init+0x54>)
 800386c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MX_I2C2_Init+0x50>)
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <MX_I2C2_Init+0x58>)
 8003872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <MX_I2C2_Init+0x50>)
 8003876:	2200      	movs	r2, #0
 8003878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <MX_I2C2_Init+0x50>)
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_I2C2_Init+0x50>)
 8003882:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003886:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <MX_I2C2_Init+0x50>)
 800388a:	2200      	movs	r2, #0
 800388c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_I2C2_Init+0x50>)
 8003890:	2200      	movs	r2, #0
 8003892:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003894:	4b07      	ldr	r3, [pc, #28]	; (80038b4 <MX_I2C2_Init+0x50>)
 8003896:	2200      	movs	r2, #0
 8003898:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_I2C2_Init+0x50>)
 800389c:	2200      	movs	r2, #0
 800389e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80038a0:	4804      	ldr	r0, [pc, #16]	; (80038b4 <MX_I2C2_Init+0x50>)
 80038a2:	f001 f841 	bl	8004928 <HAL_I2C_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80038ac:	f000 f96c 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80038b0:	bf00      	nop
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000108 	.word	0x20000108
 80038b8:	40005800 	.word	0x40005800
 80038bc:	000186a0 	.word	0x000186a0

080038c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c6:	f107 0308 	add.w	r3, r7, #8
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d4:	463b      	mov	r3, r7
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <MX_TIM1_Init+0x98>)
 80038de:	4a1f      	ldr	r2, [pc, #124]	; (800395c <MX_TIM1_Init+0x9c>)
 80038e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <MX_TIM1_Init+0x98>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <MX_TIM1_Init+0x98>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_TIM1_Init+0x98>)
 80038f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_TIM1_Init+0x98>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80038fc:	4b16      	ldr	r3, [pc, #88]	; (8003958 <MX_TIM1_Init+0x98>)
 80038fe:	2200      	movs	r2, #0
 8003900:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <MX_TIM1_Init+0x98>)
 8003904:	2200      	movs	r2, #0
 8003906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003908:	4813      	ldr	r0, [pc, #76]	; (8003958 <MX_TIM1_Init+0x98>)
 800390a:	f004 f8a9 	bl	8007a60 <HAL_TIM_Base_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003914:	f000 f938 	bl	8003b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003918:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800391c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4619      	mov	r1, r3
 8003924:	480c      	ldr	r0, [pc, #48]	; (8003958 <MX_TIM1_Init+0x98>)
 8003926:	f004 fa4b 	bl	8007dc0 <HAL_TIM_ConfigClockSource>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003930:	f000 f92a 	bl	8003b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003934:	2300      	movs	r3, #0
 8003936:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800393c:	463b      	mov	r3, r7
 800393e:	4619      	mov	r1, r3
 8003940:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_TIM1_Init+0x98>)
 8003942:	f004 fc73 	bl	800822c <HAL_TIMEx_MasterConfigSynchronization>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800394c:	f000 f91c 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	2000015c 	.word	0x2000015c
 800395c:	40010000 	.word	0x40010000

08003960 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003966:	f107 0308 	add.w	r3, r7, #8
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003974:	463b      	mov	r3, r7
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <MX_TIM3_Init+0x94>)
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <MX_TIM3_Init+0x98>)
 8003980:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003982:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <MX_TIM3_Init+0x94>)
 8003984:	2200      	movs	r2, #0
 8003986:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <MX_TIM3_Init+0x94>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <MX_TIM3_Init+0x94>)
 8003990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003994:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <MX_TIM3_Init+0x94>)
 8003998:	2200      	movs	r2, #0
 800399a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800399c:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <MX_TIM3_Init+0x94>)
 800399e:	2200      	movs	r2, #0
 80039a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039a2:	4814      	ldr	r0, [pc, #80]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039a4:	f004 f85c 	bl	8007a60 <HAL_TIM_Base_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80039ae:	f000 f8eb 	bl	8003b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039b8:	f107 0308 	add.w	r3, r7, #8
 80039bc:	4619      	mov	r1, r3
 80039be:	480d      	ldr	r0, [pc, #52]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039c0:	f004 f9fe 	bl	8007dc0 <HAL_TIM_ConfigClockSource>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80039ca:	f000 f8dd 	bl	8003b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039d6:	463b      	mov	r3, r7
 80039d8:	4619      	mov	r1, r3
 80039da:	4806      	ldr	r0, [pc, #24]	; (80039f4 <MX_TIM3_Init+0x94>)
 80039dc:	f004 fc26 	bl	800822c <HAL_TIMEx_MasterConfigSynchronization>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80039e6:	f000 f8cf 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80039ea:	bf00      	nop
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200001a4 	.word	0x200001a4
 80039f8:	40000400 	.word	0x40000400

080039fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a02:	4a12      	ldr	r2, [pc, #72]	; (8003a4c <MX_USART2_UART_Init+0x50>)
 8003a04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a0e:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a22:	220c      	movs	r2, #12
 8003a24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a32:	4805      	ldr	r0, [pc, #20]	; (8003a48 <MX_USART2_UART_Init+0x4c>)
 8003a34:	f004 fc8a 	bl	800834c <HAL_UART_Init>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a3e:	f000 f8a3 	bl	8003b88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200001ec 	.word	0x200001ec
 8003a4c:	40004400 	.word	0x40004400

08003a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	; 0x28
 8003a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	609a      	str	r2, [r3, #8]
 8003a62:	60da      	str	r2, [r3, #12]
 8003a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	4a42      	ldr	r2, [pc, #264]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003a70:	f043 0304 	orr.w	r3, r3, #4
 8003a74:	6313      	str	r3, [r2, #48]	; 0x30
 8003a76:	4b40      	ldr	r3, [pc, #256]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	f003 0304 	and.w	r3, r3, #4
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b3c      	ldr	r3, [pc, #240]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a90:	6313      	str	r3, [r2, #48]	; 0x30
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	4b35      	ldr	r3, [pc, #212]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	4a34      	ldr	r2, [pc, #208]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6313      	str	r3, [r2, #48]	; 0x30
 8003aae:	4b32      	ldr	r3, [pc, #200]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003ac4:	f043 0302 	orr.w	r3, r3, #2
 8003ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aca:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <MX_GPIO_Init+0x128>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEFT_MOTORS_DIR_PIN_Pin|RIGHT_MOTORS_DIR_PIN_Pin, GPIO_PIN_RESET);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	210c      	movs	r1, #12
 8003ada:	4828      	ldr	r0, [pc, #160]	; (8003b7c <MX_GPIO_Init+0x12c>)
 8003adc:	f000 ff0a 	bl	80048f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ALL_MOTORS_ENABLE_PIN_Pin|ALL_MOTORS_BRAKE_PIN_Pin, GPIO_PIN_SET);
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	4826      	ldr	r0, [pc, #152]	; (8003b80 <MX_GPIO_Init+0x130>)
 8003ae6:	f000 ff05 	bl	80048f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LEFT_MOTORS_DIR_PIN_Pin RIGHT_MOTORS_DIR_PIN_Pin */
  GPIO_InitStruct.Pin = LEFT_MOTORS_DIR_PIN_Pin|RIGHT_MOTORS_DIR_PIN_Pin;
 8003aea:	230c      	movs	r3, #12
 8003aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aee:	2301      	movs	r3, #1
 8003af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	2300      	movs	r3, #0
 8003af8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	4619      	mov	r1, r3
 8003b00:	481e      	ldr	r0, [pc, #120]	; (8003b7c <MX_GPIO_Init+0x12c>)
 8003b02:	f000 fc57 	bl	80043b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ALL_MOTORS_ENABLE_PIN_Pin ALL_MOTORS_BRAKE_PIN_Pin */
  GPIO_InitStruct.Pin = ALL_MOTORS_ENABLE_PIN_Pin|ALL_MOTORS_BRAKE_PIN_Pin;
 8003b06:	2303      	movs	r3, #3
 8003b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b16:	f107 0314 	add.w	r3, r7, #20
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4818      	ldr	r0, [pc, #96]	; (8003b80 <MX_GPIO_Init+0x130>)
 8003b1e:	f000 fc49 	bl	80043b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR4_W_Pin MOTOR4_V_Pin MOTOR4_U_Pin */
  GPIO_InitStruct.Pin = MOTOR4_W_Pin|MOTOR4_V_Pin|MOTOR4_U_Pin;
 8003b22:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	4619      	mov	r1, r3
 8003b36:	4813      	ldr	r0, [pc, #76]	; (8003b84 <MX_GPIO_Init+0x134>)
 8003b38:	f000 fc3c 	bl	80043b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR3_W_Pin MOTOR3_V_Pin MOTOR3_U_Pin MOTOR2_W_Pin */
  GPIO_InitStruct.Pin = MOTOR3_W_Pin|MOTOR3_V_Pin|MOTOR3_U_Pin|MOTOR2_W_Pin;
 8003b3c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b4a:	f107 0314 	add.w	r3, r7, #20
 8003b4e:	4619      	mov	r1, r3
 8003b50:	480a      	ldr	r0, [pc, #40]	; (8003b7c <MX_GPIO_Init+0x12c>)
 8003b52:	f000 fc2f 	bl	80043b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR2_V_Pin MOTOR2_U_Pin MOTOR1_W_Pin MOTOR1_V_Pin
                           MOTOR1_U_Pin */
  GPIO_InitStruct.Pin = MOTOR2_V_Pin|MOTOR2_U_Pin|MOTOR1_W_Pin|MOTOR1_V_Pin
 8003b56:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003b5a:	617b      	str	r3, [r7, #20]
                          |MOTOR1_U_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	f107 0314 	add.w	r3, r7, #20
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4805      	ldr	r0, [pc, #20]	; (8003b80 <MX_GPIO_Init+0x130>)
 8003b6c:	f000 fc22 	bl	80043b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b70:	bf00      	nop
 8003b72:	3728      	adds	r7, #40	; 0x28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020800 	.word	0x40020800
 8003b80:	40020000 	.word	0x40020000
 8003b84:	40020400 	.word	0x40020400

08003b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	Run_Stop_Command(&motor_handle, &command_handle);
 8003b8c:	4903      	ldr	r1, [pc, #12]	; (8003b9c <Error_Handler+0x14>)
 8003b8e:	4804      	ldr	r0, [pc, #16]	; (8003ba0 <Error_Handler+0x18>)
 8003b90:	f7fe fd4f 	bl	8002632 <Run_Stop_Command>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b94:	b672      	cpsid	i
}
 8003b96:	bf00      	nop
	__disable_irq();
	while(1)
 8003b98:	e7fe      	b.n	8003b98 <Error_Handler+0x10>
 8003b9a:	bf00      	nop
 8003b9c:	20000000 	.word	0x20000000
 8003ba0:	20000234 	.word	0x20000234

08003ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_MspInit+0x4c>)
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	4a0f      	ldr	r2, [pc, #60]	; (8003bf0 <HAL_MspInit+0x4c>)
 8003bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <HAL_MspInit+0x4c>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_MspInit+0x4c>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_MspInit+0x4c>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_MspInit+0x4c>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003be2:	2004      	movs	r0, #4
 8003be4:	f000 fb66 	bl	80042b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003be8:	bf00      	nop
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_I2C_MspInit+0x148>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d13c      	bne.n	8003c90 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	4b49      	ldr	r3, [pc, #292]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	4a48      	ldr	r2, [pc, #288]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	6313      	str	r3, [r2, #48]	; 0x30
 8003c26:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c32:	23c0      	movs	r3, #192	; 0xc0
 8003c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c36:	2312      	movs	r3, #18
 8003c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c42:	2304      	movs	r3, #4
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c46:	f107 031c 	add.w	r3, r7, #28
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	483d      	ldr	r0, [pc, #244]	; (8003d44 <HAL_I2C_MspInit+0x150>)
 8003c4e:	f000 fbb1 	bl	80043b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
 8003c56:	4b3a      	ldr	r3, [pc, #232]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a39      	ldr	r2, [pc, #228]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003c5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b37      	ldr	r3, [pc, #220]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	201f      	movs	r0, #31
 8003c74:	f000 fb29 	bl	80042ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c78:	201f      	movs	r0, #31
 8003c7a:	f000 fb42 	bl	8004302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2020      	movs	r0, #32
 8003c84:	f000 fb21 	bl	80042ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003c88:	2020      	movs	r0, #32
 8003c8a:	f000 fb3a 	bl	8004302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003c8e:	e050      	b.n	8003d32 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2c      	ldr	r2, [pc, #176]	; (8003d48 <HAL_I2C_MspInit+0x154>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d14b      	bne.n	8003d32 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b28      	ldr	r3, [pc, #160]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a27      	ldr	r2, [pc, #156]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003ca4:	f043 0302 	orr.w	r3, r3, #2
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cd8:	2312      	movs	r3, #18
 8003cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ce8:	f107 031c 	add.w	r3, r7, #28
 8003cec:	4619      	mov	r1, r3
 8003cee:	4815      	ldr	r0, [pc, #84]	; (8003d44 <HAL_I2C_MspInit+0x150>)
 8003cf0:	f000 fb60 	bl	80043b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cfa:	2312      	movs	r3, #18
 8003cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d02:	2303      	movs	r3, #3
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d06:	2304      	movs	r3, #4
 8003d08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0a:	f107 031c 	add.w	r3, r7, #28
 8003d0e:	4619      	mov	r1, r3
 8003d10:	480e      	ldr	r0, [pc, #56]	; (8003d4c <HAL_I2C_MspInit+0x158>)
 8003d12:	f000 fb4f 	bl	80043b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
 8003d26:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_I2C_MspInit+0x14c>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
}
 8003d32:	bf00      	nop
 8003d34:	3730      	adds	r7, #48	; 0x30
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40005400 	.word	0x40005400
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40005800 	.word	0x40005800
 8003d4c:	40020800 	.word	0x40020800

08003d50 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a18      	ldr	r2, [pc, #96]	; (8003dc0 <HAL_I2C_MspDeInit+0x70>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d114      	bne.n	8003d8c <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <HAL_I2C_MspDeInit+0x74>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_I2C_MspDeInit+0x74>)
 8003d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003d6e:	2140      	movs	r1, #64	; 0x40
 8003d70:	4815      	ldr	r0, [pc, #84]	; (8003dc8 <HAL_I2C_MspDeInit+0x78>)
 8003d72:	f000 fcb3 	bl	80046dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003d76:	2180      	movs	r1, #128	; 0x80
 8003d78:	4813      	ldr	r0, [pc, #76]	; (8003dc8 <HAL_I2C_MspDeInit+0x78>)
 8003d7a:	f000 fcaf 	bl	80046dc <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003d7e:	201f      	movs	r0, #31
 8003d80:	f000 facd 	bl	800431e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8003d84:	2020      	movs	r0, #32
 8003d86:	f000 faca 	bl	800431e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003d8a:	e014      	b.n	8003db6 <HAL_I2C_MspDeInit+0x66>
  else if(hi2c->Instance==I2C2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <HAL_I2C_MspDeInit+0x7c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d10f      	bne.n	8003db6 <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_I2C_MspDeInit+0x74>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <HAL_I2C_MspDeInit+0x74>)
 8003d9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8003da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003da6:	4808      	ldr	r0, [pc, #32]	; (8003dc8 <HAL_I2C_MspDeInit+0x78>)
 8003da8:	f000 fc98 	bl	80046dc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8003dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db0:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <HAL_I2C_MspDeInit+0x80>)
 8003db2:	f000 fc93 	bl	80046dc <HAL_GPIO_DeInit>
}
 8003db6:	bf00      	nop
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	40005400 	.word	0x40005400
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	40005800 	.word	0x40005800
 8003dd0:	40020800 	.word	0x40020800

08003dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <HAL_TIM_Base_MspInit+0x70>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b17      	ldr	r3, [pc, #92]	; (8003e48 <HAL_TIM_Base_MspInit+0x74>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIM_Base_MspInit+0x74>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6453      	str	r3, [r2, #68]	; 0x44
 8003df6:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <HAL_TIM_Base_MspInit+0x74>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e02:	e01a      	b.n	8003e3a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <HAL_TIM_Base_MspInit+0x78>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d115      	bne.n	8003e3a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <HAL_TIM_Base_MspInit+0x74>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4a0c      	ldr	r2, [pc, #48]	; (8003e48 <HAL_TIM_Base_MspInit+0x74>)
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_TIM_Base_MspInit+0x74>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	60bb      	str	r3, [r7, #8]
 8003e28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 1);
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	201d      	movs	r0, #29
 8003e30:	f000 fa4b 	bl	80042ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e34:	201d      	movs	r0, #29
 8003e36:	f000 fa64 	bl	8004302 <HAL_NVIC_EnableIRQ>
}
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	40010000 	.word	0x40010000
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40000400 	.word	0x40000400

08003e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08a      	sub	sp, #40	; 0x28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e58:	f107 0314 	add.w	r3, r7, #20
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	605a      	str	r2, [r3, #4]
 8003e62:	609a      	str	r2, [r3, #8]
 8003e64:	60da      	str	r2, [r3, #12]
 8003e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a19      	ldr	r2, [pc, #100]	; (8003ed4 <HAL_UART_MspInit+0x84>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d12b      	bne.n	8003eca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	613b      	str	r3, [r7, #16]
 8003e76:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_UART_MspInit+0x88>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	4a17      	ldr	r2, [pc, #92]	; (8003ed8 <HAL_UART_MspInit+0x88>)
 8003e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e80:	6413      	str	r3, [r2, #64]	; 0x40
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_UART_MspInit+0x88>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_UART_MspInit+0x88>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	4a10      	ldr	r2, [pc, #64]	; (8003ed8 <HAL_UART_MspInit+0x88>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_UART_MspInit+0x88>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003eaa:	230c      	movs	r3, #12
 8003eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4805      	ldr	r0, [pc, #20]	; (8003edc <HAL_UART_MspInit+0x8c>)
 8003ec6:	f000 fa75 	bl	80043b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003eca:	bf00      	nop
 8003ecc:	3728      	adds	r7, #40	; 0x28
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40004400 	.word	0x40004400
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	40020000 	.word	0x40020000

08003ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <NMI_Handler+0x4>

08003ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eea:	e7fe      	b.n	8003eea <HardFault_Handler+0x4>

08003eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ef0:	e7fe      	b.n	8003ef0 <MemManage_Handler+0x4>

08003ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef6:	e7fe      	b.n	8003ef6 <BusFault_Handler+0x4>

08003ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003efc:	e7fe      	b.n	8003efc <UsageFault_Handler+0x4>

08003efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efe:	b480      	push	{r7}
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2c:	f000 f8ae 	bl	800408c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f38:	4802      	ldr	r0, [pc, #8]	; (8003f44 <TIM3_IRQHandler+0x10>)
 8003f3a:	f003 fe51 	bl	8007be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	200001a4 	.word	0x200001a4

08003f48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003f4c:	4802      	ldr	r0, [pc, #8]	; (8003f58 <I2C1_EV_IRQHandler+0x10>)
 8003f4e:	f001 f88d 	bl	800506c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200000b4 	.word	0x200000b4

08003f5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f60:	4802      	ldr	r0, [pc, #8]	; (8003f6c <I2C1_ER_IRQHandler+0x10>)
 8003f62:	f001 f9d6 	bl	8005312 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	200000b4 	.word	0x200000b4

08003f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <SystemInit+0x20>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <SystemInit+0x20>)
 8003f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f84:	bf00      	nop
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f98:	f7ff ffea 	bl	8003f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f9c:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f9e:	490d      	ldr	r1, [pc, #52]	; (8003fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	; (8003fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fa4:	e002      	b.n	8003fac <LoopCopyDataInit>

08003fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003faa:	3304      	adds	r3, #4

08003fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fb0:	d3f9      	bcc.n	8003fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fb4:	4c0a      	ldr	r4, [pc, #40]	; (8003fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fb8:	e001      	b.n	8003fbe <LoopFillZerobss>

08003fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fbc:	3204      	adds	r2, #4

08003fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fc0:	d3fb      	bcc.n	8003fba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003fc2:	f004 fc8f 	bl	80088e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fc6:	f7ff fb73 	bl	80036b0 <main>
  bx  lr    
 8003fca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fd4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003fd8:	08008988 	.word	0x08008988
  ldr r2, =_sbss
 8003fdc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003fe0:	20000704 	.word	0x20000704

08003fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fe4:	e7fe      	b.n	8003fe4 <ADC_IRQHandler>
	...

08003fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_Init+0x40>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <HAL_Init+0x40>)
 8003ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_Init+0x40>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_Init+0x40>)
 8003ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004004:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_Init+0x40>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_Init+0x40>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004010:	2003      	movs	r0, #3
 8004012:	f000 f94f 	bl	80042b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004016:	2000      	movs	r0, #0
 8004018:	f000 f808 	bl	800402c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800401c:	f7ff fdc2 	bl	8003ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40023c00 	.word	0x40023c00

0800402c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004034:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_InitTick+0x54>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_InitTick+0x58>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	4619      	mov	r1, r3
 800403e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004042:	fbb3 f3f1 	udiv	r3, r3, r1
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f975 	bl	800433a <HAL_SYSTICK_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e00e      	b.n	8004078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d80a      	bhi.n	8004076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004060:	2200      	movs	r2, #0
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004068:	f000 f92f 	bl	80042ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800406c:	4a06      	ldr	r2, [pc, #24]	; (8004088 <HAL_InitTick+0x5c>)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	e000      	b.n	8004078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
}
 8004078:	4618      	mov	r0, r3
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000080 	.word	0x20000080
 8004084:	20000088 	.word	0x20000088
 8004088:	20000084 	.word	0x20000084

0800408c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x20>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_IncTick+0x24>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4413      	add	r3, r2
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <HAL_IncTick+0x24>)
 800409e:	6013      	str	r3, [r2, #0]
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000088 	.word	0x20000088
 80040b0:	20000700 	.word	0x20000700

080040b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  return uwTick;
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_GetTick+0x14>)
 80040ba:	681b      	ldr	r3, [r3, #0]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	20000700 	.word	0x20000700

080040cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040dc:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e8:	4013      	ands	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040fe:	4a04      	ldr	r2, [pc, #16]	; (8004110 <__NVIC_SetPriorityGrouping+0x44>)
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	60d3      	str	r3, [r2, #12]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	e000ed00 	.word	0xe000ed00

08004114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <__NVIC_GetPriorityGrouping+0x18>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	f003 0307 	and.w	r3, r3, #7
}
 8004122:	4618      	mov	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	2b00      	cmp	r3, #0
 8004140:	db0b      	blt.n	800415a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004142:	79fb      	ldrb	r3, [r7, #7]
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	4907      	ldr	r1, [pc, #28]	; (8004168 <__NVIC_EnableIRQ+0x38>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2001      	movs	r0, #1
 8004152:	fa00 f202 	lsl.w	r2, r0, r2
 8004156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	e000e100 	.word	0xe000e100

0800416c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	2b00      	cmp	r3, #0
 800417c:	db12      	blt.n	80041a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	490a      	ldr	r1, [pc, #40]	; (80041b0 <__NVIC_DisableIRQ+0x44>)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	095b      	lsrs	r3, r3, #5
 800418c:	2001      	movs	r0, #1
 800418e:	fa00 f202 	lsl.w	r2, r0, r2
 8004192:	3320      	adds	r3, #32
 8004194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004198:	f3bf 8f4f 	dsb	sy
}
 800419c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800419e:	f3bf 8f6f 	isb	sy
}
 80041a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100

080041b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	6039      	str	r1, [r7, #0]
 80041be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	db0a      	blt.n	80041de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	490c      	ldr	r1, [pc, #48]	; (8004200 <__NVIC_SetPriority+0x4c>)
 80041ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d2:	0112      	lsls	r2, r2, #4
 80041d4:	b2d2      	uxtb	r2, r2
 80041d6:	440b      	add	r3, r1
 80041d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041dc:	e00a      	b.n	80041f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	4908      	ldr	r1, [pc, #32]	; (8004204 <__NVIC_SetPriority+0x50>)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	3b04      	subs	r3, #4
 80041ec:	0112      	lsls	r2, r2, #4
 80041ee:	b2d2      	uxtb	r2, r2
 80041f0:	440b      	add	r3, r1
 80041f2:	761a      	strb	r2, [r3, #24]
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	e000e100 	.word	0xe000e100
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f1c3 0307 	rsb	r3, r3, #7
 8004222:	2b04      	cmp	r3, #4
 8004224:	bf28      	it	cs
 8004226:	2304      	movcs	r3, #4
 8004228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	3304      	adds	r3, #4
 800422e:	2b06      	cmp	r3, #6
 8004230:	d902      	bls.n	8004238 <NVIC_EncodePriority+0x30>
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3b03      	subs	r3, #3
 8004236:	e000      	b.n	800423a <NVIC_EncodePriority+0x32>
 8004238:	2300      	movs	r3, #0
 800423a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800423c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	401a      	ands	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004250:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	fa01 f303 	lsl.w	r3, r1, r3
 800425a:	43d9      	mvns	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	4313      	orrs	r3, r2
         );
}
 8004262:	4618      	mov	r0, r3
 8004264:	3724      	adds	r7, #36	; 0x24
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3b01      	subs	r3, #1
 800427c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004280:	d301      	bcc.n	8004286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004282:	2301      	movs	r3, #1
 8004284:	e00f      	b.n	80042a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <SysTick_Config+0x40>)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3b01      	subs	r3, #1
 800428c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800428e:	210f      	movs	r1, #15
 8004290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004294:	f7ff ff8e 	bl	80041b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004298:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <SysTick_Config+0x40>)
 800429a:	2200      	movs	r2, #0
 800429c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800429e:	4b04      	ldr	r3, [pc, #16]	; (80042b0 <SysTick_Config+0x40>)
 80042a0:	2207      	movs	r2, #7
 80042a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	e000e010 	.word	0xe000e010

080042b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff05 	bl	80040cc <__NVIC_SetPriorityGrouping>
}
 80042c2:	bf00      	nop
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b086      	sub	sp, #24
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4603      	mov	r3, r0
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042dc:	f7ff ff1a 	bl	8004114 <__NVIC_GetPriorityGrouping>
 80042e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68b9      	ldr	r1, [r7, #8]
 80042e6:	6978      	ldr	r0, [r7, #20]
 80042e8:	f7ff ff8e 	bl	8004208 <NVIC_EncodePriority>
 80042ec:	4602      	mov	r2, r0
 80042ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff5d 	bl	80041b4 <__NVIC_SetPriority>
}
 80042fa:	bf00      	nop
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b082      	sub	sp, #8
 8004306:	af00      	add	r7, sp, #0
 8004308:	4603      	mov	r3, r0
 800430a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800430c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff0d 	bl	8004130 <__NVIC_EnableIRQ>
}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff1d 	bl	800416c <__NVIC_DisableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ff94 	bl	8004270 <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d004      	beq.n	8004370 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2280      	movs	r2, #128	; 0x80
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e00c      	b.n	800438a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2205      	movs	r2, #5
 8004374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043a4:	b2db      	uxtb	r3, r3
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	e165      	b.n	800469c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043d0:	2201      	movs	r2, #1
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	f040 8154 	bne.w	8004696 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d005      	beq.n	8004406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004402:	2b02      	cmp	r3, #2
 8004404:	d130      	bne.n	8004468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	2203      	movs	r2, #3
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800443c:	2201      	movs	r2, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 0201 	and.w	r2, r3, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b03      	cmp	r3, #3
 8004472:	d017      	beq.n	80044a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4313      	orrs	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d123      	bne.n	80044f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	08da      	lsrs	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3208      	adds	r2, #8
 80044b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	220f      	movs	r2, #15
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	08da      	lsrs	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3208      	adds	r2, #8
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	2203      	movs	r2, #3
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43db      	mvns	r3, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4013      	ands	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 0203 	and.w	r2, r3, #3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	fa02 f303 	lsl.w	r3, r2, r3
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80ae 	beq.w	8004696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <HAL_GPIO_Init+0x300>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	4a5c      	ldr	r2, [pc, #368]	; (80046b4 <HAL_GPIO_Init+0x300>)
 8004544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004548:	6453      	str	r3, [r2, #68]	; 0x44
 800454a:	4b5a      	ldr	r3, [pc, #360]	; (80046b4 <HAL_GPIO_Init+0x300>)
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004556:	4a58      	ldr	r2, [pc, #352]	; (80046b8 <HAL_GPIO_Init+0x304>)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	089b      	lsrs	r3, r3, #2
 800455c:	3302      	adds	r3, #2
 800455e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	220f      	movs	r2, #15
 800456e:	fa02 f303 	lsl.w	r3, r2, r3
 8004572:	43db      	mvns	r3, r3
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	4013      	ands	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a4f      	ldr	r2, [pc, #316]	; (80046bc <HAL_GPIO_Init+0x308>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d025      	beq.n	80045ce <HAL_GPIO_Init+0x21a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a4e      	ldr	r2, [pc, #312]	; (80046c0 <HAL_GPIO_Init+0x30c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <HAL_GPIO_Init+0x216>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a4d      	ldr	r2, [pc, #308]	; (80046c4 <HAL_GPIO_Init+0x310>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d019      	beq.n	80045c6 <HAL_GPIO_Init+0x212>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <HAL_GPIO_Init+0x314>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_GPIO_Init+0x20e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a4b      	ldr	r2, [pc, #300]	; (80046cc <HAL_GPIO_Init+0x318>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00d      	beq.n	80045be <HAL_GPIO_Init+0x20a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a4a      	ldr	r2, [pc, #296]	; (80046d0 <HAL_GPIO_Init+0x31c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d007      	beq.n	80045ba <HAL_GPIO_Init+0x206>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a49      	ldr	r2, [pc, #292]	; (80046d4 <HAL_GPIO_Init+0x320>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_GPIO_Init+0x202>
 80045b2:	2306      	movs	r3, #6
 80045b4:	e00c      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045b6:	2307      	movs	r3, #7
 80045b8:	e00a      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045ba:	2305      	movs	r3, #5
 80045bc:	e008      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045be:	2304      	movs	r3, #4
 80045c0:	e006      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045c2:	2303      	movs	r3, #3
 80045c4:	e004      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e002      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <HAL_GPIO_Init+0x21c>
 80045ce:	2300      	movs	r3, #0
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	f002 0203 	and.w	r2, r2, #3
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	4093      	lsls	r3, r2
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045e0:	4935      	ldr	r1, [pc, #212]	; (80046b8 <HAL_GPIO_Init+0x304>)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	089b      	lsrs	r3, r3, #2
 80045e6:	3302      	adds	r3, #2
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ee:	4b3a      	ldr	r3, [pc, #232]	; (80046d8 <HAL_GPIO_Init+0x324>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004612:	4a31      	ldr	r2, [pc, #196]	; (80046d8 <HAL_GPIO_Init+0x324>)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004618:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <HAL_GPIO_Init+0x324>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800463c:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <HAL_GPIO_Init+0x324>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_GPIO_Init+0x324>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4313      	orrs	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004666:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_GPIO_Init+0x324>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_GPIO_Init+0x324>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <HAL_GPIO_Init+0x324>)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3301      	adds	r3, #1
 800469a:	61fb      	str	r3, [r7, #28]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b0f      	cmp	r3, #15
 80046a0:	f67f ae96 	bls.w	80043d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	3724      	adds	r7, #36	; 0x24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40013800 	.word	0x40013800
 80046bc:	40020000 	.word	0x40020000
 80046c0:	40020400 	.word	0x40020400
 80046c4:	40020800 	.word	0x40020800
 80046c8:	40020c00 	.word	0x40020c00
 80046cc:	40021000 	.word	0x40021000
 80046d0:	40021400 	.word	0x40021400
 80046d4:	40021800 	.word	0x40021800
 80046d8:	40013c00 	.word	0x40013c00

080046dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e0c7      	b.n	8004888 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f8:	2201      	movs	r2, #1
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4013      	ands	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	429a      	cmp	r2, r3
 8004710:	f040 80b7 	bne.w	8004882 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004714:	4a62      	ldr	r2, [pc, #392]	; (80048a0 <HAL_GPIO_DeInit+0x1c4>)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	089b      	lsrs	r3, r3, #2
 800471a:	3302      	adds	r3, #2
 800471c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004720:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	220f      	movs	r2, #15
 800472c:	fa02 f303 	lsl.w	r3, r2, r3
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a5a      	ldr	r2, [pc, #360]	; (80048a4 <HAL_GPIO_DeInit+0x1c8>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d025      	beq.n	800478a <HAL_GPIO_DeInit+0xae>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a59      	ldr	r2, [pc, #356]	; (80048a8 <HAL_GPIO_DeInit+0x1cc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01f      	beq.n	8004786 <HAL_GPIO_DeInit+0xaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a58      	ldr	r2, [pc, #352]	; (80048ac <HAL_GPIO_DeInit+0x1d0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_DeInit+0xa6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a57      	ldr	r2, [pc, #348]	; (80048b0 <HAL_GPIO_DeInit+0x1d4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_DeInit+0xa2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a56      	ldr	r2, [pc, #344]	; (80048b4 <HAL_GPIO_DeInit+0x1d8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_DeInit+0x9e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a55      	ldr	r2, [pc, #340]	; (80048b8 <HAL_GPIO_DeInit+0x1dc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_DeInit+0x9a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a54      	ldr	r2, [pc, #336]	; (80048bc <HAL_GPIO_DeInit+0x1e0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_DeInit+0x96>
 800476e:	2306      	movs	r3, #6
 8004770:	e00c      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 8004772:	2307      	movs	r3, #7
 8004774:	e00a      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 8004776:	2305      	movs	r3, #5
 8004778:	e008      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 800477a:	2304      	movs	r3, #4
 800477c:	e006      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 800477e:	2303      	movs	r3, #3
 8004780:	e004      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 8004782:	2302      	movs	r3, #2
 8004784:	e002      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_GPIO_DeInit+0xb0>
 800478a:	2300      	movs	r3, #0
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	f002 0203 	and.w	r2, r2, #3
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	4093      	lsls	r3, r2
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	d132      	bne.n	8004802 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800479c:	4b48      	ldr	r3, [pc, #288]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	4946      	ldr	r1, [pc, #280]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047aa:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	4943      	ldr	r1, [pc, #268]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047b8:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43db      	mvns	r3, r3
 80047c0:	493f      	ldr	r1, [pc, #252]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047c6:	4b3e      	ldr	r3, [pc, #248]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	493c      	ldr	r1, [pc, #240]	; (80048c0 <HAL_GPIO_DeInit+0x1e4>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047e4:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <HAL_GPIO_DeInit+0x1c4>)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	3302      	adds	r3, #2
 80047ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	43da      	mvns	r2, r3
 80047f4:	482a      	ldr	r0, [pc, #168]	; (80048a0 <HAL_GPIO_DeInit+0x1c4>)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	400a      	ands	r2, r1
 80047fc:	3302      	adds	r3, #2
 80047fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3208      	adds	r2, #8
 8004820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	220f      	movs	r2, #15
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	08d2      	lsrs	r2, r2, #3
 8004838:	4019      	ands	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2103      	movs	r1, #3
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	2101      	movs	r1, #1
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	401a      	ands	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	2103      	movs	r1, #3
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	401a      	ands	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	f67f af34 	bls.w	80046f8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40013800 	.word	0x40013800
 80048a4:	40020000 	.word	0x40020000
 80048a8:	40020400 	.word	0x40020400
 80048ac:	40020800 	.word	0x40020800
 80048b0:	40020c00 	.word	0x40020c00
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40021400 	.word	0x40021400
 80048bc:	40021800 	.word	0x40021800
 80048c0:	40013c00 	.word	0x40013c00

080048c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	887b      	ldrh	r3, [r7, #2]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d002      	beq.n	80048e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
 80048e0:	e001      	b.n	80048e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048e2:	2300      	movs	r3, #0
 80048e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	807b      	strh	r3, [r7, #2]
 8004900:	4613      	mov	r3, r2
 8004902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004904:	787b      	ldrb	r3, [r7, #1]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004910:	e003      	b.n	800491a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004912:	887b      	ldrh	r3, [r7, #2]
 8004914:	041a      	lsls	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	619a      	str	r2, [r3, #24]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
	...

08004928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e12b      	b.n	8004b92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff f950 	bl	8003bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2224      	movs	r2, #36	; 0x24
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800497a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800498a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800498c:	f002 fb72 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 8004990:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4a81      	ldr	r2, [pc, #516]	; (8004b9c <HAL_I2C_Init+0x274>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d807      	bhi.n	80049ac <HAL_I2C_Init+0x84>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a80      	ldr	r2, [pc, #512]	; (8004ba0 <HAL_I2C_Init+0x278>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	bf94      	ite	ls
 80049a4:	2301      	movls	r3, #1
 80049a6:	2300      	movhi	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e006      	b.n	80049ba <HAL_I2C_Init+0x92>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a7d      	ldr	r2, [pc, #500]	; (8004ba4 <HAL_I2C_Init+0x27c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	bf94      	ite	ls
 80049b4:	2301      	movls	r3, #1
 80049b6:	2300      	movhi	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e0e7      	b.n	8004b92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a78      	ldr	r2, [pc, #480]	; (8004ba8 <HAL_I2C_Init+0x280>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9b      	lsrs	r3, r3, #18
 80049cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a6a      	ldr	r2, [pc, #424]	; (8004b9c <HAL_I2C_Init+0x274>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d802      	bhi.n	80049fc <HAL_I2C_Init+0xd4>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	3301      	adds	r3, #1
 80049fa:	e009      	b.n	8004a10 <HAL_I2C_Init+0xe8>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	4a69      	ldr	r2, [pc, #420]	; (8004bac <HAL_I2C_Init+0x284>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	099b      	lsrs	r3, r3, #6
 8004a0e:	3301      	adds	r3, #1
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	495c      	ldr	r1, [pc, #368]	; (8004b9c <HAL_I2C_Init+0x274>)
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	d819      	bhi.n	8004a64 <HAL_I2C_Init+0x13c>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e59      	subs	r1, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a44:	400b      	ands	r3, r1
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_I2C_Init+0x138>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1e59      	subs	r1, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5e:	e051      	b.n	8004b04 <HAL_I2C_Init+0x1dc>
 8004a60:	2304      	movs	r3, #4
 8004a62:	e04f      	b.n	8004b04 <HAL_I2C_Init+0x1dc>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d111      	bne.n	8004a90 <HAL_I2C_Init+0x168>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1e58      	subs	r0, r3, #1
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6859      	ldr	r1, [r3, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	440b      	add	r3, r1
 8004a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e012      	b.n	8004ab6 <HAL_I2C_Init+0x18e>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1e58      	subs	r0, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	0099      	lsls	r1, r3, #2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	bf0c      	ite	eq
 8004ab0:	2301      	moveq	r3, #1
 8004ab2:	2300      	movne	r3, #0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Init+0x196>
 8004aba:	2301      	movs	r3, #1
 8004abc:	e022      	b.n	8004b04 <HAL_I2C_Init+0x1dc>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10e      	bne.n	8004ae4 <HAL_I2C_Init+0x1bc>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1e58      	subs	r0, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6859      	ldr	r1, [r3, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	440b      	add	r3, r1
 8004ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad8:	3301      	adds	r3, #1
 8004ada:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae2:	e00f      	b.n	8004b04 <HAL_I2C_Init+0x1dc>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e58      	subs	r0, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	0099      	lsls	r1, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004afa:	3301      	adds	r3, #1
 8004afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	6809      	ldr	r1, [r1, #0]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69da      	ldr	r2, [r3, #28]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6911      	ldr	r1, [r2, #16]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	68d2      	ldr	r2, [r2, #12]
 8004b3e:	4311      	orrs	r1, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6812      	ldr	r2, [r2, #0]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	000186a0 	.word	0x000186a0
 8004ba0:	001e847f 	.word	0x001e847f
 8004ba4:	003d08ff 	.word	0x003d08ff
 8004ba8:	431bde83 	.word	0x431bde83
 8004bac:	10624dd3 	.word	0x10624dd3

08004bb0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e021      	b.n	8004c06 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2224      	movs	r2, #36	; 0x24
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff f8b8 	bl	8003d50 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d103      	bne.n	8004c2c <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	611a      	str	r2, [r3, #16]
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b088      	sub	sp, #32
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	607a      	str	r2, [r7, #4]
 8004c42:	461a      	mov	r2, r3
 8004c44:	460b      	mov	r3, r1
 8004c46:	817b      	strh	r3, [r7, #10]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c4c:	f7ff fa32 	bl	80040b4 <HAL_GetTick>
 8004c50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b20      	cmp	r3, #32
 8004c5c:	f040 80e0 	bne.w	8004e20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	2319      	movs	r3, #25
 8004c66:	2201      	movs	r2, #1
 8004c68:	4970      	ldr	r1, [pc, #448]	; (8004e2c <HAL_I2C_Master_Transmit+0x1f4>)
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f001 feea 	bl	8006a44 <I2C_WaitOnFlagUntilTimeout>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c76:	2302      	movs	r3, #2
 8004c78:	e0d3      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d101      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x50>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e0cc      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d007      	beq.n	8004cae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2210      	movs	r2, #16
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	893a      	ldrh	r2, [r7, #8]
 8004cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	4a50      	ldr	r2, [pc, #320]	; (8004e30 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004cf0:	8979      	ldrh	r1, [r7, #10]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f001 fd7a 	bl	80067f0 <I2C_MasterRequestWrite>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e08d      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d1c:	e066      	b.n	8004dec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	6a39      	ldr	r1, [r7, #32]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f001 ffa8 	bl	8006c78 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00d      	beq.n	8004d4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d107      	bne.n	8004d46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e06b      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11b      	bne.n	8004dc0 <HAL_I2C_Master_Transmit+0x188>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d017      	beq.n	8004dc0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	6a39      	ldr	r1, [r7, #32]
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f001 ff9f 	bl	8006d08 <I2C_WaitOnBTFFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00d      	beq.n	8004dec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d107      	bne.n	8004de8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e01a      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d194      	bne.n	8004d1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e20:	2302      	movs	r3, #2
  }
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	00100002 	.word	0x00100002
 8004e30:	ffff0000 	.word	0xffff0000

08004e34 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	4613      	mov	r3, r2
 8004e42:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e50:	2b28      	cmp	r3, #40	; 0x28
 8004e52:	d15b      	bne.n	8004f0c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e054      	b.n	8004f0e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e04d      	b.n	8004f0e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d007      	beq.n	8004e98 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ea6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2229      	movs	r2, #41	; 0x29
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	88fa      	ldrh	r2, [r7, #6]
 8004ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ece:	b29a      	uxth	r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f06:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e000      	b.n	8004f0e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b087      	sub	sp, #28
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	60f8      	str	r0, [r7, #12]
 8004f22:	60b9      	str	r1, [r7, #8]
 8004f24:	603b      	str	r3, [r7, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f36:	2b28      	cmp	r3, #40	; 0x28
 8004f38:	d15b      	bne.n	8004ff2 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 8004f40:	88fb      	ldrh	r3, [r7, #6]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e054      	b.n	8004ff4 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e04d      	b.n	8004ff4 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d007      	beq.n	8004f7e <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	222a      	movs	r2, #42	; 0x2a
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	88fa      	ldrh	r2, [r7, #6]
 8004fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004fec:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b20      	cmp	r3, #32
 8005012:	d124      	bne.n	800505e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2228      	movs	r2, #40	; 0x28
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d007      	beq.n	800503a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0201 	orr.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005058:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	e000      	b.n	8005060 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800505e:	2302      	movs	r3, #2
  }
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b088      	sub	sp, #32
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005094:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b10      	cmp	r3, #16
 800509a:	d003      	beq.n	80050a4 <HAL_I2C_EV_IRQHandler+0x38>
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	f040 80b1 	bne.w	8005206 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10d      	bne.n	80050da <HAL_I2C_EV_IRQHandler+0x6e>
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80050c4:	d003      	beq.n	80050ce <HAL_I2C_EV_IRQHandler+0x62>
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80050cc:	d101      	bne.n	80050d2 <HAL_I2C_EV_IRQHandler+0x66>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e000      	b.n	80050d4 <HAL_I2C_EV_IRQHandler+0x68>
 80050d2:	2300      	movs	r3, #0
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	f000 8114 	beq.w	8005302 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <HAL_I2C_EV_IRQHandler+0x90>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d006      	beq.n	80050fc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f001 feb3 	bl	8006e5a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fd5e 	bl	8005bb6 <I2C_Master_SB>
 80050fa:	e083      	b.n	8005204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d008      	beq.n	8005118 <HAL_I2C_EV_IRQHandler+0xac>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fdd6 	bl	8005cc2 <I2C_Master_ADD10>
 8005116:	e075      	b.n	8005204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d008      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0xc8>
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fdf2 	bl	8005d16 <I2C_Master_ADDR>
 8005132:	e067      	b.n	8005204 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d036      	beq.n	80051ac <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	f000 80db 	beq.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00d      	beq.n	8005176 <HAL_I2C_EV_IRQHandler+0x10a>
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005160:	2b00      	cmp	r3, #0
 8005162:	d008      	beq.n	8005176 <HAL_I2C_EV_IRQHandler+0x10a>
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d103      	bne.n	8005176 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9ba 	bl	80054e8 <I2C_MasterTransmit_TXE>
 8005174:	e046      	b.n	8005204 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 80c2 	beq.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	2b00      	cmp	r3, #0
 800518a:	f000 80bc 	beq.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	2b21      	cmp	r3, #33	; 0x21
 8005192:	d103      	bne.n	800519c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fa43 	bl	8005620 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800519a:	e0b4      	b.n	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	f040 80b1 	bne.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fab1 	bl	800570c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051aa:	e0ac      	b.n	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ba:	f000 80a4 	beq.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00d      	beq.n	80051e4 <HAL_I2C_EV_IRQHandler+0x178>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_I2C_EV_IRQHandler+0x178>
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0304 	and.w	r3, r3, #4
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d103      	bne.n	80051e4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fb2d 	bl	800583c <I2C_MasterReceive_RXNE>
 80051e2:	e00f      	b.n	8005204 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 808b 	beq.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8085 	beq.w	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 fbe5 	bl	80059cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005202:	e080      	b.n	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
 8005204:	e07f      	b.n	8005306 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d004      	beq.n	8005218 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e007      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d011      	beq.n	8005256 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800524c:	69b9      	ldr	r1, [r7, #24]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 ffb0 	bl	80061b4 <I2C_Slave_ADDR>
 8005254:	e05a      	b.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_I2C_EV_IRQHandler+0x206>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 ffea 	bl	8006244 <I2C_Slave_STOPF>
 8005270:	e04c      	b.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005272:	7bbb      	ldrb	r3, [r7, #14]
 8005274:	2b21      	cmp	r3, #33	; 0x21
 8005276:	d002      	beq.n	800527e <HAL_I2C_EV_IRQHandler+0x212>
 8005278:	7bbb      	ldrb	r3, [r7, #14]
 800527a:	2b29      	cmp	r3, #41	; 0x29
 800527c:	d120      	bne.n	80052c0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <HAL_I2C_EV_IRQHandler+0x238>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528e:	2b00      	cmp	r3, #0
 8005290:	d008      	beq.n	80052a4 <HAL_I2C_EV_IRQHandler+0x238>
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fecb 	bl	8006038 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052a2:	e032      	b.n	800530a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d02d      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0x29e>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d028      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fefa 	bl	80060b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052be:	e024      	b.n	800530a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d00d      	beq.n	80052e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d008      	beq.n	80052e6 <HAL_I2C_EV_IRQHandler+0x27a>
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 ff08 	bl	80060f4 <I2C_SlaveReceive_RXNE>
 80052e4:	e012      	b.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 ff38 	bl	8006170 <I2C_SlaveReceive_BTF>
 8005300:	e004      	b.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800530a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800530c:	3720      	adds	r7, #32
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b08a      	sub	sp, #40	; 0x28
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005334:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00d      	beq.n	800535c <HAL_I2C_ER_IRQHandler+0x4a>
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	f043 0301 	orr.w	r3, r3, #1
 8005350:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800535a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_I2C_ER_IRQHandler+0x70>
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	f043 0302 	orr.w	r3, r3, #2
 8005376:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005380:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005382:	6a3b      	ldr	r3, [r7, #32]
 8005384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005388:	2b00      	cmp	r3, #0
 800538a:	d03e      	beq.n	800540a <HAL_I2C_ER_IRQHandler+0xf8>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005392:	2b00      	cmp	r3, #0
 8005394:	d039      	beq.n	800540a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8005396:	7efb      	ldrb	r3, [r7, #27]
 8005398:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80053b0:	7ebb      	ldrb	r3, [r7, #26]
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d112      	bne.n	80053dc <HAL_I2C_ER_IRQHandler+0xca>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10f      	bne.n	80053dc <HAL_I2C_ER_IRQHandler+0xca>
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	2b21      	cmp	r3, #33	; 0x21
 80053c0:	d008      	beq.n	80053d4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b29      	cmp	r3, #41	; 0x29
 80053c6:	d005      	beq.n	80053d4 <HAL_I2C_ER_IRQHandler+0xc2>
 80053c8:	7cfb      	ldrb	r3, [r7, #19]
 80053ca:	2b28      	cmp	r3, #40	; 0x28
 80053cc:	d106      	bne.n	80053dc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b21      	cmp	r3, #33	; 0x21
 80053d2:	d103      	bne.n	80053dc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f001 f865 	bl	80064a4 <I2C_Slave_AF>
 80053da:	e016      	b.n	800540a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	f043 0304 	orr.w	r3, r3, #4
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80053ee:	7efb      	ldrb	r3, [r7, #27]
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d002      	beq.n	80053fa <HAL_I2C_ER_IRQHandler+0xe8>
 80053f4:	7efb      	ldrb	r3, [r7, #27]
 80053f6:	2b40      	cmp	r3, #64	; 0x40
 80053f8:	d107      	bne.n	800540a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005408:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00d      	beq.n	8005430 <HAL_I2C_ER_IRQHandler+0x11e>
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	f043 0308 	orr.w	r3, r3, #8
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800542e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f001 f8a2 	bl	800658c <I2C_ITError>
  }
}
 8005448:	bf00      	nop
 800544a:	3728      	adds	r7, #40	; 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c2:	b2db      	uxtb	r3, r3
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800550a:	2b00      	cmp	r3, #0
 800550c:	d150      	bne.n	80055b0 <I2C_MasterTransmit_TXE+0xc8>
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b21      	cmp	r3, #33	; 0x21
 8005512:	d14d      	bne.n	80055b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b08      	cmp	r3, #8
 8005518:	d01d      	beq.n	8005556 <I2C_MasterTransmit_TXE+0x6e>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b20      	cmp	r3, #32
 800551e:	d01a      	beq.n	8005556 <I2C_MasterTransmit_TXE+0x6e>
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005526:	d016      	beq.n	8005556 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005536:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2211      	movs	r2, #17
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7ff ff7e 	bl	8005450 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005554:	e060      	b.n	8005618 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005564:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005574:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d107      	bne.n	80055a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff6d 	bl	8005478 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800559e:	e03b      	b.n	8005618 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff51 	bl	8005450 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055ae:	e033      	b.n	8005618 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b21      	cmp	r3, #33	; 0x21
 80055b4:	d005      	beq.n	80055c2 <I2C_MasterTransmit_TXE+0xda>
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d12d      	bne.n	8005618 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	2b22      	cmp	r3, #34	; 0x22
 80055c0:	d12a      	bne.n	8005618 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d108      	bne.n	80055de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80055dc:	e01c      	b.n	8005618 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b40      	cmp	r3, #64	; 0x40
 80055e8:	d103      	bne.n	80055f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f88e 	bl	800570c <I2C_MemoryTransmit_TXE_BTF>
}
 80055f0:	e012      	b.n	8005618 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	781a      	ldrb	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560c:	b29b      	uxth	r3, r3
 800560e:	3b01      	subs	r3, #1
 8005610:	b29a      	uxth	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005616:	e7ff      	b.n	8005618 <I2C_MasterTransmit_TXE+0x130>
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b21      	cmp	r3, #33	; 0x21
 8005638:	d164      	bne.n	8005704 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d012      	beq.n	800566a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005668:	e04c      	b.n	8005704 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b08      	cmp	r3, #8
 800566e:	d01d      	beq.n	80056ac <I2C_MasterTransmit_BTF+0x8c>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2b20      	cmp	r3, #32
 8005674:	d01a      	beq.n	80056ac <I2C_MasterTransmit_BTF+0x8c>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800567c:	d016      	beq.n	80056ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800568c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2211      	movs	r2, #17
 8005692:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff fed3 	bl	8005450 <HAL_I2C_MasterTxCpltCallback>
}
 80056aa:	e02b      	b.n	8005704 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d107      	bne.n	80056f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fec2 	bl	8005478 <HAL_I2C_MemTxCpltCallback>
}
 80056f4:	e006      	b.n	8005704 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fea6 	bl	8005450 <HAL_I2C_MasterTxCpltCallback>
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005720:	2b00      	cmp	r3, #0
 8005722:	d11d      	bne.n	8005760 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d10b      	bne.n	8005744 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005730:	b2da      	uxtb	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	1c9a      	adds	r2, r3, #2
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005742:	e077      	b.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005748:	b29b      	uxth	r3, r3
 800574a:	121b      	asrs	r3, r3, #8
 800574c:	b2da      	uxtb	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800575e:	e069      	b.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	2b01      	cmp	r3, #1
 8005766:	d10b      	bne.n	8005780 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800576c:	b2da      	uxtb	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800577e:	e059      	b.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005784:	2b02      	cmp	r3, #2
 8005786:	d152      	bne.n	800582e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005788:	7bfb      	ldrb	r3, [r7, #15]
 800578a:	2b22      	cmp	r3, #34	; 0x22
 800578c:	d10d      	bne.n	80057aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800579c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a2:	1c5a      	adds	r2, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057a8:	e044      	b.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d015      	beq.n	80057e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80057b4:	7bfb      	ldrb	r3, [r7, #15]
 80057b6:	2b21      	cmp	r3, #33	; 0x21
 80057b8:	d112      	bne.n	80057e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80057de:	e029      	b.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d124      	bne.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80057ea:	7bfb      	ldrb	r3, [r7, #15]
 80057ec:	2b21      	cmp	r3, #33	; 0x21
 80057ee:	d121      	bne.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800580e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff fe26 	bl	8005478 <HAL_I2C_MemTxCpltCallback>
}
 800582c:	e002      	b.n	8005834 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff f9ed 	bl	8004c0e <I2C_Flush_DR>
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b22      	cmp	r3, #34	; 0x22
 800584e:	f040 80b9 	bne.w	80059c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585c:	b29b      	uxth	r3, r3
 800585e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d921      	bls.n	80058aa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b03      	cmp	r3, #3
 8005894:	f040 8096 	bne.w	80059c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80058a8:	e08c      	b.n	80059c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d07f      	beq.n	80059b2 <I2C_MasterReceive_RXNE+0x176>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d002      	beq.n	80058be <I2C_MasterReceive_RXNE+0x82>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d179      	bne.n	80059b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 fa6a 	bl	8006d98 <I2C_WaitOnSTOPRequestThroughIT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d14c      	bne.n	8005964 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d10a      	bne.n	800593a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7ff fdaa 	bl	800548c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005938:	e044      	b.n	80059c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d002      	beq.n	800594e <I2C_MasterReceive_RXNE+0x112>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b20      	cmp	r3, #32
 800594c:	d103      	bne.n	8005956 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	631a      	str	r2, [r3, #48]	; 0x30
 8005954:	e002      	b.n	800595c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2212      	movs	r2, #18
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fd81 	bl	8005464 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005962:	e02f      	b.n	80059c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005972:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691a      	ldr	r2, [r3, #16]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597e:	b2d2      	uxtb	r2, r2
 8005980:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005990:	b29b      	uxth	r3, r3
 8005992:	3b01      	subs	r3, #1
 8005994:	b29a      	uxth	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fd fcf4 	bl	8003398 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80059b0:	e008      	b.n	80059c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c0:	605a      	str	r2, [r3, #4]
}
 80059c2:	e7ff      	b.n	80059c4 <I2C_MasterReceive_RXNE+0x188>
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d11b      	bne.n	8005a1c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005a1a:	e0c8      	b.n	8005bae <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d129      	bne.n	8005a7a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b04      	cmp	r3, #4
 8005a3a:	d00a      	beq.n	8005a52 <I2C_MasterReceive_BTF+0x86>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d007      	beq.n	8005a52 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a50:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a78:	e099      	b.n	8005bae <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	f040 8081 	bne.w	8005b88 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d002      	beq.n	8005a92 <I2C_MasterReceive_BTF+0xc6>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b10      	cmp	r3, #16
 8005a90:	d108      	bne.n	8005aa4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e019      	b.n	8005ad8 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d002      	beq.n	8005ab0 <I2C_MasterReceive_BTF+0xe4>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d108      	bne.n	8005ac2 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	e00a      	b.n	8005ad8 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d007      	beq.n	8005ad8 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691a      	ldr	r2, [r3, #16]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691a      	ldr	r2, [r3, #16]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	b2d2      	uxtb	r2, r2
 8005b0a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	685a      	ldr	r2, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b32:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d10a      	bne.n	8005b5e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff fc98 	bl	800548c <HAL_I2C_MemRxCpltCallback>
}
 8005b5c:	e027      	b.n	8005bae <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d002      	beq.n	8005b72 <I2C_MasterReceive_BTF+0x1a6>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d103      	bne.n	8005b7a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
 8005b78:	e002      	b.n	8005b80 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2212      	movs	r2, #18
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fc6f 	bl	8005464 <HAL_I2C_MasterRxCpltCallback>
}
 8005b86:	e012      	b.n	8005bae <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d117      	bne.n	8005bfa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005be2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005be4:	e067      	b.n	8005cb6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	611a      	str	r2, [r3, #16]
}
 8005bf8:	e05d      	b.n	8005cb6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c02:	d133      	bne.n	8005c6c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b21      	cmp	r3, #33	; 0x21
 8005c0e:	d109      	bne.n	8005c24 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c20:	611a      	str	r2, [r3, #16]
 8005c22:	e008      	b.n	8005c36 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f043 0301 	orr.w	r3, r3, #1
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <I2C_Master_SB+0x92>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d108      	bne.n	8005c5a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d032      	beq.n	8005cb6 <I2C_Master_SB+0x100>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02d      	beq.n	8005cb6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c68:	605a      	str	r2, [r3, #4]
}
 8005c6a:	e024      	b.n	8005cb6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10e      	bne.n	8005c92 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	11db      	asrs	r3, r3, #7
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	f003 0306 	and.w	r3, r3, #6
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	f063 030f 	orn	r3, r3, #15
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	611a      	str	r2, [r3, #16]
}
 8005c90:	e011      	b.n	8005cb6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d10d      	bne.n	8005cb6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	11db      	asrs	r3, r3, #7
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0306 	and.w	r3, r3, #6
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f063 030e 	orn	r3, r3, #14
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	611a      	str	r2, [r3, #16]
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d004      	beq.n	8005ce8 <I2C_Master_ADD10+0x26>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d108      	bne.n	8005cfa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00c      	beq.n	8005d0a <I2C_Master_ADD10+0x48>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d007      	beq.n	8005d0a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d08:	605a      	str	r2, [r3, #4]
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b091      	sub	sp, #68	; 0x44
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b22      	cmp	r3, #34	; 0x22
 8005d3e:	f040 8169 	bne.w	8006014 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10f      	bne.n	8005d6a <I2C_Master_ADDR+0x54>
 8005d4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d4e:	2b40      	cmp	r3, #64	; 0x40
 8005d50:	d10b      	bne.n	8005d6a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d52:	2300      	movs	r3, #0
 8005d54:	633b      	str	r3, [r7, #48]	; 0x30
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	633b      	str	r3, [r7, #48]	; 0x30
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	e160      	b.n	800602c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11d      	bne.n	8005dae <I2C_Master_ADDR+0x98>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005d7a:	d118      	bne.n	8005dae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005da0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	651a      	str	r2, [r3, #80]	; 0x50
 8005dac:	e13e      	b.n	800602c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d113      	bne.n	8005de0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db8:	2300      	movs	r3, #0
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	e115      	b.n	800600c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	f040 808a 	bne.w	8005f00 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005df2:	d137      	bne.n	8005e64 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e12:	d113      	bne.n	8005e3c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e22:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e24:	2300      	movs	r3, #0
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	e0e7      	b.n	800600c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	623b      	str	r3, [r7, #32]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	623b      	str	r3, [r7, #32]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	e0d3      	b.n	800600c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d02e      	beq.n	8005ec8 <I2C_Master_ADDR+0x1b2>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d02b      	beq.n	8005ec8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	2b12      	cmp	r3, #18
 8005e74:	d102      	bne.n	8005e7c <I2C_Master_ADDR+0x166>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d125      	bne.n	8005ec8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00e      	beq.n	8005ea0 <I2C_Master_ADDR+0x18a>
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d00b      	beq.n	8005ea0 <I2C_Master_ADDR+0x18a>
 8005e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8a:	2b10      	cmp	r3, #16
 8005e8c:	d008      	beq.n	8005ea0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e007      	b.n	8005eb0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	61fb      	str	r3, [r7, #28]
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	e0a1      	b.n	800600c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61bb      	str	r3, [r7, #24]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	61bb      	str	r3, [r7, #24]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	61bb      	str	r3, [r7, #24]
 8005eec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	e085      	b.n	800600c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d14d      	bne.n	8005fa6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d016      	beq.n	8005f3e <I2C_Master_ADDR+0x228>
 8005f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d013      	beq.n	8005f3e <I2C_Master_ADDR+0x228>
 8005f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d010      	beq.n	8005f3e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	e007      	b.n	8005f4e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f4c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5c:	d117      	bne.n	8005f8e <I2C_Master_ADDR+0x278>
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f64:	d00b      	beq.n	8005f7e <I2C_Master_ADDR+0x268>
 8005f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d008      	beq.n	8005f7e <I2C_Master_ADDR+0x268>
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d005      	beq.n	8005f7e <I2C_Master_ADDR+0x268>
 8005f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d002      	beq.n	8005f7e <I2C_Master_ADDR+0x268>
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	d107      	bne.n	8005f8e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f8c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	e032      	b.n	800600c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fb4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fc4:	d117      	bne.n	8005ff6 <I2C_Master_ADDR+0x2e0>
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fcc:	d00b      	beq.n	8005fe6 <I2C_Master_ADDR+0x2d0>
 8005fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d008      	beq.n	8005fe6 <I2C_Master_ADDR+0x2d0>
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d005      	beq.n	8005fe6 <I2C_Master_ADDR+0x2d0>
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b10      	cmp	r3, #16
 8005fde:	d002      	beq.n	8005fe6 <I2C_Master_ADDR+0x2d0>
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2b20      	cmp	r3, #32
 8005fe4:	d107      	bne.n	8005ff6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ff4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	613b      	str	r3, [r7, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006012:	e00b      	b.n	800602c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	68fb      	ldr	r3, [r7, #12]
}
 800602a:	e7ff      	b.n	800602c <I2C_Master_ADDR+0x316>
 800602c:	bf00      	nop
 800602e:	3744      	adds	r7, #68	; 0x44
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006046:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d02b      	beq.n	80060aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	781a      	ldrb	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d114      	bne.n	80060aa <I2C_SlaveTransmit_TXE+0x72>
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b29      	cmp	r3, #41	; 0x29
 8006084:	d111      	bne.n	80060aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006094:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2221      	movs	r2, #33	; 0x21
 800609a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2228      	movs	r2, #40	; 0x28
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fd f9ad 	bl	8003404 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d011      	beq.n	80060e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	781a      	ldrb	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	1c5a      	adds	r2, r3, #1
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d02c      	beq.n	8006168 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691a      	ldr	r2, [r3, #16]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d114      	bne.n	8006168 <I2C_SlaveReceive_RXNE+0x74>
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b2a      	cmp	r3, #42	; 0x2a
 8006142:	d111      	bne.n	8006168 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006152:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2222      	movs	r2, #34	; 0x22
 8006158:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2228      	movs	r2, #40	; 0x28
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fd f93a 	bl	80033dc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800617c:	b29b      	uxth	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d012      	beq.n	80061a8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	3b01      	subs	r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061ce:	2b28      	cmp	r3, #40	; 0x28
 80061d0:	d125      	bne.n	800621e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f003 0304 	and.w	r3, r3, #4
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80061ec:	2301      	movs	r3, #1
 80061ee:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	81bb      	strh	r3, [r7, #12]
 8006200:	e002      	b.n	8006208 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006210:	89ba      	ldrh	r2, [r7, #12]
 8006212:	7bfb      	ldrb	r3, [r7, #15]
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fd f8cc 	bl	80033b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800621c:	e00e      	b.n	800623c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006252:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006262:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006264:	2300      	movs	r3, #0
 8006266:	60bb      	str	r3, [r7, #8]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	60bb      	str	r3, [r7, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006290:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a0:	d172      	bne.n	8006388 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b22      	cmp	r3, #34	; 0x22
 80062a6:	d002      	beq.n	80062ae <I2C_Slave_STOPF+0x6a>
 80062a8:	7bfb      	ldrb	r3, [r7, #15]
 80062aa:	2b2a      	cmp	r3, #42	; 0x2a
 80062ac:	d135      	bne.n	800631a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f043 0204 	orr.w	r2, r3, #4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe f855 	bl	8004396 <HAL_DMA_GetState>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d049      	beq.n	8006386 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f6:	4a69      	ldr	r2, [pc, #420]	; (800649c <I2C_Slave_STOPF+0x258>)
 80062f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe f827 	bl	8004352 <HAL_DMA_Abort_IT>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d03d      	beq.n	8006386 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006314:	4610      	mov	r0, r2
 8006316:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006318:	e035      	b.n	8006386 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f043 0204 	orr.w	r2, r3, #4
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685a      	ldr	r2, [r3, #4]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800634c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe f81f 	bl	8004396 <HAL_DMA_GetState>
 8006358:	4603      	mov	r3, r0
 800635a:	2b01      	cmp	r3, #1
 800635c:	d014      	beq.n	8006388 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	4a4e      	ldr	r2, [pc, #312]	; (800649c <I2C_Slave_STOPF+0x258>)
 8006364:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fff1 	bl	8004352 <HAL_DMA_Abort_IT>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d008      	beq.n	8006388 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800637a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006380:	4610      	mov	r0, r2
 8006382:	4798      	blx	r3
 8006384:	e000      	b.n	8006388 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006386:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d03e      	beq.n	8006410 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	f003 0304 	and.w	r3, r3, #4
 800639c:	2b04      	cmp	r3, #4
 800639e:	d112      	bne.n	80063c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	d112      	bne.n	80063fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691a      	ldr	r2, [r3, #16]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f8b7 	bl	800658c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800641e:	e039      	b.n	8006494 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b2a      	cmp	r3, #42	; 0x2a
 8006424:	d109      	bne.n	800643a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2228      	movs	r2, #40	; 0x28
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7fc ffd1 	bl	80033dc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b28      	cmp	r3, #40	; 0x28
 8006444:	d111      	bne.n	800646a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a15      	ldr	r2, [pc, #84]	; (80064a0 <I2C_Slave_STOPF+0x25c>)
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fc ff8a 	bl	800337c <HAL_I2C_ListenCpltCallback>
}
 8006468:	e014      	b.n	8006494 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646e:	2b22      	cmp	r3, #34	; 0x22
 8006470:	d002      	beq.n	8006478 <I2C_Slave_STOPF+0x234>
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b22      	cmp	r3, #34	; 0x22
 8006476:	d10d      	bne.n	8006494 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fc ffa4 	bl	80033dc <HAL_I2C_SlaveRxCpltCallback>
}
 8006494:	bf00      	nop
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	080068f5 	.word	0x080068f5
 80064a0:	ffff0000 	.word	0xffff0000

080064a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d002      	beq.n	80064c6 <I2C_Slave_AF+0x22>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d129      	bne.n	800651a <I2C_Slave_AF+0x76>
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
 80064c8:	2b28      	cmp	r3, #40	; 0x28
 80064ca:	d126      	bne.n	800651a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a2e      	ldr	r2, [pc, #184]	; (8006588 <I2C_Slave_AF+0xe4>)
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80064e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80064ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fc ff32 	bl	800337c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006518:	e031      	b.n	800657e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b21      	cmp	r3, #33	; 0x21
 800651e:	d129      	bne.n	8006574 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a19      	ldr	r2, [pc, #100]	; (8006588 <I2C_Slave_AF+0xe4>)
 8006524:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2221      	movs	r2, #33	; 0x21
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800654a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006554:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7fe fb51 	bl	8004c0e <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fc ff49 	bl	8003404 <HAL_I2C_SlaveTxCpltCallback>
}
 8006572:	e004      	b.n	800657e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800657c:	615a      	str	r2, [r3, #20]
}
 800657e:	bf00      	nop
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	ffff0000 	.word	0xffff0000

0800658c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2b10      	cmp	r3, #16
 80065a8:	d002      	beq.n	80065b0 <I2C_ITError+0x24>
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	2b40      	cmp	r3, #64	; 0x40
 80065ae:	d10a      	bne.n	80065c6 <I2C_ITError+0x3a>
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
 80065b2:	2b22      	cmp	r3, #34	; 0x22
 80065b4:	d107      	bne.n	80065c6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065c4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
 80065c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065cc:	2b28      	cmp	r3, #40	; 0x28
 80065ce:	d107      	bne.n	80065e0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2228      	movs	r2, #40	; 0x28
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065de:	e015      	b.n	800660c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ee:	d00a      	beq.n	8006606 <I2C_ITError+0x7a>
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b60      	cmp	r3, #96	; 0x60
 80065f4:	d007      	beq.n	8006606 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800661a:	d162      	bne.n	80066e2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800662a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b01      	cmp	r3, #1
 8006638:	d020      	beq.n	800667c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	4a6a      	ldr	r2, [pc, #424]	; (80067e8 <I2C_ITError+0x25c>)
 8006640:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	4618      	mov	r0, r3
 8006648:	f7fd fe83 	bl	8004352 <HAL_DMA_Abort_IT>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8089 	beq.w	8006766 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006676:	4610      	mov	r0, r2
 8006678:	4798      	blx	r3
 800667a:	e074      	b.n	8006766 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006680:	4a59      	ldr	r2, [pc, #356]	; (80067e8 <I2C_ITError+0x25c>)
 8006682:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	4618      	mov	r0, r3
 800668a:	f7fd fe62 	bl	8004352 <HAL_DMA_Abort_IT>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d068      	beq.n	8006766 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d10b      	bne.n	80066ba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0201 	bic.w	r2, r2, #1
 80066c8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2220      	movs	r2, #32
 80066ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	e041      	b.n	8006766 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b60      	cmp	r3, #96	; 0x60
 80066ec:	d125      	bne.n	800673a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2220      	movs	r2, #32
 80066f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006706:	2b40      	cmp	r3, #64	; 0x40
 8006708:	d10b      	bne.n	8006722 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0201 	bic.w	r2, r2, #1
 8006730:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7fe feb4 	bl	80054a0 <HAL_I2C_AbortCpltCallback>
 8006738:	e015      	b.n	8006766 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006744:	2b40      	cmp	r3, #64	; 0x40
 8006746:	d10b      	bne.n	8006760 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	691a      	ldr	r2, [r3, #16]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fc fe19 	bl	8003398 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10e      	bne.n	8006794 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800677c:	2b00      	cmp	r3, #0
 800677e:	d109      	bne.n	8006794 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067aa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d113      	bne.n	80067e0 <I2C_ITError+0x254>
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
 80067ba:	2b28      	cmp	r3, #40	; 0x28
 80067bc:	d110      	bne.n	80067e0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <I2C_ITError+0x260>)
 80067c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fc fdce 	bl	800337c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	080068f5 	.word	0x080068f5
 80067ec:	ffff0000 	.word	0xffff0000

080067f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	607a      	str	r2, [r7, #4]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	460b      	mov	r3, r1
 80067fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b08      	cmp	r3, #8
 800680a:	d006      	beq.n	800681a <I2C_MasterRequestWrite+0x2a>
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d003      	beq.n	800681a <I2C_MasterRequestWrite+0x2a>
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006818:	d108      	bne.n	800682c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	e00b      	b.n	8006844 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	2b12      	cmp	r3, #18
 8006832:	d107      	bne.n	8006844 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 f8f7 	bl	8006a44 <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00d      	beq.n	8006878 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686a:	d103      	bne.n	8006874 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e035      	b.n	80068e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006880:	d108      	bne.n	8006894 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	461a      	mov	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006890:	611a      	str	r2, [r3, #16]
 8006892:	e01b      	b.n	80068cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006894:	897b      	ldrh	r3, [r7, #10]
 8006896:	11db      	asrs	r3, r3, #7
 8006898:	b2db      	uxtb	r3, r3
 800689a:	f003 0306 	and.w	r3, r3, #6
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	f063 030f 	orn	r3, r3, #15
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	490e      	ldr	r1, [pc, #56]	; (80068ec <I2C_MasterRequestWrite+0xfc>)
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f940 	bl	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d001      	beq.n	80068c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e010      	b.n	80068e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80068c2:	897b      	ldrh	r3, [r7, #10]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	4907      	ldr	r1, [pc, #28]	; (80068f0 <I2C_MasterRequestWrite+0x100>)
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f930 	bl	8006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	00010008 	.word	0x00010008
 80068f0:	00010002 	.word	0x00010002

080068f4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800690e:	4b4b      	ldr	r3, [pc, #300]	; (8006a3c <I2C_DMAAbort+0x148>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	08db      	lsrs	r3, r3, #3
 8006914:	4a4a      	ldr	r2, [pc, #296]	; (8006a40 <I2C_DMAAbort+0x14c>)
 8006916:	fba2 2303 	umull	r2, r3, r2, r3
 800691a:	0a1a      	lsrs	r2, r3, #8
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	00da      	lsls	r2, r3, #3
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f043 0220 	orr.w	r2, r3, #32
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800693a:	e00a      	b.n	8006952 <I2C_DMAAbort+0x5e>
    }
    count--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	3b01      	subs	r3, #1
 8006940:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d0ea      	beq.n	8006928 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695e:	2200      	movs	r2, #0
 8006960:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	2200      	movs	r2, #0
 8006970:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006980:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2200      	movs	r2, #0
 8006986:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	2200      	movs	r2, #0
 8006996:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	2200      	movs	r2, #0
 80069a6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0201 	bic.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b60      	cmp	r3, #96	; 0x60
 80069c2:	d10e      	bne.n	80069e2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2200      	movs	r2, #0
 80069d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069da:	6978      	ldr	r0, [r7, #20]
 80069dc:	f7fe fd60 	bl	80054a0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069e0:	e027      	b.n	8006a32 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069e2:	7cfb      	ldrb	r3, [r7, #19]
 80069e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80069e8:	2b28      	cmp	r3, #40	; 0x28
 80069ea:	d117      	bne.n	8006a1c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0201 	orr.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a0a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2228      	movs	r2, #40	; 0x28
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a1a:	e007      	b.n	8006a2c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006a2c:	6978      	ldr	r0, [r7, #20]
 8006a2e:	f7fc fcb3 	bl	8003398 <HAL_I2C_ErrorCallback>
}
 8006a32:	bf00      	nop
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000080 	.word	0x20000080
 8006a40:	14f8b589 	.word	0x14f8b589

08006a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a54:	e048      	b.n	8006ae8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a5c:	d044      	beq.n	8006ae8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5e:	f7fd fb29 	bl	80040b4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d302      	bcc.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d139      	bne.n	8006ae8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	0c1b      	lsrs	r3, r3, #16
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10d      	bne.n	8006a9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695b      	ldr	r3, [r3, #20]
 8006a84:	43da      	mvns	r2, r3
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	461a      	mov	r2, r3
 8006a98:	e00c      	b.n	8006ab4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d116      	bne.n	8006ae8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad4:	f043 0220 	orr.w	r2, r3, #32
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e023      	b.n	8006b30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	0c1b      	lsrs	r3, r3, #16
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d10d      	bne.n	8006b0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	43da      	mvns	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	4013      	ands	r3, r2
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	e00c      	b.n	8006b28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	43da      	mvns	r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4013      	ands	r3, r2
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	bf0c      	ite	eq
 8006b20:	2301      	moveq	r3, #1
 8006b22:	2300      	movne	r3, #0
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d093      	beq.n	8006a56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b46:	e071      	b.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b56:	d123      	bne.n	8006ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f043 0204 	orr.w	r2, r3, #4
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e067      	b.n	8006c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ba6:	d041      	beq.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba8:	f7fd fa84 	bl	80040b4 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d136      	bne.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	0c1b      	lsrs	r3, r3, #16
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d10c      	bne.n	8006be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	43da      	mvns	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf14      	ite	ne
 8006bda:	2301      	movne	r3, #1
 8006bdc:	2300      	moveq	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	e00b      	b.n	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	43da      	mvns	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	4013      	ands	r3, r2
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bf14      	ite	ne
 8006bf4:	2301      	movne	r3, #1
 8006bf6:	2300      	moveq	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d016      	beq.n	8006c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e021      	b.n	8006c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	0c1b      	lsrs	r3, r3, #16
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d10c      	bne.n	8006c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	43da      	mvns	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4013      	ands	r3, r2
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	e00b      	b.n	8006c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	43da      	mvns	r2, r3
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	bf14      	ite	ne
 8006c62:	2301      	movne	r3, #1
 8006c64:	2300      	moveq	r3, #0
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f47f af6d 	bne.w	8006b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c84:	e034      	b.n	8006cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 f8b8 	bl	8006dfc <I2C_IsAcknowledgeFailed>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e034      	b.n	8006d00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c9c:	d028      	beq.n	8006cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9e:	f7fd fa09 	bl	80040b4 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d302      	bcc.n	8006cb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11d      	bne.n	8006cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbe:	2b80      	cmp	r3, #128	; 0x80
 8006cc0:	d016      	beq.n	8006cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	f043 0220 	orr.w	r2, r3, #32
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e007      	b.n	8006d00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b80      	cmp	r3, #128	; 0x80
 8006cfc:	d1c3      	bne.n	8006c86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d14:	e034      	b.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 f870 	bl	8006dfc <I2C_IsAcknowledgeFailed>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e034      	b.n	8006d90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d2c:	d028      	beq.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2e:	f7fd f9c1 	bl	80040b4 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d302      	bcc.n	8006d44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11d      	bne.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d016      	beq.n	8006d80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e007      	b.n	8006d90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b04      	cmp	r3, #4
 8006d8c:	d1c3      	bne.n	8006d16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006da4:	4b13      	ldr	r3, [pc, #76]	; (8006df4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	08db      	lsrs	r3, r3, #3
 8006daa:	4a13      	ldr	r2, [pc, #76]	; (8006df8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	0a1a      	lsrs	r2, r3, #8
 8006db2:	4613      	mov	r3, r2
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d107      	bne.n	8006dd6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f043 0220 	orr.w	r2, r3, #32
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e008      	b.n	8006de8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006de4:	d0e9      	beq.n	8006dba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	20000080 	.word	0x20000080
 8006df8:	14f8b589 	.word	0x14f8b589

08006dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d11b      	bne.n	8006e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	f043 0204 	orr.w	r2, r3, #4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e6a:	d103      	bne.n	8006e74 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e72:	e007      	b.n	8006e84 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e7c:	d102      	bne.n	8006e84 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2208      	movs	r2, #8
 8006e82:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d101      	bne.n	8006ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e0cc      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea4:	4b68      	ldr	r3, [pc, #416]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 030f 	and.w	r3, r3, #15
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d90c      	bls.n	8006ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eb2:	4b65      	ldr	r3, [pc, #404]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eba:	4b63      	ldr	r3, [pc, #396]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e0b8      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0302 	and.w	r3, r3, #2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d020      	beq.n	8006f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ee4:	4b59      	ldr	r3, [pc, #356]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4a58      	ldr	r2, [pc, #352]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006efc:	4b53      	ldr	r3, [pc, #332]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	4a52      	ldr	r2, [pc, #328]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f08:	4b50      	ldr	r3, [pc, #320]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	494d      	ldr	r1, [pc, #308]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f16:	4313      	orrs	r3, r2
 8006f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d044      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f2e:	4b47      	ldr	r3, [pc, #284]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d119      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e07f      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d003      	beq.n	8006f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d107      	bne.n	8006f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4e:	4b3f      	ldr	r3, [pc, #252]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e06f      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5e:	4b3b      	ldr	r3, [pc, #236]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d101      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e067      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f6e:	4b37      	ldr	r3, [pc, #220]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f023 0203 	bic.w	r2, r3, #3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4934      	ldr	r1, [pc, #208]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f80:	f7fd f898 	bl	80040b4 <HAL_GetTick>
 8006f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f86:	e00a      	b.n	8006f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f88:	f7fd f894 	bl	80040b4 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e04f      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9e:	4b2b      	ldr	r3, [pc, #172]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 020c 	and.w	r2, r3, #12
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d1eb      	bne.n	8006f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fb0:	4b25      	ldr	r3, [pc, #148]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d20c      	bcs.n	8006fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fbe:	4b22      	ldr	r3, [pc, #136]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b20      	ldr	r3, [pc, #128]	; (8007048 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 030f 	and.w	r3, r3, #15
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e032      	b.n	800703e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4916      	ldr	r1, [pc, #88]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0308 	and.w	r3, r3, #8
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	490e      	ldr	r1, [pc, #56]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	4313      	orrs	r3, r2
 8007014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007016:	f000 f855 	bl	80070c4 <HAL_RCC_GetSysClockFreq>
 800701a:	4602      	mov	r2, r0
 800701c:	4b0b      	ldr	r3, [pc, #44]	; (800704c <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	091b      	lsrs	r3, r3, #4
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	490a      	ldr	r1, [pc, #40]	; (8007050 <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	5ccb      	ldrb	r3, [r1, r3]
 800702a:	fa22 f303 	lsr.w	r3, r2, r3
 800702e:	4a09      	ldr	r2, [pc, #36]	; (8007054 <HAL_RCC_ClockConfig+0x1c4>)
 8007030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007032:	4b09      	ldr	r3, [pc, #36]	; (8007058 <HAL_RCC_ClockConfig+0x1c8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f7fc fff8 	bl	800402c <HAL_InitTick>

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40023c00 	.word	0x40023c00
 800704c:	40023800 	.word	0x40023800
 8007050:	08008960 	.word	0x08008960
 8007054:	20000080 	.word	0x20000080
 8007058:	20000084 	.word	0x20000084

0800705c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007060:	4b03      	ldr	r3, [pc, #12]	; (8007070 <HAL_RCC_GetHCLKFreq+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000080 	.word	0x20000080

08007074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007078:	f7ff fff0 	bl	800705c <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b05      	ldr	r3, [pc, #20]	; (8007094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0a9b      	lsrs	r3, r3, #10
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4903      	ldr	r1, [pc, #12]	; (8007098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40023800 	.word	0x40023800
 8007098:	08008970 	.word	0x08008970

0800709c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070a0:	f7ff ffdc 	bl	800705c <HAL_RCC_GetHCLKFreq>
 80070a4:	4602      	mov	r2, r0
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	0b5b      	lsrs	r3, r3, #13
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	4903      	ldr	r1, [pc, #12]	; (80070c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070b2:	5ccb      	ldrb	r3, [r1, r3]
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40023800 	.word	0x40023800
 80070c0:	08008970 	.word	0x08008970

080070c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070c8:	b0ae      	sub	sp, #184	; 0xb8
 80070ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80070e4:	2300      	movs	r3, #0
 80070e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070ea:	4bcb      	ldr	r3, [pc, #812]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 030c 	and.w	r3, r3, #12
 80070f2:	2b0c      	cmp	r3, #12
 80070f4:	f200 8206 	bhi.w	8007504 <HAL_RCC_GetSysClockFreq+0x440>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <HAL_RCC_GetSysClockFreq+0x3c>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007135 	.word	0x08007135
 8007104:	08007505 	.word	0x08007505
 8007108:	08007505 	.word	0x08007505
 800710c:	08007505 	.word	0x08007505
 8007110:	0800713d 	.word	0x0800713d
 8007114:	08007505 	.word	0x08007505
 8007118:	08007505 	.word	0x08007505
 800711c:	08007505 	.word	0x08007505
 8007120:	08007145 	.word	0x08007145
 8007124:	08007505 	.word	0x08007505
 8007128:	08007505 	.word	0x08007505
 800712c:	08007505 	.word	0x08007505
 8007130:	08007335 	.word	0x08007335
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007134:	4bb9      	ldr	r3, [pc, #740]	; (800741c <HAL_RCC_GetSysClockFreq+0x358>)
 8007136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800713a:	e1e7      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800713c:	4bb8      	ldr	r3, [pc, #736]	; (8007420 <HAL_RCC_GetSysClockFreq+0x35c>)
 800713e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007142:	e1e3      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007144:	4bb4      	ldr	r3, [pc, #720]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800714c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007150:	4bb1      	ldr	r3, [pc, #708]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d071      	beq.n	8007240 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715c:	4bae      	ldr	r3, [pc, #696]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	099b      	lsrs	r3, r3, #6
 8007162:	2200      	movs	r2, #0
 8007164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007168:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800716c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007178:	2300      	movs	r3, #0
 800717a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800717e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007182:	4622      	mov	r2, r4
 8007184:	462b      	mov	r3, r5
 8007186:	f04f 0000 	mov.w	r0, #0
 800718a:	f04f 0100 	mov.w	r1, #0
 800718e:	0159      	lsls	r1, r3, #5
 8007190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007194:	0150      	lsls	r0, r2, #5
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4621      	mov	r1, r4
 800719c:	1a51      	subs	r1, r2, r1
 800719e:	6439      	str	r1, [r7, #64]	; 0x40
 80071a0:	4629      	mov	r1, r5
 80071a2:	eb63 0301 	sbc.w	r3, r3, r1
 80071a6:	647b      	str	r3, [r7, #68]	; 0x44
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80071b4:	4649      	mov	r1, r9
 80071b6:	018b      	lsls	r3, r1, #6
 80071b8:	4641      	mov	r1, r8
 80071ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071be:	4641      	mov	r1, r8
 80071c0:	018a      	lsls	r2, r1, #6
 80071c2:	4641      	mov	r1, r8
 80071c4:	1a51      	subs	r1, r2, r1
 80071c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80071c8:	4649      	mov	r1, r9
 80071ca:	eb63 0301 	sbc.w	r3, r3, r1
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d0:	f04f 0200 	mov.w	r2, #0
 80071d4:	f04f 0300 	mov.w	r3, #0
 80071d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80071dc:	4649      	mov	r1, r9
 80071de:	00cb      	lsls	r3, r1, #3
 80071e0:	4641      	mov	r1, r8
 80071e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071e6:	4641      	mov	r1, r8
 80071e8:	00ca      	lsls	r2, r1, #3
 80071ea:	4610      	mov	r0, r2
 80071ec:	4619      	mov	r1, r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	4622      	mov	r2, r4
 80071f2:	189b      	adds	r3, r3, r2
 80071f4:	633b      	str	r3, [r7, #48]	; 0x30
 80071f6:	462b      	mov	r3, r5
 80071f8:	460a      	mov	r2, r1
 80071fa:	eb42 0303 	adc.w	r3, r2, r3
 80071fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800720c:	4629      	mov	r1, r5
 800720e:	024b      	lsls	r3, r1, #9
 8007210:	4621      	mov	r1, r4
 8007212:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007216:	4621      	mov	r1, r4
 8007218:	024a      	lsls	r2, r1, #9
 800721a:	4610      	mov	r0, r2
 800721c:	4619      	mov	r1, r3
 800721e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007222:	2200      	movs	r2, #0
 8007224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800722c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007230:	f7f9 fc90 	bl	8000b54 <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4613      	mov	r3, r2
 800723a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800723e:	e067      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007240:	4b75      	ldr	r3, [pc, #468]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	099b      	lsrs	r3, r3, #6
 8007246:	2200      	movs	r2, #0
 8007248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800724c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007258:	67bb      	str	r3, [r7, #120]	; 0x78
 800725a:	2300      	movs	r3, #0
 800725c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800725e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	f04f 0000 	mov.w	r0, #0
 800726a:	f04f 0100 	mov.w	r1, #0
 800726e:	0159      	lsls	r1, r3, #5
 8007270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007274:	0150      	lsls	r0, r2, #5
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4621      	mov	r1, r4
 800727c:	1a51      	subs	r1, r2, r1
 800727e:	62b9      	str	r1, [r7, #40]	; 0x28
 8007280:	4629      	mov	r1, r5
 8007282:	eb63 0301 	sbc.w	r3, r3, r1
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	f04f 0300 	mov.w	r3, #0
 8007290:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007294:	4649      	mov	r1, r9
 8007296:	018b      	lsls	r3, r1, #6
 8007298:	4641      	mov	r1, r8
 800729a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800729e:	4641      	mov	r1, r8
 80072a0:	018a      	lsls	r2, r1, #6
 80072a2:	4641      	mov	r1, r8
 80072a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80072a8:	4649      	mov	r1, r9
 80072aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80072ae:	f04f 0200 	mov.w	r2, #0
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072c2:	4692      	mov	sl, r2
 80072c4:	469b      	mov	fp, r3
 80072c6:	4623      	mov	r3, r4
 80072c8:	eb1a 0303 	adds.w	r3, sl, r3
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	462b      	mov	r3, r5
 80072d0:	eb4b 0303 	adc.w	r3, fp, r3
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80072e2:	4629      	mov	r1, r5
 80072e4:	028b      	lsls	r3, r1, #10
 80072e6:	4621      	mov	r1, r4
 80072e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072ec:	4621      	mov	r1, r4
 80072ee:	028a      	lsls	r2, r1, #10
 80072f0:	4610      	mov	r0, r2
 80072f2:	4619      	mov	r1, r3
 80072f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f8:	2200      	movs	r2, #0
 80072fa:	673b      	str	r3, [r7, #112]	; 0x70
 80072fc:	677a      	str	r2, [r7, #116]	; 0x74
 80072fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007302:	f7f9 fc27 	bl	8000b54 <__aeabi_uldivmod>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	4613      	mov	r3, r2
 800730c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007310:	4b41      	ldr	r3, [pc, #260]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	f003 0303 	and.w	r3, r3, #3
 800731a:	3301      	adds	r3, #1
 800731c:	005b      	lsls	r3, r3, #1
 800731e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007332:	e0eb      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007334:	4b38      	ldr	r3, [pc, #224]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800733c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007340:	4b35      	ldr	r3, [pc, #212]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d06b      	beq.n	8007424 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800734c:	4b32      	ldr	r3, [pc, #200]	; (8007418 <HAL_RCC_GetSysClockFreq+0x354>)
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	2200      	movs	r2, #0
 8007354:	66bb      	str	r3, [r7, #104]	; 0x68
 8007356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800735a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800735e:	663b      	str	r3, [r7, #96]	; 0x60
 8007360:	2300      	movs	r3, #0
 8007362:	667b      	str	r3, [r7, #100]	; 0x64
 8007364:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007368:	4622      	mov	r2, r4
 800736a:	462b      	mov	r3, r5
 800736c:	f04f 0000 	mov.w	r0, #0
 8007370:	f04f 0100 	mov.w	r1, #0
 8007374:	0159      	lsls	r1, r3, #5
 8007376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800737a:	0150      	lsls	r0, r2, #5
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4621      	mov	r1, r4
 8007382:	1a51      	subs	r1, r2, r1
 8007384:	61b9      	str	r1, [r7, #24]
 8007386:	4629      	mov	r1, r5
 8007388:	eb63 0301 	sbc.w	r3, r3, r1
 800738c:	61fb      	str	r3, [r7, #28]
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800739a:	4659      	mov	r1, fp
 800739c:	018b      	lsls	r3, r1, #6
 800739e:	4651      	mov	r1, sl
 80073a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80073a4:	4651      	mov	r1, sl
 80073a6:	018a      	lsls	r2, r1, #6
 80073a8:	4651      	mov	r1, sl
 80073aa:	ebb2 0801 	subs.w	r8, r2, r1
 80073ae:	4659      	mov	r1, fp
 80073b0:	eb63 0901 	sbc.w	r9, r3, r1
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073c8:	4690      	mov	r8, r2
 80073ca:	4699      	mov	r9, r3
 80073cc:	4623      	mov	r3, r4
 80073ce:	eb18 0303 	adds.w	r3, r8, r3
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	462b      	mov	r3, r5
 80073d6:	eb49 0303 	adc.w	r3, r9, r3
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	f04f 0200 	mov.w	r2, #0
 80073e0:	f04f 0300 	mov.w	r3, #0
 80073e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80073e8:	4629      	mov	r1, r5
 80073ea:	024b      	lsls	r3, r1, #9
 80073ec:	4621      	mov	r1, r4
 80073ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073f2:	4621      	mov	r1, r4
 80073f4:	024a      	lsls	r2, r1, #9
 80073f6:	4610      	mov	r0, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073fe:	2200      	movs	r2, #0
 8007400:	65bb      	str	r3, [r7, #88]	; 0x58
 8007402:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007404:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007408:	f7f9 fba4 	bl	8000b54 <__aeabi_uldivmod>
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4613      	mov	r3, r2
 8007412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007416:	e065      	b.n	80074e4 <HAL_RCC_GetSysClockFreq+0x420>
 8007418:	40023800 	.word	0x40023800
 800741c:	00f42400 	.word	0x00f42400
 8007420:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007424:	4b3d      	ldr	r3, [pc, #244]	; (800751c <HAL_RCC_GetSysClockFreq+0x458>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	099b      	lsrs	r3, r3, #6
 800742a:	2200      	movs	r2, #0
 800742c:	4618      	mov	r0, r3
 800742e:	4611      	mov	r1, r2
 8007430:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
 8007436:	2300      	movs	r3, #0
 8007438:	657b      	str	r3, [r7, #84]	; 0x54
 800743a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800743e:	4642      	mov	r2, r8
 8007440:	464b      	mov	r3, r9
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f04f 0100 	mov.w	r1, #0
 800744a:	0159      	lsls	r1, r3, #5
 800744c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007450:	0150      	lsls	r0, r2, #5
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4641      	mov	r1, r8
 8007458:	1a51      	subs	r1, r2, r1
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	4649      	mov	r1, r9
 800745e:	eb63 0301 	sbc.w	r3, r3, r1
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8007470:	4659      	mov	r1, fp
 8007472:	018b      	lsls	r3, r1, #6
 8007474:	4651      	mov	r1, sl
 8007476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800747a:	4651      	mov	r1, sl
 800747c:	018a      	lsls	r2, r1, #6
 800747e:	4651      	mov	r1, sl
 8007480:	1a54      	subs	r4, r2, r1
 8007482:	4659      	mov	r1, fp
 8007484:	eb63 0501 	sbc.w	r5, r3, r1
 8007488:	f04f 0200 	mov.w	r2, #0
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	00eb      	lsls	r3, r5, #3
 8007492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007496:	00e2      	lsls	r2, r4, #3
 8007498:	4614      	mov	r4, r2
 800749a:	461d      	mov	r5, r3
 800749c:	4643      	mov	r3, r8
 800749e:	18e3      	adds	r3, r4, r3
 80074a0:	603b      	str	r3, [r7, #0]
 80074a2:	464b      	mov	r3, r9
 80074a4:	eb45 0303 	adc.w	r3, r5, r3
 80074a8:	607b      	str	r3, [r7, #4]
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80074b6:	4629      	mov	r1, r5
 80074b8:	028b      	lsls	r3, r1, #10
 80074ba:	4621      	mov	r1, r4
 80074bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80074c0:	4621      	mov	r1, r4
 80074c2:	028a      	lsls	r2, r1, #10
 80074c4:	4610      	mov	r0, r2
 80074c6:	4619      	mov	r1, r3
 80074c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074cc:	2200      	movs	r2, #0
 80074ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80074d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80074d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074d6:	f7f9 fb3d 	bl	8000b54 <__aeabi_uldivmod>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	4613      	mov	r3, r2
 80074e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80074e4:	4b0d      	ldr	r3, [pc, #52]	; (800751c <HAL_RCC_GetSysClockFreq+0x458>)
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	0f1b      	lsrs	r3, r3, #28
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80074f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80074fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007502:	e003      	b.n	800750c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007504:	4b06      	ldr	r3, [pc, #24]	; (8007520 <HAL_RCC_GetSysClockFreq+0x45c>)
 8007506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800750a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800750c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8007510:	4618      	mov	r0, r3
 8007512:	37b8      	adds	r7, #184	; 0xb8
 8007514:	46bd      	mov	sp, r7
 8007516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800751a:	bf00      	nop
 800751c:	40023800 	.word	0x40023800
 8007520:	00f42400 	.word	0x00f42400

08007524 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e28d      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 8083 	beq.w	800764a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007544:	4b94      	ldr	r3, [pc, #592]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 030c 	and.w	r3, r3, #12
 800754c:	2b04      	cmp	r3, #4
 800754e:	d019      	beq.n	8007584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007550:	4b91      	ldr	r3, [pc, #580]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007558:	2b08      	cmp	r3, #8
 800755a:	d106      	bne.n	800756a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800755c:	4b8e      	ldr	r3, [pc, #568]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007568:	d00c      	beq.n	8007584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800756a:	4b8b      	ldr	r3, [pc, #556]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007572:	2b0c      	cmp	r3, #12
 8007574:	d112      	bne.n	800759c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007576:	4b88      	ldr	r3, [pc, #544]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800757e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007582:	d10b      	bne.n	800759c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007584:	4b84      	ldr	r3, [pc, #528]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d05b      	beq.n	8007648 <HAL_RCC_OscConfig+0x124>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d157      	bne.n	8007648 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e25a      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a4:	d106      	bne.n	80075b4 <HAL_RCC_OscConfig+0x90>
 80075a6:	4b7c      	ldr	r3, [pc, #496]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a7b      	ldr	r2, [pc, #492]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b0:	6013      	str	r3, [r2, #0]
 80075b2:	e01d      	b.n	80075f0 <HAL_RCC_OscConfig+0xcc>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075bc:	d10c      	bne.n	80075d8 <HAL_RCC_OscConfig+0xb4>
 80075be:	4b76      	ldr	r3, [pc, #472]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a75      	ldr	r2, [pc, #468]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	4b73      	ldr	r3, [pc, #460]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a72      	ldr	r2, [pc, #456]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	e00b      	b.n	80075f0 <HAL_RCC_OscConfig+0xcc>
 80075d8:	4b6f      	ldr	r3, [pc, #444]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6e      	ldr	r2, [pc, #440]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e2:	6013      	str	r3, [r2, #0]
 80075e4:	4b6c      	ldr	r3, [pc, #432]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a6b      	ldr	r2, [pc, #428]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80075ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d013      	beq.n	8007620 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fc fd5c 	bl	80040b4 <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075fe:	e008      	b.n	8007612 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007600:	f7fc fd58 	bl	80040b4 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	2b64      	cmp	r3, #100	; 0x64
 800760c:	d901      	bls.n	8007612 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800760e:	2303      	movs	r3, #3
 8007610:	e21f      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	4b61      	ldr	r3, [pc, #388]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0f0      	beq.n	8007600 <HAL_RCC_OscConfig+0xdc>
 800761e:	e014      	b.n	800764a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007620:	f7fc fd48 	bl	80040b4 <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007628:	f7fc fd44 	bl	80040b4 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b64      	cmp	r3, #100	; 0x64
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e20b      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	4b57      	ldr	r3, [pc, #348]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x104>
 8007646:	e000      	b.n	800764a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d06f      	beq.n	8007736 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007656:	4b50      	ldr	r3, [pc, #320]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f003 030c 	and.w	r3, r3, #12
 800765e:	2b00      	cmp	r3, #0
 8007660:	d017      	beq.n	8007692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007662:	4b4d      	ldr	r3, [pc, #308]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800766a:	2b08      	cmp	r3, #8
 800766c:	d105      	bne.n	800767a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800766e:	4b4a      	ldr	r3, [pc, #296]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00b      	beq.n	8007692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800767a:	4b47      	ldr	r3, [pc, #284]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007682:	2b0c      	cmp	r3, #12
 8007684:	d11c      	bne.n	80076c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007686:	4b44      	ldr	r3, [pc, #272]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d116      	bne.n	80076c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007692:	4b41      	ldr	r3, [pc, #260]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <HAL_RCC_OscConfig+0x186>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e1d3      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076aa:	4b3b      	ldr	r3, [pc, #236]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	00db      	lsls	r3, r3, #3
 80076b8:	4937      	ldr	r1, [pc, #220]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076be:	e03a      	b.n	8007736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d020      	beq.n	800770a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076c8:	4b34      	ldr	r3, [pc, #208]	; (800779c <HAL_RCC_OscConfig+0x278>)
 80076ca:	2201      	movs	r2, #1
 80076cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ce:	f7fc fcf1 	bl	80040b4 <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d4:	e008      	b.n	80076e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076d6:	f7fc fced 	bl	80040b4 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d901      	bls.n	80076e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e1b4      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e8:	4b2b      	ldr	r3, [pc, #172]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d0f0      	beq.n	80076d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f4:	4b28      	ldr	r3, [pc, #160]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	00db      	lsls	r3, r3, #3
 8007702:	4925      	ldr	r1, [pc, #148]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 8007704:	4313      	orrs	r3, r2
 8007706:	600b      	str	r3, [r1, #0]
 8007708:	e015      	b.n	8007736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <HAL_RCC_OscConfig+0x278>)
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fc fcd0 	bl	80040b4 <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007718:	f7fc fccc 	bl	80040b4 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e193      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800772a:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1f0      	bne.n	8007718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0308 	and.w	r3, r3, #8
 800773e:	2b00      	cmp	r3, #0
 8007740:	d036      	beq.n	80077b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d016      	beq.n	8007778 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800774a:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <HAL_RCC_OscConfig+0x27c>)
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007750:	f7fc fcb0 	bl	80040b4 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007758:	f7fc fcac 	bl	80040b4 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b02      	cmp	r3, #2
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e173      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800776a:	4b0b      	ldr	r3, [pc, #44]	; (8007798 <HAL_RCC_OscConfig+0x274>)
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0x234>
 8007776:	e01b      	b.n	80077b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007778:	4b09      	ldr	r3, [pc, #36]	; (80077a0 <HAL_RCC_OscConfig+0x27c>)
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800777e:	f7fc fc99 	bl	80040b4 <HAL_GetTick>
 8007782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007784:	e00e      	b.n	80077a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007786:	f7fc fc95 	bl	80040b4 <HAL_GetTick>
 800778a:	4602      	mov	r2, r0
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	2b02      	cmp	r3, #2
 8007792:	d907      	bls.n	80077a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e15c      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
 8007798:	40023800 	.word	0x40023800
 800779c:	42470000 	.word	0x42470000
 80077a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077a4:	4b8a      	ldr	r3, [pc, #552]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80077a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1ea      	bne.n	8007786 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0304 	and.w	r3, r3, #4
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 8097 	beq.w	80078ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077be:	2300      	movs	r3, #0
 80077c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077c2:	4b83      	ldr	r3, [pc, #524]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10f      	bne.n	80077ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	4b7f      	ldr	r3, [pc, #508]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80077d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d6:	4a7e      	ldr	r2, [pc, #504]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80077d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077dc:	6413      	str	r3, [r2, #64]	; 0x40
 80077de:	4b7c      	ldr	r3, [pc, #496]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ea:	2301      	movs	r3, #1
 80077ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077ee:	4b79      	ldr	r3, [pc, #484]	; (80079d4 <HAL_RCC_OscConfig+0x4b0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d118      	bne.n	800782c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077fa:	4b76      	ldr	r3, [pc, #472]	; (80079d4 <HAL_RCC_OscConfig+0x4b0>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a75      	ldr	r2, [pc, #468]	; (80079d4 <HAL_RCC_OscConfig+0x4b0>)
 8007800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007806:	f7fc fc55 	bl	80040b4 <HAL_GetTick>
 800780a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800780c:	e008      	b.n	8007820 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800780e:	f7fc fc51 	bl	80040b4 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e118      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007820:	4b6c      	ldr	r3, [pc, #432]	; (80079d4 <HAL_RCC_OscConfig+0x4b0>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d106      	bne.n	8007842 <HAL_RCC_OscConfig+0x31e>
 8007834:	4b66      	ldr	r3, [pc, #408]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007838:	4a65      	ldr	r2, [pc, #404]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	6713      	str	r3, [r2, #112]	; 0x70
 8007840:	e01c      	b.n	800787c <HAL_RCC_OscConfig+0x358>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	2b05      	cmp	r3, #5
 8007848:	d10c      	bne.n	8007864 <HAL_RCC_OscConfig+0x340>
 800784a:	4b61      	ldr	r3, [pc, #388]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	4a60      	ldr	r2, [pc, #384]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007850:	f043 0304 	orr.w	r3, r3, #4
 8007854:	6713      	str	r3, [r2, #112]	; 0x70
 8007856:	4b5e      	ldr	r3, [pc, #376]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	4a5d      	ldr	r2, [pc, #372]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 800785c:	f043 0301 	orr.w	r3, r3, #1
 8007860:	6713      	str	r3, [r2, #112]	; 0x70
 8007862:	e00b      	b.n	800787c <HAL_RCC_OscConfig+0x358>
 8007864:	4b5a      	ldr	r3, [pc, #360]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007868:	4a59      	ldr	r2, [pc, #356]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	6713      	str	r3, [r2, #112]	; 0x70
 8007870:	4b57      	ldr	r3, [pc, #348]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	4a56      	ldr	r2, [pc, #344]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007876:	f023 0304 	bic.w	r3, r3, #4
 800787a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d015      	beq.n	80078b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007884:	f7fc fc16 	bl	80040b4 <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800788a:	e00a      	b.n	80078a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800788c:	f7fc fc12 	bl	80040b4 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	f241 3288 	movw	r2, #5000	; 0x1388
 800789a:	4293      	cmp	r3, r2
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e0d7      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078a2:	4b4b      	ldr	r3, [pc, #300]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0ee      	beq.n	800788c <HAL_RCC_OscConfig+0x368>
 80078ae:	e014      	b.n	80078da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b0:	f7fc fc00 	bl	80040b4 <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078b6:	e00a      	b.n	80078ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078b8:	f7fc fbfc 	bl	80040b4 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e0c1      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078ce:	4b40      	ldr	r3, [pc, #256]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1ee      	bne.n	80078b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d105      	bne.n	80078ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078e0:	4b3b      	ldr	r3, [pc, #236]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	4a3a      	ldr	r2, [pc, #232]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80078e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80ad 	beq.w	8007a50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078f6:	4b36      	ldr	r3, [pc, #216]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d060      	beq.n	80079c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	2b02      	cmp	r3, #2
 8007908:	d145      	bne.n	8007996 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800790a:	4b33      	ldr	r3, [pc, #204]	; (80079d8 <HAL_RCC_OscConfig+0x4b4>)
 800790c:	2200      	movs	r2, #0
 800790e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007910:	f7fc fbd0 	bl	80040b4 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007918:	f7fc fbcc 	bl	80040b4 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b02      	cmp	r3, #2
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e093      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800792a:	4b29      	ldr	r3, [pc, #164]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f0      	bne.n	8007918 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69da      	ldr	r2, [r3, #28]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	019b      	lsls	r3, r3, #6
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	085b      	lsrs	r3, r3, #1
 800794e:	3b01      	subs	r3, #1
 8007950:	041b      	lsls	r3, r3, #16
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007958:	061b      	lsls	r3, r3, #24
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007960:	071b      	lsls	r3, r3, #28
 8007962:	491b      	ldr	r1, [pc, #108]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 8007964:	4313      	orrs	r3, r2
 8007966:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007968:	4b1b      	ldr	r3, [pc, #108]	; (80079d8 <HAL_RCC_OscConfig+0x4b4>)
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796e:	f7fc fba1 	bl	80040b4 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007974:	e008      	b.n	8007988 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007976:	f7fc fb9d 	bl	80040b4 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d901      	bls.n	8007988 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e064      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007988:	4b11      	ldr	r3, [pc, #68]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d0f0      	beq.n	8007976 <HAL_RCC_OscConfig+0x452>
 8007994:	e05c      	b.n	8007a50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007996:	4b10      	ldr	r3, [pc, #64]	; (80079d8 <HAL_RCC_OscConfig+0x4b4>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fc fb8a 	bl	80040b4 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a4:	f7fc fb86 	bl	80040b4 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e04d      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <HAL_RCC_OscConfig+0x4ac>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0x480>
 80079c2:	e045      	b.n	8007a50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d107      	bne.n	80079dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e040      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
 80079d0:	40023800 	.word	0x40023800
 80079d4:	40007000 	.word	0x40007000
 80079d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079dc:	4b1f      	ldr	r3, [pc, #124]	; (8007a5c <HAL_RCC_OscConfig+0x538>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d030      	beq.n	8007a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d129      	bne.n	8007a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d122      	bne.n	8007a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d119      	bne.n	8007a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	3b01      	subs	r3, #1
 8007a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d10f      	bne.n	8007a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d107      	bne.n	8007a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d001      	beq.n	8007a50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e000      	b.n	8007a52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	40023800 	.word	0x40023800

08007a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e041      	b.n	8007af6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fc f9a4 	bl	8003dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	f000 fa7e 	bl	8007fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b085      	sub	sp, #20
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d001      	beq.n	8007b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e04e      	b.n	8007bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0201 	orr.w	r2, r2, #1
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a23      	ldr	r2, [pc, #140]	; (8007bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d022      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b42:	d01d      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a1f      	ldr	r2, [pc, #124]	; (8007bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d018      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4a1e      	ldr	r2, [pc, #120]	; (8007bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d013      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a1c      	ldr	r2, [pc, #112]	; (8007bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00e      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a1b      	ldr	r2, [pc, #108]	; (8007bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d009      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a19      	ldr	r2, [pc, #100]	; (8007bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d004      	beq.n	8007b80 <HAL_TIM_Base_Start_IT+0x80>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a18      	ldr	r2, [pc, #96]	; (8007bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d111      	bne.n	8007ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b06      	cmp	r3, #6
 8007b90:	d010      	beq.n	8007bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681a      	ldr	r2, [r3, #0]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba2:	e007      	b.n	8007bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40000400 	.word	0x40000400
 8007bcc:	40000800 	.word	0x40000800
 8007bd0:	40000c00 	.word	0x40000c00
 8007bd4:	40010400 	.word	0x40010400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	40001800 	.word	0x40001800

08007be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d020      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01b      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0202 	mvn.w	r2, #2
 8007c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f999 	bl	8007f62 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f98b 	bl	8007f4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f99c 	bl	8007f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 0304 	and.w	r3, r3, #4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d020      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0304 	and.w	r3, r3, #4
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01b      	beq.n	8007c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0204 	mvn.w	r2, #4
 8007c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2202      	movs	r2, #2
 8007c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d003      	beq.n	8007c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f973 	bl	8007f62 <HAL_TIM_IC_CaptureCallback>
 8007c7c:	e005      	b.n	8007c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f965 	bl	8007f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f976 	bl	8007f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d020      	beq.n	8007cdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d01b      	beq.n	8007cdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f06f 0208 	mvn.w	r2, #8
 8007cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	69db      	ldr	r3, [r3, #28]
 8007cba:	f003 0303 	and.w	r3, r3, #3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d003      	beq.n	8007cca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f94d 	bl	8007f62 <HAL_TIM_IC_CaptureCallback>
 8007cc8:	e005      	b.n	8007cd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f93f 	bl	8007f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 f950 	bl	8007f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0310 	and.w	r3, r3, #16
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d020      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01b      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0210 	mvn.w	r2, #16
 8007cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f927 	bl	8007f62 <HAL_TIM_IC_CaptureCallback>
 8007d14:	e005      	b.n	8007d22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f919 	bl	8007f4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 f92a 	bl	8007f76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00c      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0201 	mvn.w	r2, #1
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fb fb6a 	bl	8003420 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 fae4 	bl	8008338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f8fb 	bl	8007f8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0220 	mvn.w	r2, #32
 8007db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fab6 	bl	8008324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d101      	bne.n	8007ddc <HAL_TIM_ConfigClockSource+0x1c>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	e0b4      	b.n	8007f46 <HAL_TIM_ConfigClockSource+0x186>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2202      	movs	r2, #2
 8007de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e14:	d03e      	beq.n	8007e94 <HAL_TIM_ConfigClockSource+0xd4>
 8007e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e1a:	f200 8087 	bhi.w	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e22:	f000 8086 	beq.w	8007f32 <HAL_TIM_ConfigClockSource+0x172>
 8007e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2a:	d87f      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e2c:	2b70      	cmp	r3, #112	; 0x70
 8007e2e:	d01a      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0xa6>
 8007e30:	2b70      	cmp	r3, #112	; 0x70
 8007e32:	d87b      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e34:	2b60      	cmp	r3, #96	; 0x60
 8007e36:	d050      	beq.n	8007eda <HAL_TIM_ConfigClockSource+0x11a>
 8007e38:	2b60      	cmp	r3, #96	; 0x60
 8007e3a:	d877      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e3c:	2b50      	cmp	r3, #80	; 0x50
 8007e3e:	d03c      	beq.n	8007eba <HAL_TIM_ConfigClockSource+0xfa>
 8007e40:	2b50      	cmp	r3, #80	; 0x50
 8007e42:	d873      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	d058      	beq.n	8007efa <HAL_TIM_ConfigClockSource+0x13a>
 8007e48:	2b40      	cmp	r3, #64	; 0x40
 8007e4a:	d86f      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e4c:	2b30      	cmp	r3, #48	; 0x30
 8007e4e:	d064      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x15a>
 8007e50:	2b30      	cmp	r3, #48	; 0x30
 8007e52:	d86b      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d060      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x15a>
 8007e58:	2b20      	cmp	r3, #32
 8007e5a:	d867      	bhi.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d05c      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x15a>
 8007e60:	2b10      	cmp	r3, #16
 8007e62:	d05a      	beq.n	8007f1a <HAL_TIM_ConfigClockSource+0x15a>
 8007e64:	e062      	b.n	8007f2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e76:	f000 f9b9 	bl	80081ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	609a      	str	r2, [r3, #8]
      break;
 8007e92:	e04f      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ea4:	f000 f9a2 	bl	80081ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007eb6:	609a      	str	r2, [r3, #8]
      break;
 8007eb8:	e03c      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	f000 f916 	bl	80080f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2150      	movs	r1, #80	; 0x50
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f96f 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007ed8:	e02c      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f000 f935 	bl	8008156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2160      	movs	r1, #96	; 0x60
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 f95f 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007ef8:	e01c      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f06:	461a      	mov	r2, r3
 8007f08:	f000 f8f6 	bl	80080f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2140      	movs	r1, #64	; 0x40
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f94f 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007f18:	e00c      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f000 f946 	bl	80081b6 <TIM_ITRx_SetConfig>
      break;
 8007f2a:	e003      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f30:	e000      	b.n	8007f34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b083      	sub	sp, #12
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b083      	sub	sp, #12
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f92:	bf00      	nop
 8007f94:	370c      	adds	r7, #12
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
	...

08007fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a46      	ldr	r2, [pc, #280]	; (80080cc <TIM_Base_SetConfig+0x12c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d013      	beq.n	8007fe0 <TIM_Base_SetConfig+0x40>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbe:	d00f      	beq.n	8007fe0 <TIM_Base_SetConfig+0x40>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a43      	ldr	r2, [pc, #268]	; (80080d0 <TIM_Base_SetConfig+0x130>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00b      	beq.n	8007fe0 <TIM_Base_SetConfig+0x40>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a42      	ldr	r2, [pc, #264]	; (80080d4 <TIM_Base_SetConfig+0x134>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d007      	beq.n	8007fe0 <TIM_Base_SetConfig+0x40>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a41      	ldr	r2, [pc, #260]	; (80080d8 <TIM_Base_SetConfig+0x138>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <TIM_Base_SetConfig+0x40>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a40      	ldr	r2, [pc, #256]	; (80080dc <TIM_Base_SetConfig+0x13c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d108      	bne.n	8007ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a35      	ldr	r2, [pc, #212]	; (80080cc <TIM_Base_SetConfig+0x12c>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d02b      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008000:	d027      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a32      	ldr	r2, [pc, #200]	; (80080d0 <TIM_Base_SetConfig+0x130>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d023      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a31      	ldr	r2, [pc, #196]	; (80080d4 <TIM_Base_SetConfig+0x134>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d01f      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a30      	ldr	r2, [pc, #192]	; (80080d8 <TIM_Base_SetConfig+0x138>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d01b      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a2f      	ldr	r2, [pc, #188]	; (80080dc <TIM_Base_SetConfig+0x13c>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d017      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a2e      	ldr	r2, [pc, #184]	; (80080e0 <TIM_Base_SetConfig+0x140>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d013      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a2d      	ldr	r2, [pc, #180]	; (80080e4 <TIM_Base_SetConfig+0x144>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00f      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a2c      	ldr	r2, [pc, #176]	; (80080e8 <TIM_Base_SetConfig+0x148>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d00b      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a2b      	ldr	r2, [pc, #172]	; (80080ec <TIM_Base_SetConfig+0x14c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d007      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a2a      	ldr	r2, [pc, #168]	; (80080f0 <TIM_Base_SetConfig+0x150>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d003      	beq.n	8008052 <TIM_Base_SetConfig+0xb2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a29      	ldr	r2, [pc, #164]	; (80080f4 <TIM_Base_SetConfig+0x154>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d108      	bne.n	8008064 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	4313      	orrs	r3, r2
 8008070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a10      	ldr	r2, [pc, #64]	; (80080cc <TIM_Base_SetConfig+0x12c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d003      	beq.n	8008098 <TIM_Base_SetConfig+0xf8>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a12      	ldr	r2, [pc, #72]	; (80080dc <TIM_Base_SetConfig+0x13c>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d103      	bne.n	80080a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d105      	bne.n	80080be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f023 0201 	bic.w	r2, r3, #1
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	611a      	str	r2, [r3, #16]
  }
}
 80080be:	bf00      	nop
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40010000 	.word	0x40010000
 80080d0:	40000400 	.word	0x40000400
 80080d4:	40000800 	.word	0x40000800
 80080d8:	40000c00 	.word	0x40000c00
 80080dc:	40010400 	.word	0x40010400
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40014400 	.word	0x40014400
 80080e8:	40014800 	.word	0x40014800
 80080ec:	40001800 	.word	0x40001800
 80080f0:	40001c00 	.word	0x40001c00
 80080f4:	40002000 	.word	0x40002000

080080f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b087      	sub	sp, #28
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	011b      	lsls	r3, r3, #4
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	4313      	orrs	r3, r2
 800812c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f023 030a 	bic.w	r3, r3, #10
 8008134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4313      	orrs	r3, r2
 800813c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	621a      	str	r2, [r3, #32]
}
 800814a:	bf00      	nop
 800814c:	371c      	adds	r7, #28
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008156:	b480      	push	{r7}
 8008158:	b087      	sub	sp, #28
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f023 0210 	bic.w	r2, r3, #16
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	699b      	ldr	r3, [r3, #24]
 8008178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	031b      	lsls	r3, r3, #12
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	4313      	orrs	r3, r2
 800818a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	621a      	str	r2, [r3, #32]
}
 80081aa:	bf00      	nop
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80081b6:	b480      	push	{r7}
 80081b8:	b085      	sub	sp, #20
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
 80081be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	f043 0307 	orr.w	r3, r3, #7
 80081d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	609a      	str	r2, [r3, #8]
}
 80081e0:	bf00      	nop
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	021a      	lsls	r2, r3, #8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	431a      	orrs	r2, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4313      	orrs	r3, r2
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	609a      	str	r2, [r3, #8]
}
 8008220:	bf00      	nop
 8008222:	371c      	adds	r7, #28
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800823c:	2b01      	cmp	r3, #1
 800823e:	d101      	bne.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008240:	2302      	movs	r3, #2
 8008242:	e05a      	b.n	80082fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a21      	ldr	r2, [pc, #132]	; (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d022      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008290:	d01d      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1d      	ldr	r2, [pc, #116]	; (800830c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d018      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1a      	ldr	r2, [pc, #104]	; (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d00e      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a18      	ldr	r2, [pc, #96]	; (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d009      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a17      	ldr	r2, [pc, #92]	; (800831c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d004      	beq.n	80082ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a15      	ldr	r2, [pc, #84]	; (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d10c      	bne.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	40010000 	.word	0x40010000
 800830c:	40000400 	.word	0x40000400
 8008310:	40000800 	.word	0x40000800
 8008314:	40000c00 	.word	0x40000c00
 8008318:	40010400 	.word	0x40010400
 800831c:	40014000 	.word	0x40014000
 8008320:	40001800 	.word	0x40001800

08008324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e042      	b.n	80083e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fb fd6c 	bl	8003e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2224      	movs	r2, #36	; 0x24
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800838e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f82b 	bl	80083ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695a      	ldr	r2, [r3, #20]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083f0:	b0c0      	sub	sp, #256	; 0x100
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008408:	68d9      	ldr	r1, [r3, #12]
 800840a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	ea40 0301 	orr.w	r3, r0, r1
 8008414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	431a      	orrs	r2, r3
 8008424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	431a      	orrs	r2, r3
 800842c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008444:	f021 010c 	bic.w	r1, r1, #12
 8008448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008452:	430b      	orrs	r3, r1
 8008454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008466:	6999      	ldr	r1, [r3, #24]
 8008468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	ea40 0301 	orr.w	r3, r0, r1
 8008472:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	4b8f      	ldr	r3, [pc, #572]	; (80086b8 <UART_SetConfig+0x2cc>)
 800847c:	429a      	cmp	r2, r3
 800847e:	d005      	beq.n	800848c <UART_SetConfig+0xa0>
 8008480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b8d      	ldr	r3, [pc, #564]	; (80086bc <UART_SetConfig+0x2d0>)
 8008488:	429a      	cmp	r2, r3
 800848a:	d104      	bne.n	8008496 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800848c:	f7fe fe06 	bl	800709c <HAL_RCC_GetPCLK2Freq>
 8008490:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008494:	e003      	b.n	800849e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008496:	f7fe fded 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800849a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800849e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a8:	f040 810c 	bne.w	80086c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b0:	2200      	movs	r2, #0
 80084b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80084b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80084ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80084be:	4622      	mov	r2, r4
 80084c0:	462b      	mov	r3, r5
 80084c2:	1891      	adds	r1, r2, r2
 80084c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80084c6:	415b      	adcs	r3, r3
 80084c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80084ce:	4621      	mov	r1, r4
 80084d0:	eb12 0801 	adds.w	r8, r2, r1
 80084d4:	4629      	mov	r1, r5
 80084d6:	eb43 0901 	adc.w	r9, r3, r1
 80084da:	f04f 0200 	mov.w	r2, #0
 80084de:	f04f 0300 	mov.w	r3, #0
 80084e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80084e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80084ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80084ee:	4690      	mov	r8, r2
 80084f0:	4699      	mov	r9, r3
 80084f2:	4623      	mov	r3, r4
 80084f4:	eb18 0303 	adds.w	r3, r8, r3
 80084f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084fc:	462b      	mov	r3, r5
 80084fe:	eb49 0303 	adc.w	r3, r9, r3
 8008502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008512:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800851a:	460b      	mov	r3, r1
 800851c:	18db      	adds	r3, r3, r3
 800851e:	653b      	str	r3, [r7, #80]	; 0x50
 8008520:	4613      	mov	r3, r2
 8008522:	eb42 0303 	adc.w	r3, r2, r3
 8008526:	657b      	str	r3, [r7, #84]	; 0x54
 8008528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800852c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008530:	f7f8 fb10 	bl	8000b54 <__aeabi_uldivmod>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4b61      	ldr	r3, [pc, #388]	; (80086c0 <UART_SetConfig+0x2d4>)
 800853a:	fba3 2302 	umull	r2, r3, r3, r2
 800853e:	095b      	lsrs	r3, r3, #5
 8008540:	011c      	lsls	r4, r3, #4
 8008542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008546:	2200      	movs	r2, #0
 8008548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800854c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008550:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008554:	4642      	mov	r2, r8
 8008556:	464b      	mov	r3, r9
 8008558:	1891      	adds	r1, r2, r2
 800855a:	64b9      	str	r1, [r7, #72]	; 0x48
 800855c:	415b      	adcs	r3, r3
 800855e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008564:	4641      	mov	r1, r8
 8008566:	eb12 0a01 	adds.w	sl, r2, r1
 800856a:	4649      	mov	r1, r9
 800856c:	eb43 0b01 	adc.w	fp, r3, r1
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	f04f 0300 	mov.w	r3, #0
 8008578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800857c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008584:	4692      	mov	sl, r2
 8008586:	469b      	mov	fp, r3
 8008588:	4643      	mov	r3, r8
 800858a:	eb1a 0303 	adds.w	r3, sl, r3
 800858e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008592:	464b      	mov	r3, r9
 8008594:	eb4b 0303 	adc.w	r3, fp, r3
 8008598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800859c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80085ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80085b0:	460b      	mov	r3, r1
 80085b2:	18db      	adds	r3, r3, r3
 80085b4:	643b      	str	r3, [r7, #64]	; 0x40
 80085b6:	4613      	mov	r3, r2
 80085b8:	eb42 0303 	adc.w	r3, r2, r3
 80085bc:	647b      	str	r3, [r7, #68]	; 0x44
 80085be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80085c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80085c6:	f7f8 fac5 	bl	8000b54 <__aeabi_uldivmod>
 80085ca:	4602      	mov	r2, r0
 80085cc:	460b      	mov	r3, r1
 80085ce:	4611      	mov	r1, r2
 80085d0:	4b3b      	ldr	r3, [pc, #236]	; (80086c0 <UART_SetConfig+0x2d4>)
 80085d2:	fba3 2301 	umull	r2, r3, r3, r1
 80085d6:	095b      	lsrs	r3, r3, #5
 80085d8:	2264      	movs	r2, #100	; 0x64
 80085da:	fb02 f303 	mul.w	r3, r2, r3
 80085de:	1acb      	subs	r3, r1, r3
 80085e0:	00db      	lsls	r3, r3, #3
 80085e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085e6:	4b36      	ldr	r3, [pc, #216]	; (80086c0 <UART_SetConfig+0x2d4>)
 80085e8:	fba3 2302 	umull	r2, r3, r3, r2
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085f4:	441c      	add	r4, r3
 80085f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008600:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008604:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	1891      	adds	r1, r2, r2
 800860e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008610:	415b      	adcs	r3, r3
 8008612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008618:	4641      	mov	r1, r8
 800861a:	1851      	adds	r1, r2, r1
 800861c:	6339      	str	r1, [r7, #48]	; 0x30
 800861e:	4649      	mov	r1, r9
 8008620:	414b      	adcs	r3, r1
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
 8008624:	f04f 0200 	mov.w	r2, #0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008630:	4659      	mov	r1, fp
 8008632:	00cb      	lsls	r3, r1, #3
 8008634:	4651      	mov	r1, sl
 8008636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800863a:	4651      	mov	r1, sl
 800863c:	00ca      	lsls	r2, r1, #3
 800863e:	4610      	mov	r0, r2
 8008640:	4619      	mov	r1, r3
 8008642:	4603      	mov	r3, r0
 8008644:	4642      	mov	r2, r8
 8008646:	189b      	adds	r3, r3, r2
 8008648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800864c:	464b      	mov	r3, r9
 800864e:	460a      	mov	r2, r1
 8008650:	eb42 0303 	adc.w	r3, r2, r3
 8008654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008664:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800866c:	460b      	mov	r3, r1
 800866e:	18db      	adds	r3, r3, r3
 8008670:	62bb      	str	r3, [r7, #40]	; 0x28
 8008672:	4613      	mov	r3, r2
 8008674:	eb42 0303 	adc.w	r3, r2, r3
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800867a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800867e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008682:	f7f8 fa67 	bl	8000b54 <__aeabi_uldivmod>
 8008686:	4602      	mov	r2, r0
 8008688:	460b      	mov	r3, r1
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <UART_SetConfig+0x2d4>)
 800868c:	fba3 1302 	umull	r1, r3, r3, r2
 8008690:	095b      	lsrs	r3, r3, #5
 8008692:	2164      	movs	r1, #100	; 0x64
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	3332      	adds	r3, #50	; 0x32
 800869e:	4a08      	ldr	r2, [pc, #32]	; (80086c0 <UART_SetConfig+0x2d4>)
 80086a0:	fba2 2303 	umull	r2, r3, r2, r3
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	f003 0207 	and.w	r2, r3, #7
 80086aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4422      	add	r2, r4
 80086b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80086b4:	e106      	b.n	80088c4 <UART_SetConfig+0x4d8>
 80086b6:	bf00      	nop
 80086b8:	40011000 	.word	0x40011000
 80086bc:	40011400 	.word	0x40011400
 80086c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80086c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c8:	2200      	movs	r2, #0
 80086ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80086ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80086d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80086d6:	4642      	mov	r2, r8
 80086d8:	464b      	mov	r3, r9
 80086da:	1891      	adds	r1, r2, r2
 80086dc:	6239      	str	r1, [r7, #32]
 80086de:	415b      	adcs	r3, r3
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
 80086e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80086e6:	4641      	mov	r1, r8
 80086e8:	1854      	adds	r4, r2, r1
 80086ea:	4649      	mov	r1, r9
 80086ec:	eb43 0501 	adc.w	r5, r3, r1
 80086f0:	f04f 0200 	mov.w	r2, #0
 80086f4:	f04f 0300 	mov.w	r3, #0
 80086f8:	00eb      	lsls	r3, r5, #3
 80086fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80086fe:	00e2      	lsls	r2, r4, #3
 8008700:	4614      	mov	r4, r2
 8008702:	461d      	mov	r5, r3
 8008704:	4643      	mov	r3, r8
 8008706:	18e3      	adds	r3, r4, r3
 8008708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800870c:	464b      	mov	r3, r9
 800870e:	eb45 0303 	adc.w	r3, r5, r3
 8008712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008732:	4629      	mov	r1, r5
 8008734:	008b      	lsls	r3, r1, #2
 8008736:	4621      	mov	r1, r4
 8008738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800873c:	4621      	mov	r1, r4
 800873e:	008a      	lsls	r2, r1, #2
 8008740:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008744:	f7f8 fa06 	bl	8000b54 <__aeabi_uldivmod>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4b60      	ldr	r3, [pc, #384]	; (80088d0 <UART_SetConfig+0x4e4>)
 800874e:	fba3 2302 	umull	r2, r3, r3, r2
 8008752:	095b      	lsrs	r3, r3, #5
 8008754:	011c      	lsls	r4, r3, #4
 8008756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800875a:	2200      	movs	r2, #0
 800875c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008760:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008764:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	1891      	adds	r1, r2, r2
 800876e:	61b9      	str	r1, [r7, #24]
 8008770:	415b      	adcs	r3, r3
 8008772:	61fb      	str	r3, [r7, #28]
 8008774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008778:	4641      	mov	r1, r8
 800877a:	1851      	adds	r1, r2, r1
 800877c:	6139      	str	r1, [r7, #16]
 800877e:	4649      	mov	r1, r9
 8008780:	414b      	adcs	r3, r1
 8008782:	617b      	str	r3, [r7, #20]
 8008784:	f04f 0200 	mov.w	r2, #0
 8008788:	f04f 0300 	mov.w	r3, #0
 800878c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008790:	4659      	mov	r1, fp
 8008792:	00cb      	lsls	r3, r1, #3
 8008794:	4651      	mov	r1, sl
 8008796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800879a:	4651      	mov	r1, sl
 800879c:	00ca      	lsls	r2, r1, #3
 800879e:	4610      	mov	r0, r2
 80087a0:	4619      	mov	r1, r3
 80087a2:	4603      	mov	r3, r0
 80087a4:	4642      	mov	r2, r8
 80087a6:	189b      	adds	r3, r3, r2
 80087a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087ac:	464b      	mov	r3, r9
 80087ae:	460a      	mov	r2, r1
 80087b0:	eb42 0303 	adc.w	r3, r2, r3
 80087b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80087c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80087c4:	f04f 0200 	mov.w	r2, #0
 80087c8:	f04f 0300 	mov.w	r3, #0
 80087cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80087d0:	4649      	mov	r1, r9
 80087d2:	008b      	lsls	r3, r1, #2
 80087d4:	4641      	mov	r1, r8
 80087d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087da:	4641      	mov	r1, r8
 80087dc:	008a      	lsls	r2, r1, #2
 80087de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80087e2:	f7f8 f9b7 	bl	8000b54 <__aeabi_uldivmod>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4611      	mov	r1, r2
 80087ec:	4b38      	ldr	r3, [pc, #224]	; (80088d0 <UART_SetConfig+0x4e4>)
 80087ee:	fba3 2301 	umull	r2, r3, r3, r1
 80087f2:	095b      	lsrs	r3, r3, #5
 80087f4:	2264      	movs	r2, #100	; 0x64
 80087f6:	fb02 f303 	mul.w	r3, r2, r3
 80087fa:	1acb      	subs	r3, r1, r3
 80087fc:	011b      	lsls	r3, r3, #4
 80087fe:	3332      	adds	r3, #50	; 0x32
 8008800:	4a33      	ldr	r2, [pc, #204]	; (80088d0 <UART_SetConfig+0x4e4>)
 8008802:	fba2 2303 	umull	r2, r3, r2, r3
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800880c:	441c      	add	r4, r3
 800880e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008812:	2200      	movs	r2, #0
 8008814:	673b      	str	r3, [r7, #112]	; 0x70
 8008816:	677a      	str	r2, [r7, #116]	; 0x74
 8008818:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800881c:	4642      	mov	r2, r8
 800881e:	464b      	mov	r3, r9
 8008820:	1891      	adds	r1, r2, r2
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	415b      	adcs	r3, r3
 8008826:	60fb      	str	r3, [r7, #12]
 8008828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800882c:	4641      	mov	r1, r8
 800882e:	1851      	adds	r1, r2, r1
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	4649      	mov	r1, r9
 8008834:	414b      	adcs	r3, r1
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008844:	4659      	mov	r1, fp
 8008846:	00cb      	lsls	r3, r1, #3
 8008848:	4651      	mov	r1, sl
 800884a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800884e:	4651      	mov	r1, sl
 8008850:	00ca      	lsls	r2, r1, #3
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	4603      	mov	r3, r0
 8008858:	4642      	mov	r2, r8
 800885a:	189b      	adds	r3, r3, r2
 800885c:	66bb      	str	r3, [r7, #104]	; 0x68
 800885e:	464b      	mov	r3, r9
 8008860:	460a      	mov	r2, r1
 8008862:	eb42 0303 	adc.w	r3, r2, r3
 8008866:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	663b      	str	r3, [r7, #96]	; 0x60
 8008872:	667a      	str	r2, [r7, #100]	; 0x64
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008880:	4649      	mov	r1, r9
 8008882:	008b      	lsls	r3, r1, #2
 8008884:	4641      	mov	r1, r8
 8008886:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800888a:	4641      	mov	r1, r8
 800888c:	008a      	lsls	r2, r1, #2
 800888e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008892:	f7f8 f95f 	bl	8000b54 <__aeabi_uldivmod>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <UART_SetConfig+0x4e4>)
 800889c:	fba3 1302 	umull	r1, r3, r3, r2
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	2164      	movs	r1, #100	; 0x64
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	011b      	lsls	r3, r3, #4
 80088ac:	3332      	adds	r3, #50	; 0x32
 80088ae:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <UART_SetConfig+0x4e4>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	f003 020f 	and.w	r2, r3, #15
 80088ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4422      	add	r2, r4
 80088c2:	609a      	str	r2, [r3, #8]
}
 80088c4:	bf00      	nop
 80088c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80088ca:	46bd      	mov	sp, r7
 80088cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088d0:	51eb851f 	.word	0x51eb851f

080088d4 <memset>:
 80088d4:	4402      	add	r2, r0
 80088d6:	4603      	mov	r3, r0
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	f803 1b01 	strb.w	r1, [r3], #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <__libc_init_array>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	4d0d      	ldr	r5, [pc, #52]	; (800891c <__libc_init_array+0x38>)
 80088e8:	4c0d      	ldr	r4, [pc, #52]	; (8008920 <__libc_init_array+0x3c>)
 80088ea:	1b64      	subs	r4, r4, r5
 80088ec:	10a4      	asrs	r4, r4, #2
 80088ee:	2600      	movs	r6, #0
 80088f0:	42a6      	cmp	r6, r4
 80088f2:	d109      	bne.n	8008908 <__libc_init_array+0x24>
 80088f4:	4d0b      	ldr	r5, [pc, #44]	; (8008924 <__libc_init_array+0x40>)
 80088f6:	4c0c      	ldr	r4, [pc, #48]	; (8008928 <__libc_init_array+0x44>)
 80088f8:	f000 f826 	bl	8008948 <_init>
 80088fc:	1b64      	subs	r4, r4, r5
 80088fe:	10a4      	asrs	r4, r4, #2
 8008900:	2600      	movs	r6, #0
 8008902:	42a6      	cmp	r6, r4
 8008904:	d105      	bne.n	8008912 <__libc_init_array+0x2e>
 8008906:	bd70      	pop	{r4, r5, r6, pc}
 8008908:	f855 3b04 	ldr.w	r3, [r5], #4
 800890c:	4798      	blx	r3
 800890e:	3601      	adds	r6, #1
 8008910:	e7ee      	b.n	80088f0 <__libc_init_array+0xc>
 8008912:	f855 3b04 	ldr.w	r3, [r5], #4
 8008916:	4798      	blx	r3
 8008918:	3601      	adds	r6, #1
 800891a:	e7f2      	b.n	8008902 <__libc_init_array+0x1e>
 800891c:	08008980 	.word	0x08008980
 8008920:	08008980 	.word	0x08008980
 8008924:	08008980 	.word	0x08008980
 8008928:	08008984 	.word	0x08008984

0800892c <memcpy>:
 800892c:	440a      	add	r2, r1
 800892e:	4291      	cmp	r1, r2
 8008930:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008934:	d100      	bne.n	8008938 <memcpy+0xc>
 8008936:	4770      	bx	lr
 8008938:	b510      	push	{r4, lr}
 800893a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800893e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008942:	4291      	cmp	r1, r2
 8008944:	d1f9      	bne.n	800893a <memcpy+0xe>
 8008946:	bd10      	pop	{r4, pc}

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
